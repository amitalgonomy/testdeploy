{"version":3,"file":"x-empty-search-18eef079.js","sources":["../node_modules/@empathyco/src/components/animations/cross-fade.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/animations/cross-fade.vue","../node_modules/@empathyco/src/components/animations/fade.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/animations/fade.vue","../node_modules/@empathyco/src/components/decorators/injection.consts.ts","../node_modules/@empathyco/src/components/animations/disable-animation.mixin.ts","../node_modules/@empathyco/src/utils/function.ts","../node_modules/@empathyco/src/utils/storage.ts","../node_modules/@empathyco/src/components/animations/staggering-transition-group.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/animations/staggering-transition-group.vue","../node_modules/@empathyco/src/components/animations/staggered-fade-and-slide.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/animations/staggered-fade-and-slide.vue","../node_modules/@empathyco/src/components/animations/create-directional-animation-factory.ts","../node_modules/@empathyco/src/components/animations/animate-clip-path/animate-clip-path.factory.ts","../node_modules/@empathyco/src/components/animations/animate-scale/animate-scale.factory.ts","../node_modules/@empathyco/src/components/animations/animate-translate/animate-translate.factory.ts","../node_modules/@empathyco/src/components/base-event-button.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/base-event-button.vue","../node_modules/@empathyco/src/utils/html.ts","../node_modules/@empathyco/src/utils/normalize.ts","../node_modules/@empathyco/src/utils/debounce.ts","../node_modules/@empathyco/src/components/column-picker/column-picker.mixin.ts","../node_modules/@empathyco/src/components/dynamic-props.mixin.ts","../node_modules/@empathyco/src/components/column-picker/base-column-picker-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/column-picker/base-column-picker-list.vue","../node_modules/@empathyco/src/utils/currency-formatter.ts","../node_modules/@empathyco/src/components/currency/base-currency.vue","../node_modules/@empathyco/src/components/currency/base-currency.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/filters/labels/base-price-filter-label.vue","../node_modules/@empathyco/src/components/filters/labels/base-price-filter-label.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/arrow-left.vue","../node_modules/@empathyco/src/components/icons/arrow-left.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/arrow-right.vue","../node_modules/@empathyco/src/components/icons/arrow-right.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/bar-code.vue","../node_modules/@empathyco/src/components/icons/bar-code.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/checkbox-selected.vue","../node_modules/@empathyco/src/components/icons/checkbox-selected.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/checkbox-unselected.vue","../node_modules/@empathyco/src/components/icons/checkbox-unselected.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/chevron-down.vue","../node_modules/@empathyco/src/components/icons/chevron-down.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/chevron-left.vue","../node_modules/@empathyco/src/components/icons/chevron-left.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/chevron-right.vue","../node_modules/@empathyco/src/components/icons/chevron-right.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/chevron-up.vue","../node_modules/@empathyco/src/components/icons/chevron-up.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/cross-tiny.vue","../node_modules/@empathyco/src/components/icons/cross-tiny.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/cross.vue","../node_modules/@empathyco/src/components/icons/cross.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/curated-check.vue","../node_modules/@empathyco/src/components/icons/curated-check.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/filters.vue","../node_modules/@empathyco/src/components/icons/filters.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/grid-1-col.vue","../node_modules/@empathyco/src/components/icons/grid-1-col.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/grid-2-col.vue","../node_modules/@empathyco/src/components/icons/grid-2-col.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/grid-4-col.vue","../node_modules/@empathyco/src/components/icons/grid-4-col.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/history.vue","../node_modules/@empathyco/src/components/icons/history.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/light-bulb-on.vue","../node_modules/@empathyco/src/components/icons/light-bulb-on.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/minus.vue","../node_modules/@empathyco/src/components/icons/minus.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/plus.vue","../node_modules/@empathyco/src/components/icons/plus.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/radiobutton-selected.vue","../node_modules/@empathyco/src/components/icons/radiobutton-selected.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/radiobutton-unselected.vue","../node_modules/@empathyco/src/components/icons/radiobutton-unselected.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/search.vue","../node_modules/@empathyco/src/components/icons/search.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/settings.vue","../node_modules/@empathyco/src/components/icons/settings.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/trash.vue","../node_modules/@empathyco/src/components/icons/trash.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/icons/trending.vue","../node_modules/@empathyco/src/components/icons/trending.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/scroll/store/module.ts","../node_modules/@empathyco/src/x-modules/scroll/store/emitters.ts","../node_modules/@empathyco/src/x-modules/scroll/wiring.ts","../node_modules/@empathyco/src/x-modules/scroll/x-module.ts","../node_modules/@empathyco/src/x-modules/scroll/components/scroll.const.ts","../node_modules/@empathyco/src/x-modules/scroll/components/main-scroll.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/scroll/components/main-scroll.vue","../node_modules/@empathyco/src/utils/focus.ts","../node_modules/@empathyco/src/components/decorators/debounce.decorators.ts","../node_modules/@empathyco/src/components/modals/base-modal.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-modal.vue","../node_modules/@empathyco/src/components/modals/base-id-modal.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-id-modal.vue","../node_modules/@empathyco/src/components/scroll/scroll.mixin.ts","../node_modules/@empathyco/src/utils/throttle.ts","../node_modules/@empathyco/src/components/scroll/base-scroll.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/scroll/base-scroll.vue","../node_modules/@empathyco/src/x-modules/scroll/components/scroll.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/scroll/components/scroll.vue","../node_modules/@empathyco/src/types/animation-prop.ts","../node_modules/@empathyco/src/components/panels/base-toggle-panel.vue","../node_modules/@empathyco/src/components/panels/base-toggle-panel.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-events-modal-close.vue","../node_modules/@empathyco/src/components/modals/base-events-modal-close.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-events-modal.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-events-modal.vue","../node_modules/@empathyco/src/composables/use-$x.ts","../node_modules/@empathyco/src/components/modals/base-id-modal-close.vue","../node_modules/@empathyco/src/components/modals/base-id-modal-close.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/base-id-modal-open.vue","../node_modules/@empathyco/src/components/modals/base-id-modal-open.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/close-main-modal.vue","../node_modules/@empathyco/src/components/modals/close-main-modal.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/modals/main-modal.vue","../node_modules/@empathyco/src/components/modals/main-modal.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/panels/base-header-toggle-panel.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/panels/base-header-toggle-panel.vue","../node_modules/@empathyco/src/components/result/base-result-add-to-cart.vue","../node_modules/@empathyco/src/components/result/base-result-add-to-cart.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/result/base-result-current-price.vue","../node_modules/@empathyco/src/components/result/base-result-current-price.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/utils/options-api.ts","../node_modules/@empathyco/src/components/result/base-result-image.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/result/base-result-image.vue","../node_modules/@empathyco/src/components/result/base-result-link.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/result/base-result-link.vue","../node_modules/@empathyco/src/components/result/base-result-previous-price.vue","../node_modules/@empathyco/src/components/result/base-result-previous-price.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/result/base-result-fallback-image.vue","../node_modules/@empathyco/src/components/result/base-result-fallback-image.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/result/base-result-placeholder-image.vue","../node_modules/@empathyco/src/components/result/base-result-placeholder-image.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/highlight.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/highlight.vue","../node_modules/@empathyco/src/components/suggestions/base-suggestion.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/suggestions/base-suggestion.vue","../node_modules/@empathyco/src/components/suggestions/base-suggestions.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/suggestions/base-suggestions.vue","../node_modules/@empathyco/src/components/auto-progress-bar.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/auto-progress-bar.vue","../node_modules/@empathyco/src/components/base-grid.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/base-grid.vue","../node_modules/@empathyco/src/services/directional-focus-navigation.service.ts","../node_modules/@empathyco/src/components/base-keyboard-navigation.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/base-keyboard-navigation.vue","../node_modules/@empathyco/src/components/base-switch.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/base-switch.vue","../node_modules/@empathyco/src/components/base-variable-column-grid.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/base-variable-column-grid.vue","../node_modules/@empathyco/src/components/items-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/items-list.vue","../node_modules/@empathyco/src/components/location-provider.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/location-provider.vue","../node_modules/@empathyco/src/components/sliding-panel.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/components/sliding-panel.vue","../node_modules/@empathyco/src/components/items-list-injection.mixin.ts","../node_modules/@empathyco/src/directives/infinite-scroll/infinite-scroll.ts","../node_modules/@empathyco/src/utils/cancellable-promise.ts","../node_modules/@empathyco/src/store/utils/fetch-and-save-action.utils.ts","../node_modules/@empathyco/src/store/utils/status-store.utils.ts","../node_modules/@empathyco/src/utils/filters.ts","../node_modules/@empathyco/src/utils/is-new-query.ts","../node_modules/@empathyco/x-types/dist/esm/named-model.model.js","../node_modules/@empathyco/x-types/dist/esm/facet/filter/facet-filter.model.js","../node_modules/@empathyco/src/x-modules/scroll/components/scroll-to-top.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/scroll/components/scroll-to-top.vue","../node_modules/@empathyco/src/x-modules/scroll/components/main-scroll-item.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/scroll/components/main-scroll-item.vue","../node_modules/@empathyco/src/x-modules/recommendations/store/actions/fetch-and-save-recommendations.action.ts","../node_modules/@empathyco/src/x-modules/recommendations/store/module.ts","../node_modules/@empathyco/src/x-modules/recommendations/store/constants.ts","../node_modules/@empathyco/src/x-modules/recommendations/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/recommendations/store/actions/fetch-recommendations.action.ts","../node_modules/@empathyco/src/x-modules/recommendations/store/emitters.ts","../node_modules/@empathyco/src/x-modules/recommendations/wiring.ts","../node_modules/@empathyco/src/x-modules/recommendations/x-module.ts","../node_modules/@empathyco/src/x-modules/recommendations/components/recommendations.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/recommendations/components/recommendations.vue","../src/components/search/display-click-provider.vue","../src/components/search/display-click-provider.vue?rollup-plugin-vue=script.ts","../src/components/results/result.vue","../src/components/results/result.vue?rollup-plugin-vue=script.ts","../src/components/results/custom-recommendations.vue","../src/components/results/custom-recommendations.vue?rollup-plugin-vue=script.ts","../src/components/has-searched.mixin.ts","../src/components/main.vue?rollup-plugin-vue=script.ts","../src/components/main.vue","../node_modules/@empathyco/src/x-modules/queries-preview/store/module.ts","../node_modules/@empathyco/src/x-modules/queries-preview/store/getters/loaded-queries-preview.getter.ts","../node_modules/@empathyco/src/x-modules/queries-preview/store/actions/fetch-query-preview.action.ts","../node_modules/@empathyco/src/x-modules/queries-preview/store/actions/fetch-and-save-query-preview.action.ts","../node_modules/@empathyco/src/x-modules/queries-preview/store/emitters.ts","../node_modules/@empathyco/src/x-modules/queries-preview/wiring.ts","../node_modules/@empathyco/src/x-modules/queries-preview/x-module.ts","../node_modules/@empathyco/src/x-modules/queries-preview/components/query-preview.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/queries-preview/components/query-preview.vue","../node_modules/@empathyco/src/x-modules/queries-preview/components/query-preview-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/queries-preview/components/query-preview-list.vue","../src/components/custom-sliding-panel.vue","../src/components/custom-sliding-panel.vue?rollup-plugin-vue=script.ts","../src/components/pre-search/custom-query-preview.vue?rollup-plugin-vue=script.ts","../src/components/pre-search/custom-query-preview.vue","../src/components/scroll-to-top.vue?rollup-plugin-vue=script.ts","../src/components/scroll-to-top.vue","../node_modules/@empathyco/src/x-modules/empathize/store/module.ts","../node_modules/@empathyco/src/x-modules/empathize/x-module.ts","../node_modules/@empathyco/src/x-modules/empathize/store/emitters.ts","../node_modules/@empathyco/src/x-modules/empathize/wiring.ts","../node_modules/@empathyco/src/x-modules/empathize/components/empathize.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/empathize/components/empathize.vue","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/add-query-to-history.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/constants.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/getters/history-queries.getter.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/module.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/getters/normalized-query.getter.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/getters/history-queries-with-results.getter.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/getters/session-history-queries.getter.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/getters/storage-key.getter.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/load-history-queries-from-browser-storage.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/refresh-session.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/remove-query-from-history.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/set-history-queries.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/toggle-history-queries.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/actions/update-history-queries-with-search-response.action.ts","../node_modules/@empathyco/src/x-modules/history-queries/store/emitters.ts","../node_modules/@empathyco/src/x-modules/history-queries/wiring.ts","../node_modules/@empathyco/src/x-modules/history-queries/x-module.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/clear-history-queries.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/clear-history-queries.vue","../node_modules/@empathyco/src/x-modules/history-queries/components/remove-history-query.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/remove-history-query.vue","../node_modules/@empathyco/src/x-modules/history-queries/components/history-query.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/history-query.vue","../node_modules/@empathyco/src/x-modules/history-queries/components/history-queries.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/history-queries.vue","../node_modules/@empathyco/src/x-modules/history-queries/components/history-queries-switch.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/history-queries-switch.vue","../node_modules/@empathyco/src/x-modules/history-queries/components/my-history.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/history-queries/components/my-history.vue","../src/composables/use-predictive-helpers.composable.ts","../src/components/predictive-layer/sliding-recommendations.vue","../src/components/predictive-layer/sliding-recommendations.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/actions/fetch-and-save-identifier-results.action.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/module.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/getters/identifier-results-request.getter.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/getters/identifier-highlight-regexp.getter.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/getters/identifier-detection-regexp.getter.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/actions/fetch-identifier-results.action.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/actions/save-origin.action.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/actions/save-query.action.ts","../node_modules/@empathyco/src/x-modules/identifier-results/store/emitters.ts","../node_modules/@empathyco/src/x-modules/identifier-results/wiring.ts","../node_modules/@empathyco/src/x-modules/identifier-results/x-module.ts","../node_modules/@empathyco/src/x-modules/identifier-results/components/identifier-result.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/identifier-results/components/identifier-result.vue","../node_modules/@empathyco/src/x-modules/identifier-results/components/identifier-results.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/identifier-results/components/identifier-results.vue","../src/components/predictive-layer/predictive-identifier-results.vue","../src/components/predictive-layer/predictive-identifier-results.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/actions/fetch-and-save-suggestions.action.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/getters/query-suggestions.getter.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/module.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/getters/normalized-query.getter.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/actions/fetch-suggestions.action.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/store/emitters.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/wiring.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/x-module.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/components/query-suggestion.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/components/query-suggestion.vue","../node_modules/@empathyco/src/x-modules/query-suggestions/components/query-suggestions.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/query-suggestions/components/query-suggestions.vue","../src/components/predictive-layer/predictive-query-suggestions.vue","../src/components/predictive-layer/predictive-query-suggestions.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/fetch-and-save-next-queries.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/module.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/getters/next-queries.getter.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/fetch-next-queries.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/set-query-from-last-history-query.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/fetch-next-query-preview.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/actions/fetch-and-save-next-query-preview.action.ts","../node_modules/@empathyco/src/x-modules/next-queries/store/emitters.ts","../node_modules/@empathyco/src/x-modules/next-queries/wiring.ts","../node_modules/@empathyco/src/x-modules/next-queries/x-module.ts","../node_modules/@empathyco/src/x-modules/next-queries/components/next-query.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/next-queries/components/next-query.vue","../node_modules/@empathyco/src/x-modules/next-queries/components/next-queries.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/next-queries/components/next-queries.vue","../node_modules/@empathyco/src/x-modules/next-queries/components/next-queries-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/next-queries/components/next-queries-list.vue","../node_modules/@empathyco/src/x-modules/next-queries/components/next-query-preview.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/next-queries/components/next-query-preview.vue","../src/components/predictive-layer/predictive-next-queries.vue","../src/components/predictive-layer/predictive-next-queries.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/actions/fetch-and-save-suggestions.action.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/module.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/getters/popular-searches.getter.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/actions/fetch-suggestions.action.ts","../node_modules/@empathyco/src/x-modules/popular-searches/store/emitters.ts","../node_modules/@empathyco/src/x-modules/popular-searches/wiring.ts","../node_modules/@empathyco/src/x-modules/popular-searches/x-module.ts","../node_modules/@empathyco/src/x-modules/popular-searches/components/popular-search.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/popular-searches/components/popular-search.vue","../node_modules/@empathyco/src/x-modules/popular-searches/components/popular-searches.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/popular-searches/components/popular-searches.vue","../src/components/predictive-layer/predictive-popular-searches.vue","../src/components/predictive-layer/predictive-popular-searches.vue?rollup-plugin-vue=script.ts","../src/components/predictive-layer/predictive-layer.vue?rollup-plugin-vue=script.ts","../src/components/predictive-layer/predictive-layer.vue","../node_modules/@empathyco/src/x-modules/search-box/store/actions/set-input-status.action.ts","../node_modules/@empathyco/src/services/state-machine.service.ts","../node_modules/@empathyco/src/x-modules/search-box/store/module.ts","../node_modules/@empathyco/src/x-modules/search-box/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/search-box/store/emitters.ts","../node_modules/@empathyco/src/x-modules/search-box/wiring.ts","../node_modules/@empathyco/src/x-modules/search-box/x-module.ts","../node_modules/@empathyco/src/x-modules/search-box/components/clear-search-input.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search-box/components/clear-search-input.vue","../node_modules/@empathyco/src/x-modules/search-box/components/search-button.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search-box/components/search-button.vue","../node_modules/@empathyco/src/x-modules/search-box/components/search-input.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search-box/components/search-input.vue","../src/components/search-box.vue","../src/components/search-box.vue?rollup-plugin-vue=script.ts","../src/components/my-history/no-history-icon.vue","../src/components/my-history/no-history-icon.vue?rollup-plugin-vue=script.ts","../src/components/my-history/custom-my-history.vue","../src/components/my-history/custom-my-history.vue?rollup-plugin-vue=script.ts","../src/components/my-history/my-history-icon-bw.vue","../src/components/my-history/my-history-icon-bw.vue?rollup-plugin-vue=script.ts","../src/components/my-history/my-history-icon.vue","../src/components/my-history/my-history-icon.vue?rollup-plugin-vue=script.ts","../src/components/my-history/my-history-aside.vue","../src/components/my-history/my-history-aside.vue?rollup-plugin-vue=script.ts","../src/components/my-history/my-history-confirm-disable-modal.vue?rollup-plugin-vue=script.ts","../src/components/my-history/my-history-confirm-disable-modal.vue","../src/components/mobile/mobile-open-aside.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile-open-aside.vue","../src/components/column-picker.vue","../src/components/column-picker.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile-toolbar.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile-toolbar.vue","../node_modules/@empathyco/src/x-modules/search/store/actions/fetch-and-save-search-response.action.ts","../node_modules/@empathyco/src/x-modules/search/store/getters/query.getter.ts","../node_modules/@empathyco/src/x-modules/search/store/module.ts","../node_modules/@empathyco/src/x-modules/search/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/fetch-search-response.action.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/increase-page-apending-results.action.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/reset-request-on-refinement.action.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/save-search-response.action.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/search/store/actions/save-origin.action.ts","../node_modules/@empathyco/src/x-modules/search/store/emitters.ts","../node_modules/@empathyco/src/x-modules/search/wiring.ts","../node_modules/@empathyco/src/x-modules/search/x-module.ts","../node_modules/@empathyco/src/x-modules/search/components/banner.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/banner.vue","../node_modules/@empathyco/src/x-modules/search/components/banners-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/banners-list.vue","../node_modules/@empathyco/src/x-modules/search/components/partial-query-button.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/partial-query-button.vue","../node_modules/@empathyco/src/x-modules/search/components/partial-results-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/partial-results-list.vue","../node_modules/@empathyco/src/x-modules/search/components/promoted.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/promoted.vue","../node_modules/@empathyco/src/x-modules/search/components/promoteds-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/promoteds-list.vue","../node_modules/@empathyco/src/x-modules/search/components/redirection.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/redirection.vue","../node_modules/@empathyco/src/x-modules/search/components/results-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/results-list.vue","../node_modules/@empathyco/src/x-modules/search/components/sort.mixin.ts","../node_modules/@empathyco/src/x-modules/search/components/sort-picker-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/sort-picker-list.vue","../node_modules/@empathyco/src/x-modules/search/components/spellcheck.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/spellcheck.vue","../node_modules/@empathyco/src/x-modules/search/components/spellcheck-button.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/search/components/spellcheck-button.vue","../src/components/search/results/custom-next-query-preview.vue?rollup-plugin-vue=script.ts","../src/components/search/results/custom-next-query-preview.vue","../src/components/search/results/results.vue?rollup-plugin-vue=script.ts","../src/components/search/results/results.vue","../src/components/search/results/partial-results.vue","../src/components/search/results/partial-results.vue?rollup-plugin-vue=script.ts","../src/components/custom-header-toggle-panel.vue?rollup-plugin-vue=script.ts","../src/components/custom-header-toggle-panel.vue","../src/components/search/sort.vue?rollup-plugin-vue=script.ts","../src/components/search/sort.vue","../node_modules/@empathyco/src/x-modules/facets/store/getters/facets.getter.ts","../node_modules/@empathyco/src/x-modules/facets/store/module.ts","../node_modules/@empathyco/src/x-modules/facets/store/getters/selected-filters.getter.ts","../node_modules/@empathyco/src/x-modules/facets/store/getters/selected-filters-for-request.getter.ts","../node_modules/@empathyco/src/x-modules/facets/store/getters/selected-filters-by-facet.getter.ts","../node_modules/@empathyco/src/x-modules/facets/store/emitters.ts","../node_modules/@empathyco/src/x-modules/facets/entities/add-facet-if-not-present.ts","../node_modules/@empathyco/src/x-modules/facets/entities/editable-number-range-filter.entity.ts","../node_modules/@empathyco/x-types/dist/esm/facet/filter/editable-number-range-filter.model.js","../node_modules/@empathyco/src/x-modules/facets/entities/hierarchical-filter.entity.ts","../node_modules/@empathyco/src/x-modules/facets/entities/number-range-filter.entity.ts","../node_modules/@empathyco/x-types/dist/esm/facet/filter/number-range-filter.model.js","../node_modules/@empathyco/src/x-modules/facets/entities/raw-filter.entity.ts","../node_modules/@empathyco/x-types/dist/esm/facet/filter/raw-filter.model.js","../node_modules/@empathyco/src/x-modules/facets/entities/simple-filter.entity.ts","../node_modules/@empathyco/x-types/dist/esm/facet/filter/simple-filter.model.js","../node_modules/@empathyco/src/x-modules/facets/entities/filter-entity.factory.ts","../node_modules/@empathyco/src/x-modules/facets/service/facets.service.ts","../node_modules/@empathyco/x-types/dist/esm/facet/hierarchical-facet.model.js","../node_modules/@empathyco/src/x-modules/facets/utils.ts","../node_modules/@empathyco/src/x-modules/facets/wiring.ts","../node_modules/@empathyco/src/x-modules/facets/x-module.ts","../node_modules/@empathyco/src/x-modules/facets/components/facets.mixin.ts","../node_modules/@empathyco/src/x-modules/facets/components/facets/facets.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/facets/facets.vue","../node_modules/@empathyco/src/x-modules/facets/components/filters/all-filter.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/filters/all-filter.vue","../node_modules/@empathyco/src/x-modules/facets/components/filters/renderless-filter.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/filters/renderless-filter.vue","../node_modules/@empathyco/src/x-modules/facets/components/filters/number-range-filter.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/filters/number-range-filter.vue","../node_modules/@empathyco/src/x-modules/facets/components/lists/filters-injection.mixin.ts","../node_modules/@empathyco/src/x-modules/facets/components/lists/filters-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/lists/filters-list.vue","../node_modules/@empathyco/src/x-modules/facets/components/filters/hierarchical-filter.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/filters/hierarchical-filter.vue","../node_modules/@empathyco/src/x-modules/facets/components/filters/simple-filter.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/filters/simple-filter.vue","../node_modules/@empathyco/src/x-modules/facets/components/lists/filters-search.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/x-types/dist/esm/facet/filter/boolean-filter.model.js","../node_modules/@empathyco/src/x-modules/facets/components/lists/filters-search.vue","../node_modules/@empathyco/src/x-modules/facets/components/lists/selected-filters.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/lists/selected-filters.vue","../node_modules/@empathyco/src/x-modules/facets/components/lists/selected-filters-list.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/lists/selected-filters-list.vue","../node_modules/@empathyco/src/x-modules/facets/components/lists/sliced-filters.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/lists/sliced-filters.vue","../node_modules/@empathyco/src/x-modules/facets/components/clear-filters.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/facets/components/clear-filters.vue","../src/components/search/facets/price-filter-label.vue?rollup-plugin-vue=script.ts","../src/components/search/facets/price-filter-label.vue","../src/components/search/facets/facet-selected-filters.vue?rollup-plugin-vue=script.ts","../src/components/search/facets/facet-selected-filters.vue","../src/components/search/facets/custom-sliced-filters.vue?rollup-plugin-vue=script.ts","../src/components/search/facets/custom-sliced-filters.vue","../src/components/search/facets/custom-facets.vue?rollup-plugin-vue=script.ts","../src/components/search/facets/custom-facets.vue","../src/components/search/facets/selected-filters.vue","../src/components/search/facets/selected-filters.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/actions/fetch-and-save-related-tags.action.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/actions/set-url-params.action.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/getters/query.getter.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/module.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/getters/request.getter.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/getters/related-tags.getter.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/actions/fetch-related-tags.action.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/actions/toggle-related-tag.action.ts","../node_modules/@empathyco/src/x-modules/related-tags/store/emitters.ts","../node_modules/@empathyco/src/x-modules/related-tags/wiring.ts","../node_modules/@empathyco/src/x-modules/related-tags/x-module.ts","../node_modules/@empathyco/src/x-modules/related-tags/components/related-tag.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/related-tags/components/related-tag.vue","../node_modules/@empathyco/src/x-modules/related-tags/components/related-tags.vue?rollup-plugin-vue=script.ts","../node_modules/@empathyco/src/x-modules/related-tags/components/related-tags.vue","../src/components/search/related-tags.vue","../src/components/search/related-tags.vue?rollup-plugin-vue=script.ts","../src/components/search/spellcheck-message.vue?rollup-plugin-vue=script.ts","../src/components/search/spellcheck-message.vue","../src/components/search/no-results-message.vue?rollup-plugin-vue=script.ts","../src/components/search/no-results-message.vue","../src/components/search/redirection.vue?rollup-plugin-vue=script.ts","../src/components/search/redirection.vue","../src/components/search/desktop-aside.vue?rollup-plugin-vue=script.ts","../src/components/search/desktop-aside.vue","../src/components/mobile/mobile-close-aside.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile-close-aside.vue","../src/components/search/mobile-aside.vue?rollup-plugin-vue=script.ts","../src/components/search/mobile-aside.vue","../src/components/collapse-height-animation.vue?rollup-plugin-vue=script.js","../src/components/collapse-height-animation.vue","../src/components/has-scroll-past-threshold.mixin.ts","../src/components/mobile/mobile-sub-header.vue","../src/components/mobile/mobile-sub-header.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile.vue?rollup-plugin-vue=script.ts","../src/components/mobile/mobile.vue","../src/components/predictive-layer/full-width-predictive.vue?rollup-plugin-vue=script.ts","../src/components/predictive-layer/full-width-predictive.vue","../src/components/desktop/desktop-header-full-predictive.vue","../src/components/desktop/desktop-header-full-predictive.vue?rollup-plugin-vue=script.ts","../src/components/desktop/desktop-toolbar.vue","../src/components/desktop/desktop-toolbar.vue?rollup-plugin-vue=script.ts","../src/components/desktop/desktop-sub-header.vue","../src/components/desktop/desktop-sub-header.vue?rollup-plugin-vue=script.ts","../src/components/desktop/desktop-top-section.vue","../src/components/desktop/desktop-top-section.vue?rollup-plugin-vue=script.js","../src/components/desktop/desktop.vue?rollup-plugin-vue=script.ts","../src/components/desktop/desktop.vue","../src/components/custom-main-modal.vue","../src/components/custom-main-modal.vue?rollup-plugin-vue=script.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n\n  /**\n   * Renders a transition wrapping the element passed in the default slot. The transition\n   * fades between the two toggled elements at the same time.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false\n  })\n  export default class CrossFade extends Vue {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n  }\n","<template>\n  <transition v-on=\"$listeners\" name=\"x-cross-fade-\" v-bind=\"$attrs\" :appear=\"appear\">\n    <!-- @slot (Required) to add content to the transition -->\n    <slot />\n  </transition>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n\n  /**\n   * Renders a transition wrapping the element passed in the default slot. The transition\n   * fades between the two toggled elements at the same time.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false\n  })\n  export default class CrossFade extends Vue {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-cross-fade {\n    &--enter-active,\n    &--leave-active {\n      transition: opacity 0.25s ease-in-out;\n      mix-blend-mode: multiply;\n    }\n\n    &--leave-active {\n      position: absolute;\n    }\n\n    &--leave-to,\n    &--enter {\n      opacity: 0;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Example\n\nThe `CrossFade` component is intended to be used as animation to wrap an element with v-if or v-show\nand animate it. The animation fades the new element into the previous one.\n\nWrapping a component:\n\n```vue\n<CrossFade>\n  <ComponentOrElement v-if=\"open\"/>\n</CrossFade>\n```\n</docs>\n","\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n\n  /**\n   * Renders a transition wrapping the element passed in the default slot. The animation just fades\n   * in/out the element by changing its opacity.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false\n  })\n  export default class Fade extends Vue {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n  }\n","<template>\n  <transition v-on=\"$listeners\" name=\"x-fade-\" v-bind=\"$attrs\" :appear=\"appear\">\n    <!-- @slot (Required) to add content to the transition -->\n    <slot />\n  </transition>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n\n  /**\n   * Renders a transition wrapping the element passed in the default slot. The animation just fades\n   * in/out the element by changing its opacity.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false\n  })\n  export default class Fade extends Vue {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-fade {\n    &--enter-active,\n    &--leave-active {\n      transition: opacity 0.25s ease-in-out;\n    }\n\n    &--leave-to,\n    &--enter {\n      opacity: 0;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Example\n\nThe `Fade` component is intended to be used as animation to wrap an element with v-if or v-show and\nanimate it. The animation just fades in/out the element by changing its opacity.\n\nWrapping a component:\n\n```vue live\n<template>\n  <div>\n    <button @click=\"shouldRender = !shouldRender\">Toggle</button>\n    <Fade>\n      <p v-if=\"shouldRender\">León is southern Spain</p>\n    </Fade>\n  </div>\n</template>\n<script>\n  import { Fade } from '@empathyco/x-components';\n  export default {\n    name: 'FadeAnimationDemo',\n    components: {\n      Fade\n    },\n    data() {\n      return {\n        shouldRender: false\n      };\n    }\n  };\n</script>\n```\n</docs>\n","import { Result, ResultVariant } from '@empathyco/x-types';\nimport { ListItem } from '../../utils/types';\nimport { XInjectKey } from './injection.decorators';\n\n/**\n * It's used to identify the provided and injected `disable-animations`.\n *\n * @internal\n */\nexport const DISABLE_ANIMATIONS_KEY: XInjectKey<boolean | undefined> = 'disable-animations';\n\n/**\n * It's used to identify the provided and injected `items`.\n *\n * @internal\n */\nexport const LIST_ITEMS_KEY: XInjectKey<ListItem[] | undefined> = 'listItems';\n\n/**\n * It's used to identify the provided and injected `query`.\n *\n * @internal\n */\nexport const QUERY_KEY: XInjectKey<string | undefined> = 'query';\n\n/**\n * It's used to identify the provided and injected `hasMoreItems`.\n *\n * @internal\n */\nexport const HAS_MORE_ITEMS_KEY: XInjectKey<boolean | undefined> = 'hasMoreItems';\n\n/**\n * It's used to identify the provided and injected `result`.\n *\n * @internal\n */\nexport const RESULT_WITH_VARIANTS_KEY: XInjectKey<Result> = 'resultWithVariants';\n\n/**\n * It's used to identify the provided and injected `selectedVariants` of a result.\n *\n * @internal\n */\nexport const SELECTED_VARIANTS_KEY: XInjectKey<ResultVariant[]> = 'selectedVariants';\n\n/**\n * It's used to identify the provided and injected `selectResultVariant` callback.\n *\n * @internal\n */\nexport const SELECT_RESULT_VARIANT_KEY: XInjectKey<\n  (variant: ResultVariant, level?: number) => void\n> = 'selectResultVariant';\n","import Vue from 'vue';\nimport { Component } from 'vue-property-decorator';\nimport { XInject } from '../decorators/injection.decorators';\nimport { DISABLE_ANIMATIONS_KEY } from '../decorators/injection.consts';\n\n/**\n * Mixin to ease disabling animations.\n *\n * @public\n */\n@Component\nexport default class DisableAnimationMixin extends Vue {\n  /**\n   * The name of the animation.\n   *\n   * @public\n   */\n  protected animationName!: string;\n\n  /**\n   * Flag to disable the animation.\n   *\n   * @public\n   */\n  @XInject(DISABLE_ANIMATIONS_KEY)\n  public disableAnimation!: boolean;\n\n  /**\n   * The animation's name based on the {@link DisableAnimationMixin.disableAnimation} flag.\n   *\n   * @returns The animation name.\n   * @internal\n   */\n  protected get name(): string {\n    return this.disableAnimation ? '__no-animation__' : this.animationName;\n  }\n}\n","/**\n * Util function to be used as default parameter for callbacks, or optional functions\n * implementations.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noOp(): any {}\n","import { BrowserStorageService, StorageService } from '@empathyco/x-storage-service';\nimport { noOp } from './function';\n\n/**\n * Service instance of {@link @empathyco/x-storage-service#StorageService | storage service} if\n * localStorage is available.\n * If not, required {@link @empathyco/x-storage-service#StorageService | storage service} functions\n * are initialized with empty implementations.\n *\n * @internal\n */\nexport const localStorageService: StorageService =\n  typeof localStorage !== 'undefined'\n    ? new BrowserStorageService(localStorage, 'x')\n    : {\n        clear: noOp,\n        getItem: noOp,\n        setItem: noOp,\n        removeItem: noOp\n      };\n","\n  import Vue, { CreateElement, VNode } from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { noOp } from '../../utils';\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n  /**\n   * A replacement component for Vue's transition-group, that also adds the option to stagger\n   * the animations.\n   *\n   * @public\n   */\n  @Component\n  export default class StaggeringTransitionGroup extends Vue {\n    /**\n     * The name of the transition. Used to generate the CSS classes.\n     *\n     * @public\n     */\n    @Prop({ default: 'v' })\n    public name!: string;\n\n    /**\n     * The CSS move class name.\n     *\n     * @public\n     */\n    @Prop()\n    public moveClass!: string;\n\n    /**\n     * The tag of the node to render to the DOM.\n     *\n     * @public\n     */\n    @Prop({ default: 'div' })\n    public tag!: string;\n\n    /**\n     * The time in ms to stagger each item.\n     *\n     * @public\n     */\n    @Prop({ default: 25 })\n    public staggering!: number;\n\n    /**\n     * The CSS class for the moving transitions.\n     *\n     * @returns The move transition name.\n     * @internal\n     */\n    protected get moveClassName(): string {\n      return this.moveClass ?? `${this.name}-move`;\n    }\n\n    /**\n     * The transition data contains the needed events and props to perform a transition using Vue\n     * virtual node's API.\n     *\n     * The `beforeLeave` hook is extended to also restore the previous position of the element using\n     * the position absolute.\n     * The `afterEnter` and `afterLeave` hooks are extended to also clean the transition delay\n     * applied by the stagger.\n     *\n     * @returns The transition data for Vue virtual nodes.\n     * @internal\n     */\n    protected get transitionData(): TransitionData {\n      const transitionData: TransitionData = { ...this.$props, ...this.$attrs, ...this.$listeners };\n\n      transitionData.beforeLeave = this.addRestorePositionHook(transitionData.beforeLeave);\n      transitionData.afterEnter = this.addClearStaggeringCall(transitionData.afterEnter);\n      transitionData.afterLeave = this.addClearStaggeringCall(transitionData.afterLeave);\n\n      return transitionData;\n    }\n\n    /**\n     * The list of old virtual nodes, generated by the previous called render method.\n     *\n     * @internal\n     */\n    protected oldChildren!: TransitionVNode[];\n    /**\n     * The list of new virtual nodes, generated by the last called render method.\n     *\n     * @internal\n     */\n    protected newChildren!: TransitionVNode[];\n    /**\n     * A map containing the previous positions relative to the container, for each item\n     * rendered inside the slot of this component.\n     * This is used together with the `newPositions` to calculate the move transition.\n     *\n     * @internal\n     */\n    protected oldPositions!: WeakMap<Element, Bounds>;\n    /**\n     * A map containing the new positions relative to the container, for each item\n     * rendered inside the slot of this component.\n     * This is used together with the `newPositions` to calculate the move transition.\n     *\n     * @internal\n     */\n    protected newPositions!: WeakMap<Element, Bounds>;\n    /**\n     * A map containing the move cleanup functions pending to have been called. When invoked\n     * this functions remove all the styles and classes associated to the move transition.\n     *\n     * @internal\n     */\n    protected pendingCleanupMoveCallbacks!: WeakMap<Element, () => void>;\n    /**\n     * The counter for the stagger, used to calculate the delay for the transition of each child\n     * element. It is reset every time the render method is triggered.\n     *\n     * @internal\n     */\n    protected staggerCounter!: number;\n    /**\n     * The bounds of the container rendered using the `tag` prop. This is used to calculate the\n     * relative positions of each leaving child, which are then applied with the position absolute.\n     *\n     * @internal\n     */\n    protected wrapperBounds!: DOMRect;\n\n    beforeCreate(): void {\n      // Initialize properties here to avoid making them reactive, which would cause infinite loops.\n      this.oldChildren = [];\n      this.newChildren = [];\n      this.oldPositions = new WeakMap();\n      this.newPositions = new WeakMap();\n      this.pendingCleanupMoveCallbacks = new WeakMap<Element, () => void>();\n      this.staggerCounter = 0;\n    }\n\n    render(createElement: CreateElement): VNode {\n      this.staggerCounter = 0;\n      // New children are now the old ones\n      this.oldChildren = this.newChildren;\n      // Only vnodes with a tag (i.e. no HTML comments) and with a `key` property are valid.\n      this.newChildren = (this.$slots.default ?? []).filter(this.isTransitionValidVNode);\n\n      // Apply transition data to both new and old nodes & store the position of the old nodes.\n      this.newChildren.forEach(this.addTransitionData);\n      this.oldChildren.forEach(this.syncOldNodes);\n\n      return createElement(\n        this.tag,\n        { staticClass: 'x-staggering-transition-group' },\n        this.newChildren\n      );\n    }\n\n    mounted(): void {\n      this.newChildren.forEach(this.applyStagger);\n    }\n\n    beforeUpdate(): void {\n      this.wrapperBounds = this.$el.getBoundingClientRect();\n    }\n\n    updated(): void {\n      this.wrapperBounds = this.$el.getBoundingClientRect();\n      this.newChildren.forEach(this.recordNewPosition);\n      const { leavingNodes, stayingNodes, enteringNodes } = this.getNodesByTransitionType();\n\n      leavingNodes.forEach(vNode => {\n        this.applyStagger(vNode);\n        this.disableClickingEvents(vNode);\n      });\n      const movedChildren = stayingNodes.filter(this.applyTranslation);\n      const movedStagger = movedChildren.map(this.getNextTransitionDelay);\n      enteringNodes.forEach(this.applyStagger);\n\n      // force reflow to put everything in position\n      document.body.getBoundingClientRect();\n\n      movedChildren.forEach(this.startMoveAnimation(movedStagger));\n    }\n\n    /**\n     * Extends the provided leave transition hook restoring the position of the element with an\n     * absolute position.\n     * Additionally, it removes the element position from the maps of positions.\n     *\n     * @param transitionHook - The leave transition hook to extend.\n     * @returns The new leave transition hook extended.\n     * @internal\n     */\n    protected addRestorePositionHook(transitionHook: TransitionHook = noOp): TransitionHook {\n      return element => {\n        const { top, left, width, height } = this.oldPositions.get(element)!;\n        const { marginTop, marginLeft } = window.getComputedStyle(element);\n        const style = element.style;\n        style.position = 'absolute';\n        style.top = `${top - parseFloat(marginTop)}px`;\n        style.left = `${left - parseFloat(marginLeft)}px`;\n        style.width = `${width}px`;\n        style.height = `${height}px`;\n        this.newPositions.delete(element);\n        this.oldPositions.delete(element);\n        const pendingCallback = this.pendingCleanupMoveCallbacks.get(element);\n        pendingCallback?.();\n        transitionHook(element);\n      };\n    }\n\n    /**\n     * Extends the provided transition hook clearing the transition delay.\n     *\n     * @param transitionHook - The transition hook to extend.\n     * @returns The new transition hook, that also clears the transitionDelay from the element.\n     * @internal\n     */\n    protected addClearStaggeringCall(transitionHook: TransitionHook = noOp): TransitionHook {\n      return element => {\n        element.style.transitionDelay = '';\n        transitionHook(element);\n      };\n    }\n\n    /**\n     * Returns if the vNode contains a non empty key, and a non empty tag.\n     *\n     * @param vNode - The VNode to check if it is a valid transition node, containing a `tag` and a\n     * `key` property.\n     * @returns True when the vNode contains a non empty key and a non empty tag. False otherwise.\n     * @internal\n     */\n    protected isTransitionValidVNode(vNode: VNode): vNode is TransitionVNode {\n      // TODO Add warning with logger: <staggering-transition-group> children must be keyed.\n      return !!vNode.key && !!vNode.tag;\n    }\n\n    /**\n     * Adds the generated transition data to the vNode, creating the `data` property if necessary.\n     *\n     * @param vNode - The VNode to add the transition data to.\n     * @internal\n     */\n    protected addTransitionData(vNode: TransitionVNode): void {\n      if (!vNode.data) {\n        vNode.data = {};\n      }\n      vNode.data.transition = this.transitionData;\n    }\n\n    /**\n     * Re-applies the transition data to an old node, just in case it changed from the previous\n     * render call. It also records the position of the node, to then calculate the move\n     * transitions.\n     *\n     * @param vNode - The vNode to add the transition data to, and record his current position as\n     * old.\n     * @internal\n     */\n    protected syncOldNodes(vNode: TransitionVNode): void {\n      // Synchronize transition data, in case it changed in the last frame.\n      // We can trust data to be defined because each new node has the transition applied\n      vNode.data!.transition = this.transitionData;\n      this.recordOldPosition(vNode);\n    }\n\n    /**\n     * Saves the position of the vNode in the map of old positions.\n     *\n     * @param vNode - The node to store its position.\n     * @internal\n     */\n    protected recordOldPosition(vNode: TransitionVNode): void {\n      this.oldPositions.set(vNode.elm, this.createRelativeBounds(vNode));\n    }\n\n    /**\n     * Saves the position of the vNode in the map of new positions.\n     *\n     * @param vNode - The node to store its position.\n     * @internal\n     */\n    protected recordNewPosition(vNode: TransitionVNode): void {\n      this.newPositions.set(vNode.elm, this.createRelativeBounds(vNode));\n    }\n\n    /**\n     * Creates an object containing the position of the vNode relative to its container.\n     *\n     * @param vNode - The virtual node to store its relative position.\n     * @returns The relative bounds of the provided virtual node.\n     * @internal\n     */\n    protected createRelativeBounds(vNode: TransitionVNode): Bounds {\n      const { left, top, width, height } = vNode.elm.getBoundingClientRect();\n      const { left: wrapperLeft, top: wrapperTop } = this.wrapperBounds;\n      return {\n        left: left - wrapperLeft,\n        top: top - wrapperTop,\n        width,\n        height\n      };\n    }\n\n    /**\n     * Splits the children of the component into three groups:\n     * - Nodes that are leaving.\n     * - Nodes that are entering.\n     * - Nodes that stay.\n     *\n     * This is then used to apply the stagger in the correct order: leave -\\> move -\\> enter.\n     *\n     * @returns The children nodes, divided in different groups depending on if they are leaving,\n     * staying or entering.\n     * @internal\n     */\n    protected getNodesByTransitionType(): TransitionTypeNodes {\n      const leave = this.oldChildren.filter(child => !this.newPositions.has(child.elm));\n      const enter = this.newChildren.filter(child => !this.oldPositions.has(child.elm));\n      const stay = this.oldChildren.filter(child => this.newPositions.has(child.elm));\n      return {\n        leavingNodes: leave,\n        enteringNodes: enter,\n        stayingNodes: stay\n      };\n    }\n\n    /**\n     * Applies an incremental delay to the virtual node element.\n     *\n     * @param vNode - The virtual node to apply the stagger to.\n     * @internal\n     */\n    protected applyStagger(vNode: TransitionVNode): void {\n      vNode.elm.style.transitionDelay = this.getNextTransitionDelay();\n    }\n\n    /**\n     * Disables listening to click events in a virtual node element.\n     *\n     * @remarks This is done to avoid letting the user click elements that are performing the moving\n     * animation to leave the DOM but are still rendered.\n     *\n     * @param vNode - The virtual node to disable listening to click events.\n     * @internal\n     */\n    protected disableClickingEvents(vNode: TransitionVNode): void {\n      vNode.elm.style.pointerEvents = 'none';\n    }\n\n    /**\n     * Calculates the next transition delay property, incrementing the `staggerCounter` property\n     * each time it is called.\n     *\n     * @returns The value for the next element `style.transitionDelay` property.\n     * @internal\n     */\n    protected getNextTransitionDelay(): string {\n      return `${this.staggerCounter++ * this.staggering}ms`;\n    }\n\n    /**\n     * Calculates if the virtual node should have a move transition. If its has it, then it\n     * applies it immediately using the `style.transform`.\n     *\n     * @param vNode - The virtual node to calculate if it should have a move transition.\n     * @returns True when a move transition was applied to the virtual node.\n     * @internal\n     */\n    protected applyTranslation(vNode: TransitionVNode): boolean {\n      const oldPosition = this.oldPositions.get(vNode.elm as Element)!;\n      const newPosition = this.newPositions.get(vNode.elm as Element)!;\n      const dx = oldPosition.left - newPosition.left;\n      const dy = oldPosition.top - newPosition.top;\n      if (dx !== 0 || dy !== 0) {\n        const style = vNode.elm.style;\n        style.transform = `translate3d(${dx}px,${dy}px,0)`;\n        style.transitionDuration = '0s';\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Generates a function to start the moving animations to each node that it needs them with the\n     * provided stagger.\n     *\n     * @param moveStagger - A list containing the delay to add to each node.\n     * @returns A function that starts the moving animation with the provided stagger to a single\n     * virtual node.\n     * @internal\n     */\n    protected startMoveAnimation(\n      moveStagger: string[]\n    ): (vNode: TransitionVNode, index: number) => void {\n      return (vNode, index) => {\n        const element = vNode.elm;\n        const style = element.style;\n        element.classList.add(this.moveClassName);\n        style.transform = style.transitionDuration = '';\n        style.transitionDelay = moveStagger[index];\n        const cleanMoveTransition = (event?: TransitionEvent): void => {\n          if (!event || (event.target === element && /transform$/.test(event.propertyName))) {\n            element.removeEventListener('transitionend', cleanMoveTransition);\n            element.style.transitionDelay = '';\n            element.classList.remove(this.moveClassName);\n            this.pendingCleanupMoveCallbacks.delete(element);\n          }\n        };\n        this.pendingCleanupMoveCallbacks.set(element, cleanMoveTransition);\n        element.addEventListener('transitionend', cleanMoveTransition);\n      };\n    }\n  }\n\n  /**\n   * Contains arrays of nodes, splitted by the action they should have.\n   */\n  interface TransitionTypeNodes {\n    leavingNodes: TransitionVNode[];\n    stayingNodes: TransitionVNode[];\n    enteringNodes: TransitionVNode[];\n  }\n\n  /**\n   * Safe transition version of the VNode type, with the required non optional properties.\n   */\n  interface TransitionVNode extends VNode {\n    elm: HTMLElement;\n    tag: string;\n    key: string;\n  }\n\n  /**\n   * Vue's VNode {@link https://vuejs.org/v2/api/#transition | transition} data props and events.\n   */\n  interface TransitionData {\n    name?: string;\n    appear?: boolean;\n    css?: boolean;\n    type?: 'transition' | 'animation'; // Unused\n    mode?: 'out-in' | 'in-out'; // Unused\n    duration?: number;\n    enterClass?: string;\n    leaveClass?: string;\n    appearClass?: string;\n    enterToClass?: string;\n    leaveToClass?: string;\n    appearToClass?: string;\n    enterActiveClass?: string;\n    leaveActiveClass?: string;\n    appearActiveClass?: string;\n    beforeEnter?: TransitionHook;\n    enter?: TransitionHook;\n    afterEnter?: TransitionHook;\n    beforeLeave?: TransitionHook;\n    leave?: TransitionHook;\n    afterLeave?: TransitionHook;\n  }\n\n  /**\n   * A function that receives an HTMLElement. Used to perform actions when the different phases\n   * of Vue transitions happens.\n   */\n  type TransitionHook = (element: HTMLElement) => void;\n\n  /**\n   * Represents the dimensions and positions of an element.\n   */\n  interface Bounds {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n  }\n","<script lang=\"ts\">\n  import Vue, { CreateElement, VNode } from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { noOp } from '../../utils';\n\n  /* eslint-disable @typescript-eslint/unbound-method */\n  /**\n   * A replacement component for Vue's transition-group, that also adds the option to stagger\n   * the animations.\n   *\n   * @public\n   */\n  @Component\n  export default class StaggeringTransitionGroup extends Vue {\n    /**\n     * The name of the transition. Used to generate the CSS classes.\n     *\n     * @public\n     */\n    @Prop({ default: 'v' })\n    public name!: string;\n\n    /**\n     * The CSS move class name.\n     *\n     * @public\n     */\n    @Prop()\n    public moveClass!: string;\n\n    /**\n     * The tag of the node to render to the DOM.\n     *\n     * @public\n     */\n    @Prop({ default: 'div' })\n    public tag!: string;\n\n    /**\n     * The time in ms to stagger each item.\n     *\n     * @public\n     */\n    @Prop({ default: 25 })\n    public staggering!: number;\n\n    /**\n     * The CSS class for the moving transitions.\n     *\n     * @returns The move transition name.\n     * @internal\n     */\n    protected get moveClassName(): string {\n      return this.moveClass ?? `${this.name}-move`;\n    }\n\n    /**\n     * The transition data contains the needed events and props to perform a transition using Vue\n     * virtual node's API.\n     *\n     * The `beforeLeave` hook is extended to also restore the previous position of the element using\n     * the position absolute.\n     * The `afterEnter` and `afterLeave` hooks are extended to also clean the transition delay\n     * applied by the stagger.\n     *\n     * @returns The transition data for Vue virtual nodes.\n     * @internal\n     */\n    protected get transitionData(): TransitionData {\n      const transitionData: TransitionData = { ...this.$props, ...this.$attrs, ...this.$listeners };\n\n      transitionData.beforeLeave = this.addRestorePositionHook(transitionData.beforeLeave);\n      transitionData.afterEnter = this.addClearStaggeringCall(transitionData.afterEnter);\n      transitionData.afterLeave = this.addClearStaggeringCall(transitionData.afterLeave);\n\n      return transitionData;\n    }\n\n    /**\n     * The list of old virtual nodes, generated by the previous called render method.\n     *\n     * @internal\n     */\n    protected oldChildren!: TransitionVNode[];\n    /**\n     * The list of new virtual nodes, generated by the last called render method.\n     *\n     * @internal\n     */\n    protected newChildren!: TransitionVNode[];\n    /**\n     * A map containing the previous positions relative to the container, for each item\n     * rendered inside the slot of this component.\n     * This is used together with the `newPositions` to calculate the move transition.\n     *\n     * @internal\n     */\n    protected oldPositions!: WeakMap<Element, Bounds>;\n    /**\n     * A map containing the new positions relative to the container, for each item\n     * rendered inside the slot of this component.\n     * This is used together with the `newPositions` to calculate the move transition.\n     *\n     * @internal\n     */\n    protected newPositions!: WeakMap<Element, Bounds>;\n    /**\n     * A map containing the move cleanup functions pending to have been called. When invoked\n     * this functions remove all the styles and classes associated to the move transition.\n     *\n     * @internal\n     */\n    protected pendingCleanupMoveCallbacks!: WeakMap<Element, () => void>;\n    /**\n     * The counter for the stagger, used to calculate the delay for the transition of each child\n     * element. It is reset every time the render method is triggered.\n     *\n     * @internal\n     */\n    protected staggerCounter!: number;\n    /**\n     * The bounds of the container rendered using the `tag` prop. This is used to calculate the\n     * relative positions of each leaving child, which are then applied with the position absolute.\n     *\n     * @internal\n     */\n    protected wrapperBounds!: DOMRect;\n\n    beforeCreate(): void {\n      // Initialize properties here to avoid making them reactive, which would cause infinite loops.\n      this.oldChildren = [];\n      this.newChildren = [];\n      this.oldPositions = new WeakMap();\n      this.newPositions = new WeakMap();\n      this.pendingCleanupMoveCallbacks = new WeakMap<Element, () => void>();\n      this.staggerCounter = 0;\n    }\n\n    render(createElement: CreateElement): VNode {\n      this.staggerCounter = 0;\n      // New children are now the old ones\n      this.oldChildren = this.newChildren;\n      // Only vnodes with a tag (i.e. no HTML comments) and with a `key` property are valid.\n      this.newChildren = (this.$slots.default ?? []).filter(this.isTransitionValidVNode);\n\n      // Apply transition data to both new and old nodes & store the position of the old nodes.\n      this.newChildren.forEach(this.addTransitionData);\n      this.oldChildren.forEach(this.syncOldNodes);\n\n      return createElement(\n        this.tag,\n        { staticClass: 'x-staggering-transition-group' },\n        this.newChildren\n      );\n    }\n\n    mounted(): void {\n      this.newChildren.forEach(this.applyStagger);\n    }\n\n    beforeUpdate(): void {\n      this.wrapperBounds = this.$el.getBoundingClientRect();\n    }\n\n    updated(): void {\n      this.wrapperBounds = this.$el.getBoundingClientRect();\n      this.newChildren.forEach(this.recordNewPosition);\n      const { leavingNodes, stayingNodes, enteringNodes } = this.getNodesByTransitionType();\n\n      leavingNodes.forEach(vNode => {\n        this.applyStagger(vNode);\n        this.disableClickingEvents(vNode);\n      });\n      const movedChildren = stayingNodes.filter(this.applyTranslation);\n      const movedStagger = movedChildren.map(this.getNextTransitionDelay);\n      enteringNodes.forEach(this.applyStagger);\n\n      // force reflow to put everything in position\n      document.body.getBoundingClientRect();\n\n      movedChildren.forEach(this.startMoveAnimation(movedStagger));\n    }\n\n    /**\n     * Extends the provided leave transition hook restoring the position of the element with an\n     * absolute position.\n     * Additionally, it removes the element position from the maps of positions.\n     *\n     * @param transitionHook - The leave transition hook to extend.\n     * @returns The new leave transition hook extended.\n     * @internal\n     */\n    protected addRestorePositionHook(transitionHook: TransitionHook = noOp): TransitionHook {\n      return element => {\n        const { top, left, width, height } = this.oldPositions.get(element)!;\n        const { marginTop, marginLeft } = window.getComputedStyle(element);\n        const style = element.style;\n        style.position = 'absolute';\n        style.top = `${top - parseFloat(marginTop)}px`;\n        style.left = `${left - parseFloat(marginLeft)}px`;\n        style.width = `${width}px`;\n        style.height = `${height}px`;\n        this.newPositions.delete(element);\n        this.oldPositions.delete(element);\n        const pendingCallback = this.pendingCleanupMoveCallbacks.get(element);\n        pendingCallback?.();\n        transitionHook(element);\n      };\n    }\n\n    /**\n     * Extends the provided transition hook clearing the transition delay.\n     *\n     * @param transitionHook - The transition hook to extend.\n     * @returns The new transition hook, that also clears the transitionDelay from the element.\n     * @internal\n     */\n    protected addClearStaggeringCall(transitionHook: TransitionHook = noOp): TransitionHook {\n      return element => {\n        element.style.transitionDelay = '';\n        transitionHook(element);\n      };\n    }\n\n    /**\n     * Returns if the vNode contains a non empty key, and a non empty tag.\n     *\n     * @param vNode - The VNode to check if it is a valid transition node, containing a `tag` and a\n     * `key` property.\n     * @returns True when the vNode contains a non empty key and a non empty tag. False otherwise.\n     * @internal\n     */\n    protected isTransitionValidVNode(vNode: VNode): vNode is TransitionVNode {\n      // TODO Add warning with logger: <staggering-transition-group> children must be keyed.\n      return !!vNode.key && !!vNode.tag;\n    }\n\n    /**\n     * Adds the generated transition data to the vNode, creating the `data` property if necessary.\n     *\n     * @param vNode - The VNode to add the transition data to.\n     * @internal\n     */\n    protected addTransitionData(vNode: TransitionVNode): void {\n      if (!vNode.data) {\n        vNode.data = {};\n      }\n      vNode.data.transition = this.transitionData;\n    }\n\n    /**\n     * Re-applies the transition data to an old node, just in case it changed from the previous\n     * render call. It also records the position of the node, to then calculate the move\n     * transitions.\n     *\n     * @param vNode - The vNode to add the transition data to, and record his current position as\n     * old.\n     * @internal\n     */\n    protected syncOldNodes(vNode: TransitionVNode): void {\n      // Synchronize transition data, in case it changed in the last frame.\n      // We can trust data to be defined because each new node has the transition applied\n      vNode.data!.transition = this.transitionData;\n      this.recordOldPosition(vNode);\n    }\n\n    /**\n     * Saves the position of the vNode in the map of old positions.\n     *\n     * @param vNode - The node to store its position.\n     * @internal\n     */\n    protected recordOldPosition(vNode: TransitionVNode): void {\n      this.oldPositions.set(vNode.elm, this.createRelativeBounds(vNode));\n    }\n\n    /**\n     * Saves the position of the vNode in the map of new positions.\n     *\n     * @param vNode - The node to store its position.\n     * @internal\n     */\n    protected recordNewPosition(vNode: TransitionVNode): void {\n      this.newPositions.set(vNode.elm, this.createRelativeBounds(vNode));\n    }\n\n    /**\n     * Creates an object containing the position of the vNode relative to its container.\n     *\n     * @param vNode - The virtual node to store its relative position.\n     * @returns The relative bounds of the provided virtual node.\n     * @internal\n     */\n    protected createRelativeBounds(vNode: TransitionVNode): Bounds {\n      const { left, top, width, height } = vNode.elm.getBoundingClientRect();\n      const { left: wrapperLeft, top: wrapperTop } = this.wrapperBounds;\n      return {\n        left: left - wrapperLeft,\n        top: top - wrapperTop,\n        width,\n        height\n      };\n    }\n\n    /**\n     * Splits the children of the component into three groups:\n     * - Nodes that are leaving.\n     * - Nodes that are entering.\n     * - Nodes that stay.\n     *\n     * This is then used to apply the stagger in the correct order: leave -\\> move -\\> enter.\n     *\n     * @returns The children nodes, divided in different groups depending on if they are leaving,\n     * staying or entering.\n     * @internal\n     */\n    protected getNodesByTransitionType(): TransitionTypeNodes {\n      const leave = this.oldChildren.filter(child => !this.newPositions.has(child.elm));\n      const enter = this.newChildren.filter(child => !this.oldPositions.has(child.elm));\n      const stay = this.oldChildren.filter(child => this.newPositions.has(child.elm));\n      return {\n        leavingNodes: leave,\n        enteringNodes: enter,\n        stayingNodes: stay\n      };\n    }\n\n    /**\n     * Applies an incremental delay to the virtual node element.\n     *\n     * @param vNode - The virtual node to apply the stagger to.\n     * @internal\n     */\n    protected applyStagger(vNode: TransitionVNode): void {\n      vNode.elm.style.transitionDelay = this.getNextTransitionDelay();\n    }\n\n    /**\n     * Disables listening to click events in a virtual node element.\n     *\n     * @remarks This is done to avoid letting the user click elements that are performing the moving\n     * animation to leave the DOM but are still rendered.\n     *\n     * @param vNode - The virtual node to disable listening to click events.\n     * @internal\n     */\n    protected disableClickingEvents(vNode: TransitionVNode): void {\n      vNode.elm.style.pointerEvents = 'none';\n    }\n\n    /**\n     * Calculates the next transition delay property, incrementing the `staggerCounter` property\n     * each time it is called.\n     *\n     * @returns The value for the next element `style.transitionDelay` property.\n     * @internal\n     */\n    protected getNextTransitionDelay(): string {\n      return `${this.staggerCounter++ * this.staggering}ms`;\n    }\n\n    /**\n     * Calculates if the virtual node should have a move transition. If its has it, then it\n     * applies it immediately using the `style.transform`.\n     *\n     * @param vNode - The virtual node to calculate if it should have a move transition.\n     * @returns True when a move transition was applied to the virtual node.\n     * @internal\n     */\n    protected applyTranslation(vNode: TransitionVNode): boolean {\n      const oldPosition = this.oldPositions.get(vNode.elm as Element)!;\n      const newPosition = this.newPositions.get(vNode.elm as Element)!;\n      const dx = oldPosition.left - newPosition.left;\n      const dy = oldPosition.top - newPosition.top;\n      if (dx !== 0 || dy !== 0) {\n        const style = vNode.elm.style;\n        style.transform = `translate3d(${dx}px,${dy}px,0)`;\n        style.transitionDuration = '0s';\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Generates a function to start the moving animations to each node that it needs them with the\n     * provided stagger.\n     *\n     * @param moveStagger - A list containing the delay to add to each node.\n     * @returns A function that starts the moving animation with the provided stagger to a single\n     * virtual node.\n     * @internal\n     */\n    protected startMoveAnimation(\n      moveStagger: string[]\n    ): (vNode: TransitionVNode, index: number) => void {\n      return (vNode, index) => {\n        const element = vNode.elm;\n        const style = element.style;\n        element.classList.add(this.moveClassName);\n        style.transform = style.transitionDuration = '';\n        style.transitionDelay = moveStagger[index];\n        const cleanMoveTransition = (event?: TransitionEvent): void => {\n          if (!event || (event.target === element && /transform$/.test(event.propertyName))) {\n            element.removeEventListener('transitionend', cleanMoveTransition);\n            element.style.transitionDelay = '';\n            element.classList.remove(this.moveClassName);\n            this.pendingCleanupMoveCallbacks.delete(element);\n          }\n        };\n        this.pendingCleanupMoveCallbacks.set(element, cleanMoveTransition);\n        element.addEventListener('transitionend', cleanMoveTransition);\n      };\n    }\n  }\n\n  /**\n   * Contains arrays of nodes, splitted by the action they should have.\n   */\n  interface TransitionTypeNodes {\n    leavingNodes: TransitionVNode[];\n    stayingNodes: TransitionVNode[];\n    enteringNodes: TransitionVNode[];\n  }\n\n  /**\n   * Safe transition version of the VNode type, with the required non optional properties.\n   */\n  interface TransitionVNode extends VNode {\n    elm: HTMLElement;\n    tag: string;\n    key: string;\n  }\n\n  /**\n   * Vue's VNode {@link https://vuejs.org/v2/api/#transition | transition} data props and events.\n   */\n  interface TransitionData {\n    name?: string;\n    appear?: boolean;\n    css?: boolean;\n    type?: 'transition' | 'animation'; // Unused\n    mode?: 'out-in' | 'in-out'; // Unused\n    duration?: number;\n    enterClass?: string;\n    leaveClass?: string;\n    appearClass?: string;\n    enterToClass?: string;\n    leaveToClass?: string;\n    appearToClass?: string;\n    enterActiveClass?: string;\n    leaveActiveClass?: string;\n    appearActiveClass?: string;\n    beforeEnter?: TransitionHook;\n    enter?: TransitionHook;\n    afterEnter?: TransitionHook;\n    beforeLeave?: TransitionHook;\n    leave?: TransitionHook;\n    afterLeave?: TransitionHook;\n  }\n\n  /**\n   * A function that receives an HTMLElement. Used to perform actions when the different phases\n   * of Vue transitions happens.\n   */\n  type TransitionHook = (element: HTMLElement) => void;\n\n  /**\n   * Represents the dimensions and positions of an element.\n   */\n  interface Bounds {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-staggering-transition-group {\n    position: relative;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nApart from all the props and events that the classic transition group has, the staggering transition\ngroup also exposes a new `stagger` property, which allows to configure the delay for each one of the\nnodes when animating.\n\n```vue\n<staggering-transition-group appear :stagger=\"50\" name=\"staggered-fade-slide-\">\n  <!-- @slot (Required) Transition-group content -->\n  <slot />\n</staggering-transition-group>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import StaggeringTransitionGroup from '../animations/staggering-transition-group.vue';\n  import DisableAnimationMixin from './disable-animation.mixin';\n\n  /**\n   * Renders a transition group wrapping the elements passed in the default slot and animating\n   * them with an staggered fade and slide animation.\n   *\n   * @public\n   */\n  @Component({\n    components: { StaggeringTransitionGroup },\n    inheritAttrs: false\n  })\n  export default class StaggeredFadeAndSlide extends mixins(DisableAnimationMixin) {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n    /**\n     * The name of the animation.\n     *\n     * @public\n     */\n    protected animationName = 'x-staggered-fade-and-slide-';\n  }\n","<template>\n  <staggering-transition-group\n    v-on=\"$listeners\"\n    class=\"x-staggered-fade-and-slide\"\n    :name=\"name\"\n    v-bind=\"$attrs\"\n    :appear=\"appear\"\n  >\n    <!-- @slot (Required) Transition-group content -->\n    <slot />\n  </staggering-transition-group>\n</template>\n\n<script lang=\"ts\">\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import StaggeringTransitionGroup from '../animations/staggering-transition-group.vue';\n  import DisableAnimationMixin from './disable-animation.mixin';\n\n  /**\n   * Renders a transition group wrapping the elements passed in the default slot and animating\n   * them with an staggered fade and slide animation.\n   *\n   * @public\n   */\n  @Component({\n    components: { StaggeringTransitionGroup },\n    inheritAttrs: false\n  })\n  export default class StaggeredFadeAndSlide extends mixins(DisableAnimationMixin) {\n    /**\n     * Indicates if the transition must be applied on the initial render of the node.\n     */\n    @Prop({\n      type: Boolean,\n      default: true\n    })\n    public appear!: boolean;\n    /**\n     * The name of the animation.\n     *\n     * @public\n     */\n    protected animationName = 'x-staggered-fade-and-slide-';\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  $transition-duration: 0.25s;\n\n  .x-staggered-fade-and-slide {\n    z-index: 0;\n\n    &::v-deep .x-staggered-fade-and-slide {\n      &--enter-active,\n      &--leave-active {\n        transition: $transition-duration ease-out;\n        transition-property: opacity, transform;\n      }\n\n      &--move {\n        transition: transform $transition-duration ease-out;\n      }\n\n      &--enter,\n      &--leave-to {\n        transform: translate3d(0, 50%, 0);\n        opacity: 0;\n        z-index: -1;\n      }\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\nThe Staggered fade and slide components works as the normal fade and slide components, but it also\nadds a configurable delay to each transition.\n\n## Example\n\n### Used with animatable components\n\n```vue\n<AnimatableComponent :animation=\"StaggeredFadeAndSlide\" />\n```\n\n### Used as a regular component:\n\nThis components exposes all the props and events of the Staggering transition group, like the `tag`\nor the `stagger` props:\n\n```vue\n<StaggeredFadeAndSlide tag=\"ul\" :stagger=\"50\">\n  <li>Element to animate</li>\n  <li>Element to animate</li>\n  <li>Element to animate</li>\n</StaggeredFadeAndSlide>\n```\n</docs>\n","import Vue, { VueConstructor } from 'vue';\n\n/**\n * Abstract Factory to create animations Factory. The returned animation factory uses the\n * `animationName` parameter to create a Transition Component with that name.\n *\n * @param animationName - The name to use in the Transition Component of animation.\n * @returns The animation factory configured.\n *\n * @internal\n */\nexport function createDirectionalAnimationFactory(\n  animationName: string\n): (animationOrigin?: AnimationOrigin) => VueConstructor {\n  return (animationOrigin = 'top') => {\n    return Vue.extend({\n      name: `transition-${animationName}-${animationOrigin}`,\n      inheritAttrs: false,\n      render(h) {\n        return h(\n          'transition',\n          {\n            props: {\n              name: `x-${animationName}--${animationOrigin} x-${animationName}-`,\n              ...this.$attrs\n            },\n            on: this.$listeners\n          },\n          this.$slots.default\n        );\n      }\n    });\n  };\n}\n\nexport type AnimationOrigin =\n  | 'top'\n  | 'bottom'\n  | 'top-to-bottom'\n  | 'bottom-to-top'\n  | 'left'\n  | 'right'\n  | 'left-to-right'\n  | 'right-to-left';\n","import './animate-clip-path.style.scss';\nimport { createDirectionalAnimationFactory } from '../create-directional-animation-factory';\n\n/**\n * Returns a transition component to wrap an element passed in the default slot and animating its\n * clip-path using inset and with the origin passed as parameter.\n *\n * @param animationOrigin - The origin of the animation. This means where the animation starts and\n * ends. For example 'left' makes the element animate from the left and back; 'left-to-right' makes\n * it animate from left to right. If not provided the default value is 'top'.\n * @returns A Transition Component.\n *\n * @public\n */\nexport const animateClipPath = createDirectionalAnimationFactory('animate-clip-path');\n","import './animate-scale.style.scss';\nimport { createDirectionalAnimationFactory } from '../create-directional-animation-factory';\n\n/**\n * Returns a transition component to wrap an element passed in the default slot and animating its\n * scale using transform and with the transform origin passed as parameter.\n *\n * @param animationOrigin - The origin of the transform animation. This means where the animation\n * starts and ends. For example 'left' makes the element animate from the left and back;\n * 'left-to-right' makes it animate from left to right. If not provided the default value is 'top'.\n * @returns A Transition Component.\n *\n * @public\n */\nexport const animateScale = createDirectionalAnimationFactory('animate-scale');\n","import './animate-translate.style.scss';\nimport { createDirectionalAnimationFactory } from '../create-directional-animation-factory';\n\n/**\n * Returns a transition component to wrap an element passed in the default slot and animating its\n * translate using transform and with the transform origin passed as parameter.\n *\n * @param animationOrigin - The origin of the transform animation. This means where the animation\n * starts and ends. For example 'left' makes the element animate from the left and back;\n * 'left-to-right' makes it animate from left to right. If not provided the default value is 'top'.\n * @returns A Transition Component.\n *\n * @public\n */\nexport const animateTranslate = createDirectionalAnimationFactory('animate-translate');\n","\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XEvent, XEventsTypes } from '../wiring';\n\n  /**\n   * Component to be reused that renders a `<button>` with the logic of emitting events to the bus\n   * on click. The events are passed as an object to prop {@link XEventsTypes | events}.\n   * The keys are the event name and the values are the payload of each event. All events are\n   * emitted with its respective payload. If any event doesn't need payload a `undefined` must be\n   * passed as value.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseEventButton extends Vue {\n    /**\n     * (Required) A object where the keys are the {@link XEvent} and the values\n     * are the payload of each event.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected events!: Partial<XEventsTypes>;\n\n    protected emitEvents(): void {\n      Object.entries(this.events).forEach(([event, payload]) => {\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\n      });\n    }\n  }\n","<template>\n  <button v-on=\"$listeners\" @click=\"emitEvents\" data-test=\"event-button\">\n    <!-- @slot (Required) Button content with a text, an icon or both -->\n    <slot />\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XEvent, XEventsTypes } from '../wiring';\n\n  /**\n   * Component to be reused that renders a `<button>` with the logic of emitting events to the bus\n   * on click. The events are passed as an object to prop {@link XEventsTypes | events}.\n   * The keys are the event name and the values are the payload of each event. All events are\n   * emitted with its respective payload. If any event doesn't need payload a `undefined` must be\n   * passed as value.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseEventButton extends Vue {\n    /**\n     * (Required) A object where the keys are the {@link XEvent} and the values\n     * are the payload of each event.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected events!: Partial<XEventsTypes>;\n\n    protected emitEvents(): void {\n      Object.entries(this.events).forEach(([event, payload]) => {\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\n      });\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThe event prop is required. It will render a <button></button> that emits the event passed as prop\nwith the value as payload on click:\n\n```vue\n<BaseEventButton :events=\"{ myEvent: payload }\" />\n```\n\nIf the event doesn't need payload then `undefined` must be passed:\n\n```vue\n<BaseEventButton :events=\"{ myEvent: undefined }\" />\n```\n\nIt can emit multiple events at the same time:\n\n```vue\n<BaseEventButton :events=\"{ myFirstEvent: payload1, mySecondEvent: payload2 }\" />\n```\n</docs>\n","/**\n * Returns true if the two elements are the same, or if `b` is a child of `a`.\n *\n * @param a - The element to check if it is equal to `b` or if it contains `b`.\n * @param b - The element to check if it is equal to `a` or contained inside it.\n * @returns True if `a` is equal to `b` or if it contains `b`.\n *\n * @public\n */\nexport function isElementEqualOrContained(a: Element, b: Element): boolean {\n  return a === b || a.contains(b);\n}\n\n/**\n * Returns the target element for a given event. The target element is obtained from `composedPath`\n * Event method because if the event is triggered inside a Shadow DOM context, `event.target` points\n * to Shadow DOM element, not the element that triggered the event. `composedPath` method also is\n * available in a non-shadow DOM context.\n *\n * @remarks In a shadow DOM context, this function only works if the Shadow DOM uses `open`\n * encapsulation mode.\n *\n * @param event - Event which takes place in the DOM.\n * @returns Target Element of the event.\n *\n * @public\n */\nexport function getTargetElement(event: Event): Element {\n  return event.composedPath()[0] as Element;\n}\n","/**\n * If the `String.normalize` function is available in the environment, it removes the\n * {@link https://en.wikipedia.org/wiki/Combining_Diacritical_Marks | combining diacritical marks}\n * characters from it.\n * Otherwise, it just returns the same string.\n *\n * @param string - The string to remove its combining diacritical mark characters.\n * @returns If the environment supports string normalization, the string without the combining\n * diacritical marks. Else the same string.\n */\nconst removeCombiningDiacriticalMarks =\n  typeof String.prototype.normalize === 'function'\n    ? (string: string) => string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n    : (string: string) => string;\n\n/**\n * Trims the string, transforms it to lower case, and removes\n * {@link https://en.wikipedia.org/wiki/Combining_Diacritical_Marks | combining diacritical marks}\n * from it.\n *\n * @param string - The string to normalize.\n * @returns The normalized version of the string.\n * @public\n */\nexport function normalizeString(string: string | undefined): string {\n  string = string?.trim().toLowerCase() ?? '';\n  return removeCombiningDiacriticalMarks(string);\n}\n","/* eslint-disable max-len */\nimport { DebouncedFunction, DebounceOptions } from './types';\n\n/**\n * Util function that returns a debounced version of the function passed as parameter. It can use\n * the leading strategy, trailing strategy or both. Using both would result in one leading\n * execution guaranteed and trailing executions only if there are further calls during the length\n * of the debounce time.\n *\n * @param fn - Function to be debounced.\n * @param debounceTimeInMs - The time of debounce in ms.\n * @param debounceOptions - The options for the debounce strategy.\n * @returns A new function with the debounce.\n *\n * @example Debounce options:\n *\n * Given this code, where you configure the `trailing` and `leading` options:\n *\n * ```js\n * const log = debounce(name => console.log(name), 1000, {\n *   leading\n *   trailing\n * });\n *\n *  log('a'); // +0ms\n *  log('b'); // +0ms\n *  log('c'); // +0ms\n *  setTimeout(() => log('d'), 1000); // +1000ms\n *  setTimeout(() => log('e'), 1500); // +500ms\n *  setTimeout(() => log('f'), 2600); // +1100ms\n * ```\n *\n * | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\\ trailing<br/> leading \\\\ | **`false`** | **`true`**    |\n * |:----------------------------------------------------------------------------------------------------------|-------------|---------------|\n * | **`false`**                                                                                               |             | c, e, f       |\n * | **`true`**                                                                                                | a, d, f     | a, c, d, e, f |\n *\n * @public\n */\nexport const debounce = <Params extends any[]>(\n  fn: (...args: Params) => void,\n  debounceTimeInMs: number,\n  { leading = false, trailing = true }: DebounceOptions = {}\n): DebouncedFunction<Params> => {\n  let timer: ReturnType<typeof setTimeout> | undefined;\n  const debouncedFn: DebouncedFunction<Params> = (...args) => {\n    const isFirstLeadingCall = leading && !timer;\n    if (isFirstLeadingCall) {\n      fn(...args);\n    }\n    const trailingFn = (): void => {\n      timer = undefined;\n      if (!isFirstLeadingCall && trailing) {\n        fn(...args);\n      }\n    };\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => trailingFn(), debounceTimeInMs);\n  };\n\n  debouncedFn.cancel = () => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n  };\n  return debouncedFn;\n};\n","import Vue from 'vue';\nimport { Prop, Watch } from 'vue-property-decorator';\nimport Component from 'vue-class-component';\nimport { XEmit, XOn } from '../decorators/bus.decorators';\n\n/**\n * Mixin to share Column Pickers logic.\n *\n * @public\n */\n@Component({\n  model: {\n    event: 'change'\n  }\n})\nexport default class ColumnPickerMixin extends Vue {\n  /**\n   * The value of the selected columns number.\n   *\n   * @public\n   */\n  @Prop({ required: false })\n  protected value?: number;\n\n  /**\n   * An array of numbers that represents the number of columns to render.\n   *\n   * @public\n   */\n  @Prop({ required: true })\n  protected columns!: number[];\n\n  /**\n   * Selected column, `value` prop by default or the first `columns` item.\n   *\n   * @internal\n   */\n  @XEmit('ColumnsNumberProvided', { immediate: false })\n  public selectedColumns = this.providedSelectedColumns;\n\n  /**\n   * Retrieves the provided selected column.\n   *\n   * @returns The provided `value`, or the first value of the list of possible columns.\n   * @internal\n   */\n  public get providedSelectedColumns(): number {\n    return this.value ?? this.columns[0];\n  }\n\n  /**\n   * Synchronizes the selected column with the one provided by argument.\n   *\n   * @param columns - The column number.\n   *\n   * @internal\n   */\n  @Watch('providedSelectedColumns')\n  @XOn('ColumnsNumberProvided')\n  setSelectedColumns(columns: number): void {\n    this.selectedColumns = columns;\n  }\n\n  /**\n   * Synchronizes the number of selected columns with the provided selected column value.\n   *\n   * @param column - The new number of columns.\n   *\n   * @internal\n   */\n  @Watch('selectedColumns')\n  protected emitChange(column: number): void {\n    if (this.value !== column) {\n      this.$emit('change', column);\n    }\n  }\n\n  /**\n   * Synchronizes the columns number before mounting the component. If the real number of selected\n   * columns equals the provided columns, it emits the event to sync it with every other component.\n   * If it is not equal it means that the user has already selected a number of columns, so we emit\n   * a `change` event so developers can sync the provided value.\n   *\n   * @internal\n   */\n  beforeMount(): void {\n    if (this.selectedColumns === this.providedSelectedColumns) {\n      this.$x.emit('ColumnsNumberProvided', this.selectedColumns);\n    } else {\n      this.emitChange(this.selectedColumns);\n    }\n  }\n}\n","import Vue from 'vue';\nimport { PropValidator } from 'vue/types/options';\nimport { ExtendedVue } from 'vue/types/vue';\n\n/**\n * Mixin that creates a string prop in the component for each element\n * within the array passed as `propNames` argument.\n *\n * @param propNames - Array with the names of the props to create.\n * @example\n * ```typescript\n *\n *   @Component({\n *     components: { RelatedTag },\n *     mixins: [xComponentMixin(relatedTagsXModule)]\n *   })\n *   export default class RelatedTags extends Mixins(dynamicPropsMixin(['list', 'li', 'tag'])) {\n *   // This component will have available 3 props: 'list', 'li' and 'tag'\n *   }\n * ```\n * @returns Mixin for the component.\n *\n */\nexport function dynamicPropsMixin<PropNames extends string>(\n  propNames: PropNames[]\n): ExtendedVue<Vue, unknown, unknown, unknown, Partial<Record<PropNames, string>>> {\n  return Vue.extend({\n    props: propNames.reduce(\n      (props, propName) => ({ ...props, [propName]: { type: String } }),\n      {} as Record<PropNames, PropValidator<string>>\n    )\n  });\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { mixins } from 'vue-class-component';\n  import { Component } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring';\n  import BaseEventButton from '../base-event-button.vue';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n  import ColumnPickerMixin from './column-picker.mixin';\n\n  interface ColumnPickerItem {\n    column: number;\n    cssClasses: VueCSSClasses;\n    events: Partial<XEventsTypes>;\n    isSelected: boolean;\n  }\n\n  /**\n   * Column picker list component renders a list of buttons to choose the columns number.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `buttonClass`.\n   *\n   * @remarks It extends {@link ColumnPickerMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton }\n  })\n  export default class BaseColumnPickerList extends mixins(\n    ColumnPickerMixin,\n    dynamicPropsMixin(['buttonClass'])\n  ) {\n    /**\n     * Maps the column to an object containing: the `column` and `CSS classes`.\n     *\n     * @returns An array of objects containing the column number and CSS classes.\n     *\n     * @internal\n     */\n    protected get columnsWithCssClasses(): ColumnPickerItem[] {\n      return this.columns.map(column => ({\n        column,\n        cssClasses: [\n          `x-column-picker-list__button--${column}-cols`,\n          {\n            'x-selected': this.selectedColumns === column\n          }\n        ],\n        isSelected: this.selectedColumns === column,\n        events: {\n          UserClickedColumnPicker: column,\n          ColumnsNumberProvided: column\n        }\n      }));\n    }\n  }\n","<template>\n  <div class=\"x-column-picker-list x-button-group\" data-test=\"column-picker-list\" role=\"list\">\n    <template v-for=\"({ column, cssClasses, events, isSelected }, index) in columnsWithCssClasses\">\n      <BaseEventButton\n        :key=\"column\"\n        class=\"x-column-picker-list__button x-button\"\n        :class=\"[buttonClass, cssClasses]\"\n        data-test=\"column-picker-button\"\n        :aria-pressed=\"isSelected\"\n        :events=\"events\"\n        :aria-label=\"`${column} columns`\"\n        role=\"listitem\"\n      >\n        <!--\n          @slot Customized Column Picker Button content. Specifying a slot with the column value\n          will result in the column using that slot composition to render.\n            @binding {number} column - Columns Number to pick.\n            @binding {boolean} isSelected - True if the columns number are the chosen value.\n        -->\n        <slot v-bind=\"{ column, isSelected }\">\n          {{ column }}\n        </slot>\n      </BaseEventButton>\n\n      <!--\n          @slot Customized Column Picker divider. Specify an element to act as divider for\n          the items in the column picker. Empty by default.\n        -->\n      <slot v-if=\"index !== columnsWithCssClasses.length - 1\" name=\"divider\"></slot>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { mixins } from 'vue-class-component';\n  import { Component } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring';\n  import BaseEventButton from '../base-event-button.vue';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n  import ColumnPickerMixin from './column-picker.mixin';\n\n  interface ColumnPickerItem {\n    column: number;\n    cssClasses: VueCSSClasses;\n    events: Partial<XEventsTypes>;\n    isSelected: boolean;\n  }\n\n  /**\n   * Column picker list component renders a list of buttons to choose the columns number.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `buttonClass`.\n   *\n   * @remarks It extends {@link ColumnPickerMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton }\n  })\n  export default class BaseColumnPickerList extends mixins(\n    ColumnPickerMixin,\n    dynamicPropsMixin(['buttonClass'])\n  ) {\n    /**\n     * Maps the column to an object containing: the `column` and `CSS classes`.\n     *\n     * @returns An array of objects containing the column number and CSS classes.\n     *\n     * @internal\n     */\n    protected get columnsWithCssClasses(): ColumnPickerItem[] {\n      return this.columns.map(column => ({\n        column,\n        cssClasses: [\n          `x-column-picker-list__button--${column}-cols`,\n          {\n            'x-selected': this.selectedColumns === column\n          }\n        ],\n        isSelected: this.selectedColumns === column,\n        events: {\n          UserClickedColumnPicker: column,\n          ColumnsNumberProvided: column\n        }\n      }));\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component renders a list of elements in different slots depending on the columns prop. Each\nelement will emit the needed events to sync other instances of columns pickers, or grids with the\nnumber of columns that it is being selected when it is clicked.\n\n### Default usage\n\nIt is required to send the columns prop.\n\n```vue\n<template>\n  <BaseColumnPickerList :columns=\"columns\" />\n</template>\n<script>\n  import { BaseColumnPickerList } from '@empathyco/xcomponents';\n\n  export default {\n    components: {\n      BaseColumnPickerList\n    },\n    data() {\n      return { columns: [2, 4, 6] };\n    }\n  };\n</script>\n```\n\n#### Using v-model\n\nIt is possible to do two way binding in order to synchronize the value with the parents. It will be\nupdated if it changed the value or if the parent changes it.\n\n```vue\n<template>\n  <BaseColumnPickerList :columns=\"columns\" v-model=\"selectedColumns\" />\n</template>\n<script>\n  import { BaseColumnPickerList } from '@empathyco/xcomponents';\n\n  export default {\n    components: {\n      BaseColumnPickerList\n    },\n    data() {\n      return { columns: [2, 4, 6], selectedColumns: 4 };\n    }\n  };\n</script>\n```\n\n### Customized usage\n\n#### Overriding the slots\n\nIt is possible to override the column picker button content.\n\n```vue\n<template>\n  <BaseColumnPickerList :columns=\"columns\" #default=\"{ column, isSelected }\">\n    <span>{{ column }} {{ isSelected ? '🟢' : '' }}</span>\n  </BaseColumnPickerList>\n</template>\n<script>\n  import { BaseColumnPickerList } from '@empathyco/xcomponents';\n\n  export default {\n    components: {\n      BaseColumnPickerList\n    },\n    data() {\n      return { columns: [2, 4, 6] };\n    }\n  };\n</script>\n```\n\nIt is also possible to add a divider element between the column picker buttons by overriding the\n`divider` slot.\n\n```vue\n<template>\n  <BaseColumnPickerList :columns=\"columns\">\n    <template #divider>\n      <ChevronRightIcon aria-hidden=\"true\" />\n    </template>\n  </BaseColumnPickerList>\n</template>\n<script>\n  import { BaseColumnPickerList, ChevronRightIcon } from '@empathyco/xcomponents';\n\n  export default {\n    components: {\n      BaseColumnPickerList,\n      ChevronRightIcon\n    },\n    data() {\n      return { columns: [2, 4, 6] };\n    }\n  };\n</script>\n```\n\n#### Customizing the buttons with classes\n\nThe `buttonClass` prop can be used to add classes to the buttons.\n\n```vue\n<template>\n  <BaseColumnPickerList :columns=\"columns\" buttonClass=\"x-button--round\" />\n</template>\n<script>\n  import { BaseColumnPickerList } from '@empathyco/xcomponents';\n\n  export default {\n    components: {\n      BaseColumnPickerList\n    },\n    data() {\n      return { columns: [2, 4, 6] };\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedColumnPicker`: the event is emitted after the user clicks an item. The event payload\n  is the number of columns that the clicked item represents.\n- `ColumnsNumberProvided`: the event is emitted on component mount. The event payload is the current\n  `selectedColumns` value.\n</docs>\n","/**\n * Regex to detect the format.\n */\nconst FORMAT_REGEX = /(i([^id]+))?i+(([^id?]+)(d+)(\\?)?)?/;\n\n/**\n * Configuration for format currency.\n */\ninterface CurrencyConfig {\n  /** The character between a group of three integer 'i's and the following one. */\n  integerSeparator: string;\n  /** The character between a group of three integer 'i's and the following one. It also\n   * supports more than one single character. */\n  decimalSeparator: string;\n  /** Length of decimals numbers. It counts the number of 'd's after the integer part. */\n  decimalsNumber: number;\n  /** Boolean value to hide or show the decimal part when it has 0. */\n  hideIntegerDecimals: boolean;\n}\n\n/**\n * Parts of number: integer and decimal.\n */\ninterface NumberParts {\n  /** Integer part of the number as string. */\n  integer: string;\n  /** Decimal part of the number as string. */\n  decimal: string;\n}\n\n/**\n * Format a value with a given format.\n *\n * @param value - Numeric value to be formatted.\n * @param format - Format or mask to be defined as string.\n *\n * @remarks\n * Format:\n * - Use 'i' to define integer numbers.\n * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\n * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n * than one character.\n * - Set whatever you need around the integers and decimals marks.\n * - Default mask: 'i.iii,dd' which returns '1.345,67'.\n * - If you want to hide the decimal part if it's zero (non significant), you can add the `?` symbol\n * after the decimal characters (e.g. 'i.iii,dd?', for `1234` you would get `1.234` instead of\n * `1.234,00`). It defines the value of `hideIntegerDecimals`:\n * - If true (exists) and the value is an integer without decimals, the decimal non significant\n * zeroes are hidden.\n * - If false, the default behaviour will fill with zeros the remaining length until getting\n * the one defined with the 'd's.\n *\n * @returns Formatted number.\n *\n * @public\n */\nexport function currencyFormatter(value: number, format = 'i.iii,dd'): string {\n  const { integer, decimal } = numberParts(value);\n  const { decimalSeparator, decimalsNumber, integerSeparator, hideIntegerDecimals } =\n    currencyConfig(format);\n\n  const formattedInteger = formatInteger(integer, integerSeparator);\n  const formattedDecimal = formatDecimal(decimal, {\n    decimalsNumber,\n    hideIntegerDecimals,\n    decimalSeparator\n  });\n  return format.replace(FORMAT_REGEX, `${formattedInteger}${formattedDecimal}`);\n}\n\n/**\n * Returns the formatted integer part. This computed returns:\n * - integer part with the integer separator added.\n *\n * @param integer - Integer value as a string.\n * @param integerSeparator - Separator to apply in the integer side.\n *\n * The regexp adds the integer separator for each thousand group (each 3 numbers).\n *\n * @returns Formatted integer.\n *\n * @internal\n */\nfunction formatInteger(integer: string, integerSeparator: string): string {\n  return integer.replace(/\\B(?=(\\d{3})+(?!\\d))/g, integerSeparator);\n}\n\n/**\n * Returns the formatted decimal. This computed returns:\n * - decimal part filled with zeros until complete remaining slots defined with the decimal\n * length in the format.\n * - decimal part truncated. The decimal numbers length, defined with the number of 'd's in the\n * format prop. This must MATCH with the number of decimals provided from the adapter.\n *\n * @param decimal - Decimal part as a string.\n * @param CurrencyConfig - From which the `decimalsNumber`, `decimalsSeparator` and\n * `hideIntegerDecimals` are obtained.\n *\n * @returns Formatted integer.\n *\n * @internal\n */\nfunction formatDecimal(\n  decimal: string,\n  {\n    decimalsNumber,\n    decimalSeparator,\n    hideIntegerDecimals\n  }: Omit<CurrencyConfig, 'integerSeparator'>\n): string {\n  return hideIntegerDecimals && !+decimal\n    ? ''\n    : `${decimalSeparator}${decimal.padEnd(decimalsNumber, '0').substring(0, decimalsNumber)}`;\n}\n\n/**\n * Function that divide fhe format passed as value for get integerSeparator, decimalSeparator\n * and decimalsNumber.\n *\n * @param format - Format or mask to apply to the value.\n *\n * @returns Object with properties of the currency config.\n *\n * @internal\n */\nfunction currencyConfig(format: string): CurrencyConfig {\n  const [\n    ,\n    ,\n    integerSeparator = '',\n    ,\n    decimalSeparator = '',\n    decimals = '',\n    hideIntegerDecimals = ''\n  ] = FORMAT_REGEX.exec(format) ?? [];\n  return {\n    integerSeparator,\n    decimalSeparator,\n    decimalsNumber: decimals.length,\n    hideIntegerDecimals: !!hideIntegerDecimals\n  };\n}\n\n/**\n * Divide the number in two parts by separator '.', one of them is the integer number and other\n * the decimals numbers.\n *\n * @param value - Numeric value to be formatted.\n *\n * @returns Parts of number.\n *\n * @internal\n */\nfunction numberParts(value: number): NumberParts {\n  const [integer, decimal = ''] = `${value}`.split('.');\n  return {\n    integer,\n    decimal\n  };\n}\n","<template>\n  <span v-if=\"value !== undefined\" class=\"x-currency\">{{ currency }}</span>\n</template>\n\n<script lang=\"ts\">\n  import { computed, defineComponent, inject } from 'vue';\n  import { currencyFormatter } from '../../utils/currency-formatter';\n\n  /**\n   * Renders the value received as a property which always must be a JavaScript number, with the\n   * proper format provided as a string property or by injection. The rendered tag is a span in\n   * order to render a default inline HTML element.\n   *\n   * Regarding the format or mask to be defined as string:\n   * - Use 'i' to define integer numbers.\n   * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n   * format doesn't include decimals, it is filled with zeros until reach the length defined with\n   * 'd's.\n   * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n   * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n   * than one character.\n   * - If you want to hide the decimal part if it's zero, you can add the `?` symbol after the\n   * decimal characters (e.g. 'i.iii,dd?', for `1234` you would get `1.234` instead of `1.234,00`).\n   * - Set whatever you need around the integers and decimals marks.\n   * - Default mask: 'i.iii,dd' which returns '1.345,67'.\n   *\n   * @remarks The number of 'd', which is the maximum decimal length, MUST matches with the length\n   * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n   * part, it deletes significant digits.\n   *\n   * Basic example:\n   *\n   * ```vue\n   * <BaseCurrency\n   *   :value=\"123456.789\"\n   *   format=\"i.iiii,dddd €\"\n   * />\n   * ```\n   *\n   * It will render: `123.456,7890 €`.\n   *\n   * See docs below for more examples.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * Numeric value to be formatted.\n       *\n       * @remarks Pass the value with 'v-bind:value' (or ':value' shortcut) instead of plain string.\n       * @remarks Be careful using numbers under Number.MAX_SAFE_INTEGER to avoid unexpected errors.\n       *\n       * @public\n       */\n      value: {\n        type: Number,\n        required: true\n      },\n\n      /**\n       * The format as string.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    },\n\n    setup(props) {\n      /**\n       * The injected format as string.\n       *\n       * @public\n       */\n      const injectedFormat = inject<string>('currencyFormat', 'i.iii,dd');\n\n      /**\n       * A format which can be passed through prop or injected.\n       *\n       * @returns A format as string.\n       *\n       * @internal\n       */\n      const renderedFormat = computed<string>(() => props.format ?? injectedFormat);\n\n      /**\n       * Returns the formatted result as string.\n       *\n       * @returns Formatted number.\n       *\n       * @internal\n       */\n      const currency = computed<string>(() => currencyFormatter(props.value, renderedFormat.value));\n\n      return {\n        currency\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nRenders the value received as a property, which always must be a JavaScript number, with the proper\nformat provided as string property. The rendered tag is a span in order to render a default inline\nHTML element.\n\n### Basic usage\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" />\n  <!-- output: '12.345.678,87' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii,ddd? €\" />\n  <!-- output: '12.345.678,876 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678\" format=\"i.iii,ddd? €\" />\n  <!-- output: '12.345.678 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"$ i.iii,dd\" />\n  <!-- output: '$ 12.345.678,87' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"$i.iii,dd\" />\n  <!-- output: '$12.345.678,87' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii,dd €\" />\n  <!-- output: '12.345.678,87 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii,dd€\" />\n  <!-- output: '12.345.678,87€' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i,iii.dd €\" />\n  <!-- output: '12,345,678.87 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i iii.dd €\" />\n  <!-- output: '12 345 678.87 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i iii - dd €\" />\n  <!-- output: '12 345 678 - 87 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii,dddddd €\" />\n  <!-- output: '12.345.678,876543 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87\" format=\"i.iii,dddddd €\" />\n  <!-- output: '12.345.678,870000 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678\" format=\"i.iii,dddddd €\" />\n  <!-- output: '12.345.678,000000 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii,dd €\" />\n  <!-- output: '12.345.678,87 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <BaseCurrency :value=\"12345678.87654321\" format=\"i.iii €\" />\n  <!-- output: '12.345.678 €' -->\n</template>\n\n<script>\n  import { BaseCurrency } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseCurrencyDemo',\n    components: {\n      BaseCurrency\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n  import { computed, defineComponent, inject } from 'vue';\n  import { currencyFormatter } from '../../utils/currency-formatter';\n\n  /**\n   * Renders the value received as a property which always must be a JavaScript number, with the\n   * proper format provided as a string property or by injection. The rendered tag is a span in\n   * order to render a default inline HTML element.\n   *\n   * Regarding the format or mask to be defined as string:\n   * - Use 'i' to define integer numbers.\n   * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n   * format doesn't include decimals, it is filled with zeros until reach the length defined with\n   * 'd's.\n   * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n   * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n   * than one character.\n   * - If you want to hide the decimal part if it's zero, you can add the `?` symbol after the\n   * decimal characters (e.g. 'i.iii,dd?', for `1234` you would get `1.234` instead of `1.234,00`).\n   * - Set whatever you need around the integers and decimals marks.\n   * - Default mask: 'i.iii,dd' which returns '1.345,67'.\n   *\n   * @remarks The number of 'd', which is the maximum decimal length, MUST matches with the length\n   * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n   * part, it deletes significant digits.\n   *\n   * Basic example:\n   *\n   * ```vue\n   * <BaseCurrency\n   *   :value=\"123456.789\"\n   *   format=\"i.iiii,dddd €\"\n   * />\n   * ```\n   *\n   * It will render: `123.456,7890 €`.\n   *\n   * See docs below for more examples.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * Numeric value to be formatted.\n       *\n       * @remarks Pass the value with 'v-bind:value' (or ':value' shortcut) instead of plain string.\n       * @remarks Be careful using numbers under Number.MAX_SAFE_INTEGER to avoid unexpected errors.\n       *\n       * @public\n       */\n      value: {\n        type: Number,\n        required: true\n      },\n\n      /**\n       * The format as string.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    },\n\n    setup(props) {\n      /**\n       * The injected format as string.\n       *\n       * @public\n       */\n      const injectedFormat = inject<string>('currencyFormat', 'i.iii,dd');\n\n      /**\n       * A format which can be passed through prop or injected.\n       *\n       * @returns A format as string.\n       *\n       * @internal\n       */\n      const renderedFormat = computed<string>(() => props.format ?? injectedFormat);\n\n      /**\n       * Returns the formatted result as string.\n       *\n       * @returns Formatted number.\n       *\n       * @internal\n       */\n      const currency = computed<string>(() => currencyFormatter(props.value, renderedFormat.value));\n\n      return {\n        currency\n      };\n    }\n  });\n","<script lang=\"ts\">\n  import { computed, defineComponent, h, PropType, VNode, VNodeChildren } from 'vue';\n  import { RangeValue } from '@empathyco/x-types';\n  import BaseCurrency from '../../currency/base-currency.vue';\n\n  /**\n   * Renders a label for a price filter, allowing to select different messages depending on the\n   * value of the filter.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /** The filter data for get min and max value. */\n      filter: {\n        type: Object as PropType<{ range: RangeValue }>,\n        required: true\n      },\n      /** Configuration for show the label. */\n      format: {\n        type: String\n      },\n      /**\n       * Message shown when the filter hasn't got the min value defined.\n       *\n       * @public\n       */\n      lessThan: {\n        type: String,\n        required: true\n      },\n      /**\n       * Message shown when the filter has both the min and max values defined.\n       *\n       * @public\n       */\n      fromTo: {\n        type: String,\n        required: true\n      },\n      /**\n       * Message shown when the filter hasn't got max value defined.\n       *\n       * @public\n       */\n      from: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      /**\n       * The active label, retrieved from the provided props.\n       * It depends on the min and max values of the filter.\n       *\n       * @returns The active label to be formatted with the min and max values of the filter.\n       */\n      const label = computed<string>(() => {\n        return props.filter.range.min === null\n          ? props.lessThan\n          : props.filter.range.max === null\n          ? props.from\n          : props.fromTo;\n      });\n\n      const render = (): VNode => {\n        const labelParts = label.value.split(/({min}|{max})/);\n\n        const children: VNodeChildren = labelParts.map(partMessage => {\n          if (partMessage === '{min}') {\n            return h('BaseCurrency', {\n              props: {\n                value: props.filter.range.min,\n                format: props.format\n              }\n            });\n          } else if (partMessage === '{max}') {\n            return h('BaseCurrency', {\n              props: {\n                value: props.filter.range.max,\n                format: props.format\n              }\n            });\n          }\n          return partMessage;\n        });\n\n        return h('span', { class: 'x-price-filter-label' }, children);\n      };\n\n      return render;\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nRenders a label for a price filter, allowing to select different messages depending on the value of\nthe filter.\n\n- When the `min` value property isn't defined in the filter, you can show a message like\n  `Less than $10` by using the `lessThan` prop, combined with the `{max}` placeholder.\n- When the `max` value property isn't defined in the filter, you can show a message like\n  `More than $300` by using the `from` prop, combined with the `{min}` placeholder.\n- If both the `min` and `max` values of the filter are defined, you can show a message like\n  `$10 - $300` by using the `fromTo` prop.\n\nThis component uses internally the `BaseCurrency` one, so you can pass the same props to configure\nhow the price should look like.\n\n### Basic usage\n\n```vue\n<template>\n  <Facets>\n    <template #price=\"{ facet }\">\n      <Filters v-slot=\"{ filter }\" :filters=\"facet.filters\">\n        <NumberRangeFilter :filter=\"filter\" v-slot=\"{ filter }\">\n          <BasePriceFilterLabel\n            :filter=\"filter\"\n            format=\"$i\"\n            lessThan=\"Less than {max}\"\n            fromTo=\"From {min} to {max}\"\n            from=\"More than {min}\"\n          />\n        </NumberRangeFilter>\n      </Filters>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import { BasePriceFilterLabel } from '@empathyco/x-components';\n  import { Filters, Facets, NumberRangeFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'MyFacets',\n    components: {\n      Facets,\n      Filters,\n      NumberRangeFilter,\n      BasePriceFilterLabel\n    }\n  };\n</script>\n```\n</docs>\n","\n  import { computed, defineComponent, h, PropType, VNode, VNodeChildren } from 'vue';\n  import { RangeValue } from '@empathyco/x-types';\n  import BaseCurrency from '../../currency/base-currency.vue';\n\n  /**\n   * Renders a label for a price filter, allowing to select different messages depending on the\n   * value of the filter.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /** The filter data for get min and max value. */\n      filter: {\n        type: Object as PropType<{ range: RangeValue }>,\n        required: true\n      },\n      /** Configuration for show the label. */\n      format: {\n        type: String\n      },\n      /**\n       * Message shown when the filter hasn't got the min value defined.\n       *\n       * @public\n       */\n      lessThan: {\n        type: String,\n        required: true\n      },\n      /**\n       * Message shown when the filter has both the min and max values defined.\n       *\n       * @public\n       */\n      fromTo: {\n        type: String,\n        required: true\n      },\n      /**\n       * Message shown when the filter hasn't got max value defined.\n       *\n       * @public\n       */\n      from: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      /**\n       * The active label, retrieved from the provided props.\n       * It depends on the min and max values of the filter.\n       *\n       * @returns The active label to be formatted with the min and max values of the filter.\n       */\n      const label = computed<string>(() => {\n        return props.filter.range.min === null\n          ? props.lessThan\n          : props.filter.range.max === null\n          ? props.from\n          : props.fromTo;\n      });\n\n      const render = (): VNode => {\n        const labelParts = label.value.split(/({min}|{max})/);\n\n        const children: VNodeChildren = labelParts.map(partMessage => {\n          if (partMessage === '{min}') {\n            return h('BaseCurrency', {\n              props: {\n                value: props.filter.range.min,\n                format: props.format\n              }\n            });\n          } else if (partMessage === '{max}') {\n            return h('BaseCurrency', {\n              props: {\n                value: props.filter.range.max,\n                format: props.format\n              }\n            });\n          }\n          return partMessage;\n        });\n\n        return h('span', { class: 'x-price-filter-label' }, children);\n      };\n\n      return render;\n    }\n  });\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.5 4H1.75317\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M4 6.5L1.5 4L4 1.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.5 4H6.24683\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M4 6.5L6.5 4L4 1.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M2.75 2V6M3.8501 2V6M4.25 2V6M5.25 2V6M1 1H7V7H1V1Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect\n      x=\"1\"\n      y=\"1\"\n      width=\"6\"\n      height=\"6\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M5.5 2.875L3.4375 4.9375L2.5 4\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect\n      x=\"1\"\n      y=\"1\"\n      width=\"6\"\n      height=\"6\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.44995 2.75L3.94995 5.25L1.44995 2.75\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M5.19995 6.5L2.69995 4L5.19995 1.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M2.69995 6.5L5.19995 4L2.69995 1.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.44995 5.25L3.94995 2.75L6.44995 5.25\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6 2L2 6M2 2L6 6\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M7 1L1 7M1 1L7 7\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M4 0.5C4 0.5 4.72006 1.19702 5.14974 1.375C5.57941 1.55298 6.47487 1.52513 6.47487 1.52513C6.47487 1.52513 6.44568 2.46579 6.625 2.89871C6.80432 3.33164 7.5 4 7.5 4C7.5 4 6.80123 4.62947 6.625 5.05492C6.44877 5.48038 6.47487 6.47487 6.47487 6.47487C6.47487 6.47487 5.54672 6.43063 5.07747 6.625C4.60823 6.81937 4 7.5 4 7.5C4 7.5 3.0702 6.69753 2.89509 6.625C2.47006 6.44894 1.52513 6.47487 1.52513 6.47487C1.52513 6.47487 1.56245 5.50748 1.375 5.05492C1.18755 4.60237 0.5 4 0.5 4C0.5 4 1.27705 3.31649 1.4501 2.89871C1.62315 2.48094 1.52513 1.52513 1.52513 1.52513C1.52513 1.52513 2.4776 1.54793 2.89509 1.375C3.31258 1.20207 4 0.5 4 0.5Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M5.01877 3.30005L3.63087 4.81413L3 4.12591\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.08125 1.66H4M5.62825 1.66H7M4.14722 6.3C4.14722 6.66451 4.44271 6.96 4.80722 6.96C5.17172 6.96 5.46722 6.66451 5.46722 6.3C5.46722 5.93549 5.17172 5.64 4.80722 5.64C4.44271 5.64 4.14722 5.93549 4.14722 6.3ZM4.14722 6.3L1.08125 6.3M5.5 6.3H7M7 3.98H3.80005M2.34528 3.98H1M5.46722 1.66C5.46722 2.02451 5.17172 2.32 4.80722 2.32C4.44271 2.32 4.14722 2.02451 4.14722 1.66C4.14722 1.29549 4.44271 1 4.80722 1C5.17172 1 5.46722 1.29549 5.46722 1.66ZM2.42638 3.98001C2.42638 4.34452 2.72188 4.64001 3.08638 4.64001C3.45089 4.64001 3.74638 4.34452 3.74638 3.98001C3.74638 3.6155 3.45089 3.32001 3.08638 3.32001C2.72188 3.32001 2.42638 3.6155 2.42638 3.98001Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M3 1.5H5V3.5H3V1.5ZM3 4.5H5V6.5H3V4.5Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.5 1.5H3.5V3.5H1.5V1.5ZM1.5 4.5H3.5V6.5H1.5V4.5ZM4.5 1.5H6.5V3.5H4.5V1.5ZM4.5 4.5H6.5V6.5H4.5V4.5Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1.2 1.2H2.51429V2.51429H1.2V1.2ZM1.2 3.34286H2.51429V4.65714H1.2V3.34286ZM1.2 5.48571H2.51429V6.8H1.2V5.48571ZM3.34286 1.2H4.65714V2.51429H3.34286V1.2ZM3.34286 3.34286H4.65714V4.65714H3.34286V3.34286ZM3.34286 5.48571H4.65714V6.8H3.34286V5.48571ZM5.48571 1.2H6.8V2.51429H5.48571V1.2ZM5.48571 3.34286H6.8V4.65714H5.48571V3.34286ZM5.48571 5.48571H6.8V6.8H5.48571V5.48571Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 1.59732V3.39732H2.8M1.75301 4.89731C2.15261 6.03153 3.25416 6.76475 4.45472 6.69565C5.65528 6.62656 6.66544 5.77179 6.93227 4.59922C7.19911 3.42665 6.6583 2.21894 5.60586 1.63714C4.55341 1.05534 3.24305 1.2397 2.39201 2.08931L1.17671 3.23127\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M4.17981 3.28552V4.70565H5.47178\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M3.99666 5.50677V6.63177M3.23914 6.66327C3.23914 7.07748 3.59667 7.36832 4.01088 7.36832C4.42509 7.36832 4.78262 7.07748 4.78262 6.66327M4.24678 5.38159C4.24678 5.51966 4.13485 5.63159 3.99678 5.63159C3.85871 5.63159 3.74678 5.51966 3.74678 5.38159C3.74678 5.24352 3.85871 5.13159 3.99678 5.13159C4.13485 5.13159 4.24678 5.24352 4.24678 5.38159Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n    />\n    <path\n      fill-rule=\"evenodd\"\n      clip-rule=\"evenodd\"\n      d=\"M3.10134 6.46336C3.10134 6.57382 3.19088 6.66323 3.30134 6.66323H4.70024C4.8107 6.66323 4.90024 6.57376 4.90024 6.46331C4.90024 6.34634 4.90024 6.18039 4.90024 5.97168C4.90024 5.53026 4.90024 5.14878 5.32529 4.64878C5.78103 4.14439 5.87571 4.02232 5.87571 3.27232C5.83145 2.43076 5.20994 1.56323 3.99688 1.56323C2.78382 1.56323 2.11804 2.52083 2.11804 3.27232C2.11804 4.12653 2.45634 4.32589 2.6668 4.64878C2.87726 4.97168 3.10134 5.41852 3.10134 5.97168C3.10134 6.19948 3.10134 6.35694 3.10134 6.46336Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n    />\n    <path\n      d=\"M3.99656 0.963429L3.99669 0.800049M5.95156 1.90514L6.07861 1.80242M6.43399 4.01947L6.59315 4.05634M1.55925 4.01959L1.40002 4.05622M2.04157 1.90521L1.91468 1.8023\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M1 4H7\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M4 1.5V6.5M1.5 4H6.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clip-path=\"url(#clip0_478_269)\">\n      <circle cx=\"4\" cy=\"4\" r=\"3\" stroke=\"currentColor\" stroke-width=\"0.4\" />\n      <circle cx=\"4.00005\" cy=\"4.00005\" r=\"2.2\" fill=\"currentColor\" />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_478_269\">\n        <rect width=\"8\" height=\"8\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clip-path=\"url(#clip0_478_235)\">\n      <circle cx=\"4\" cy=\"4\" r=\"3\" stroke=\"currentColor\" stroke-width=\"0.4\" />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_478_235\">\n        <rect width=\"8\" height=\"8\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M7.04471 6.85704L5.34409 5.30913M5.89674 3.61307C5.89674 4.97721 4.79062 6.08307 3.42615 6.08307C2.06169 6.08307 0.955566 4.97721 0.955566 3.61307C0.955566 2.24892 2.06169 1.14307 3.42615 1.14307C4.79062 1.14307 5.89674 2.24892 5.89674 3.61307Z\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clip-path=\"url(#clip0_478_178)\">\n      <path\n        d=\"M4 4.81818C4.45187 4.81818 4.81818 4.45187 4.81818 4C4.81818 3.54813 4.45187 3.18182 4 3.18182C3.54813 3.18182 3.18182 3.54813 3.18182 4C3.18182 4.45187 3.54813 4.81818 4 4.81818Z\"\n        stroke=\"currentColor\"\n        stroke-width=\"0.4\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <path\n        d=\"M6.01818 4.81818C5.98188 4.90044 5.97105 4.99169 5.98709 5.08016C6.00313 5.16863 6.04531 5.25027 6.10818 5.31455L6.12455 5.33091C6.17526 5.38157 6.21549 5.44172 6.24294 5.50794C6.27039 5.57416 6.28452 5.64514 6.28452 5.71682C6.28452 5.7885 6.27039 5.85948 6.24294 5.92569C6.21549 5.99191 6.17526 6.05207 6.12455 6.10273C6.07389 6.15344 6.01373 6.19367 5.94751 6.22112C5.8813 6.24857 5.81032 6.2627 5.73864 6.2627C5.66696 6.2627 5.59598 6.24857 5.52976 6.22112C5.46354 6.19367 5.40339 6.15344 5.35273 6.10273L5.33636 6.08636C5.27209 6.02349 5.19045 5.98131 5.10198 5.96527C5.01351 5.94923 4.92226 5.96006 4.84 5.99636C4.75934 6.03094 4.69054 6.08834 4.64208 6.16151C4.59363 6.23468 4.56762 6.32042 4.56727 6.40818V6.45455C4.56727 6.59921 4.50981 6.73795 4.40751 6.84024C4.30522 6.94253 4.16648 7 4.02182 7C3.87715 7 3.73842 6.94253 3.63612 6.84024C3.53383 6.73795 3.47636 6.59921 3.47636 6.45455V6.43C3.47425 6.33973 3.44503 6.25218 3.3925 6.17874C3.33997 6.10529 3.26656 6.04935 3.18182 6.01818C3.09956 5.98188 3.00831 5.97105 2.91984 5.98709C2.83137 6.00313 2.74973 6.04531 2.68545 6.10818L2.66909 6.12455C2.61843 6.17526 2.55828 6.21549 2.49206 6.24294C2.42584 6.27039 2.35486 6.28452 2.28318 6.28452C2.2115 6.28452 2.14052 6.27039 2.07431 6.24294C2.00809 6.21549 1.94793 6.17526 1.89727 6.12455C1.84656 6.07389 1.80633 6.01373 1.77888 5.94751C1.75143 5.8813 1.7373 5.81032 1.7373 5.73864C1.7373 5.66696 1.75143 5.59598 1.77888 5.52976C1.80633 5.46354 1.84656 5.40339 1.89727 5.35273L1.91364 5.33636C1.97651 5.27209 2.01869 5.19045 2.03473 5.10198C2.05077 5.01351 2.03994 4.92226 2.00364 4.84C1.96906 4.75934 1.91166 4.69054 1.83849 4.64208C1.76532 4.59363 1.67958 4.56762 1.59182 4.56727H1.54545C1.40079 4.56727 1.26205 4.50981 1.15976 4.40751C1.05747 4.30522 1 4.16648 1 4.02182C1 3.87715 1.05747 3.73842 1.15976 3.63612C1.26205 3.53383 1.40079 3.47636 1.54545 3.47636H1.57C1.66027 3.47425 1.74782 3.44503 1.82126 3.3925C1.89471 3.33997 1.95065 3.26656 1.98182 3.18182C2.01812 3.09956 2.02895 3.00831 2.01291 2.91984C1.99687 2.83137 1.95469 2.74973 1.89182 2.68545L1.87545 2.66909C1.82474 2.61843 1.78451 2.55828 1.75706 2.49206C1.72961 2.42584 1.71548 2.35486 1.71548 2.28318C1.71548 2.2115 1.72961 2.14052 1.75706 2.07431C1.78451 2.00809 1.82474 1.94793 1.87545 1.89727C1.92611 1.84656 1.98627 1.80633 2.05249 1.77888C2.1187 1.75143 2.18968 1.7373 2.26136 1.7373C2.33304 1.7373 2.40402 1.75143 2.47024 1.77888C2.53646 1.80633 2.59661 1.84656 2.64727 1.89727L2.66364 1.91364C2.72791 1.97651 2.80955 2.01869 2.89802 2.03473C2.98649 2.05077 3.07774 2.03994 3.16 2.00364H3.18182C3.26248 1.96906 3.33128 1.91166 3.37973 1.83849C3.42819 1.76532 3.4542 1.67958 3.45455 1.59182V1.54545C3.45455 1.40079 3.51201 1.26205 3.61431 1.15976C3.7166 1.05747 3.85534 1 4 1C4.14466 1 4.2834 1.05747 4.38569 1.15976C4.48799 1.26205 4.54545 1.40079 4.54545 1.54545V1.57C4.5458 1.65776 4.57181 1.7435 4.62027 1.81667C4.66872 1.88984 4.73752 1.94725 4.81818 1.98182C4.90044 2.01812 4.99169 2.02895 5.08016 2.01291C5.16863 1.99687 5.25027 1.95469 5.31455 1.89182L5.33091 1.87545C5.38157 1.82474 5.44172 1.78451 5.50794 1.75706C5.57416 1.72961 5.64514 1.71548 5.71682 1.71548C5.7885 1.71548 5.85948 1.72961 5.92569 1.75706C5.99191 1.78451 6.05207 1.82474 6.10273 1.87545C6.15344 1.92611 6.19367 1.98627 6.22112 2.05249C6.24857 2.1187 6.2627 2.18968 6.2627 2.26136C6.2627 2.33304 6.24857 2.40402 6.22112 2.47024C6.19367 2.53646 6.15344 2.59661 6.10273 2.64727L6.08636 2.66364C6.02349 2.72791 5.98131 2.80955 5.96527 2.89802C5.94923 2.98649 5.96006 3.07774 5.99636 3.16V3.18182C6.03094 3.26248 6.08834 3.33128 6.16151 3.37973C6.23468 3.42819 6.32042 3.4542 6.40818 3.45455H6.45455C6.59921 3.45455 6.73795 3.51201 6.84024 3.61431C6.94253 3.7166 7 3.85534 7 4C7 4.14466 6.94253 4.2834 6.84024 4.38569C6.73795 4.48799 6.59921 4.54545 6.45455 4.54545H6.43C6.34224 4.5458 6.2565 4.57181 6.18333 4.62027C6.11016 4.66872 6.05275 4.73752 6.01818 4.81818Z\"\n        stroke=\"currentColor\"\n        stroke-width=\"0.4\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"clip0_478_178\">\n        <rect width=\"8\" height=\"8\" fill=\"white\" />\n      </clipPath>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M5.94461 2.19995V6.99995H2.05575L2.05572 2.19995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M3.44455 3.69995V5.49995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M4.55539 3.69995V5.49995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M3 2.19995V1.19995H5V2.19995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M1.5 2.19995H2.05556H6.5\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"['x-icon'].concat(data.staticClass, data.class)\"\n    viewBox=\"0 0 8 8\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M6.85229 2.34766C5.84048 3.42973 5.4209 3.88871 4.40909 4.97078L3.04545 3.51245L1 5.69995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n    <path\n      d=\"M5.36353 2.19995H6.99989V3.94995\"\n      stroke=\"currentColor\"\n      stroke-width=\"0.4\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n    />\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","import Vue from 'vue';\nimport { ScrollComponentState, ScrollXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the scroll module.\n *\n * @internal\n */\nexport const scrollXStoreModule: ScrollXStoreModule = {\n  state: () => ({\n    data: {},\n    pendingScrollTo: ''\n  }),\n  getters: {},\n  mutations: {\n    setScrollComponentState(state, { id, newState }) {\n      if (!state.data[id]) {\n        Vue.set<ScrollComponentState>(state.data, id, {\n          hasReachedStart: false,\n          hasAlmostReachedEnd: false,\n          hasReachedEnd: false,\n          position: 0,\n          direction: 'UP'\n        });\n      }\n      Object.assign(state.data[id], newState);\n    },\n    setPendingScrollTo(state, pendingScrollTo) {\n      state.pendingScrollTo = pendingScrollTo;\n    }\n  },\n  actions: {}\n};\n","import { createStoreEmitters } from '../../../store';\nimport { scrollXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the scroll module.\n *\n * @internal\n */\nexport const scrollEmitters = createStoreEmitters(scrollXStoreModule, {});\n","import { ScrollDirection } from '../../components/scroll/scroll.types';\nimport { namespacedWireCommit } from '../../wiring/namespaced-wires.factory';\nimport { WirePayload } from '../../wiring/wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\nconst moduleName = 'scroll';\n\nconst wireCommit = namespacedWireCommit(moduleName);\n\n/**\n * Saves the scroll position of a container to the store.\n *\n * @public\n */\nexport const setScrollPositionWire = wireCommit(\n  'setScrollComponentState',\n  ({ metadata, eventPayload }: WirePayload<number>) => ({\n    newState: { position: eventPayload },\n    id: metadata.id as string\n  })\n);\n\n/**\n * Saves the scroll direction of a container to the store.\n *\n * @public\n */\nexport const setScrollDirectionWire = wireCommit(\n  'setScrollComponentState',\n  ({ metadata, eventPayload }: WirePayload<ScrollDirection>) => ({\n    newState: { direction: eventPayload },\n    id: metadata.id!\n  })\n);\n\n/**\n * Saves a boolean indicating if the scroll has almost reached the end of a container to the store.\n *\n * @public\n */\nexport const setScrollHasAlmostReachedEndWire = wireCommit(\n  'setScrollComponentState',\n  ({ metadata, eventPayload }: WirePayload<boolean>) => ({\n    newState: { hasAlmostReachedEnd: eventPayload },\n    id: metadata.id as string\n  })\n);\n\n/**\n * Saves a boolean indicating if the scroll has reached the end of a container to the store.\n *\n * @public\n */\nexport const setScrollHasReachedEndWire = wireCommit(\n  'setScrollComponentState',\n  ({ metadata, eventPayload }: WirePayload<boolean>) => ({\n    newState: { hasReachedEnd: eventPayload },\n    id: metadata.id as string\n  })\n);\n\n/**\n * Saves a boolean indicating if the scroll has reached the start of a container to the store.\n *\n * @public\n */\nexport const setScrollHasReachedStartWire = wireCommit(\n  'setScrollComponentState',\n  ({ metadata, eventPayload }: WirePayload<boolean>) => ({\n    newState: { hasReachedStart: eventPayload },\n    id: metadata.id as string\n  })\n);\n\n/**\n * Saves the selector of the item that should be scrolled into the view.\n *\n * @public\n */\nexport const setPendingScrollToWire = wireCommit(\n  'setPendingScrollTo',\n  ({ eventPayload: { scroll } }) => scroll\n);\n\n/**\n * Resets the selector of the scroll that is pending to restore.\n *\n * @public\n */\nexport const clearPendingScrollToWire = wireCommit('setPendingScrollTo', '');\n\n/**\n * Wiring configuration for the {@link ScrollXModule | scroll module}.\n *\n * @internal\n */\nexport const scrollWiring = createWiring({\n  UserScrolled: {\n    setScrollPositionWire\n  },\n  UserChangedScrollDirection: {\n    setScrollDirectionWire\n  },\n  UserReachedScrollStart: {\n    setScrollHasReachedStartWire\n  },\n  UserAlmostReachedScrollEnd: {\n    setScrollHasAlmostReachedEndWire\n  },\n  UserReachedScrollEnd: {\n    setScrollHasReachedEndWire\n  },\n  ParamsLoadedFromUrl: {\n    setPendingScrollToWire\n  },\n  ScrollRestoreSucceeded: {\n    clearPendingScrollToWire\n  },\n  ScrollRestoreFailed: {\n    clearPendingScrollToWire\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { scrollEmitters } from './store/emitters';\nimport { scrollXStoreModule } from './store/module';\nimport { ScrollXStoreModule } from './store/types';\nimport { scrollWiring } from './wiring';\n\n/**\n * Scroll {@link XModule} alias.\n *\n * @public\n */\nexport type ScrollXModule = XModule<ScrollXStoreModule>;\n\n/**\n * Scroll {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `empathize` entry point.\n *\n * @public\n */\nexport const scrollXModule: ScrollXModule = {\n  name: 'scroll',\n  storeModule: scrollXStoreModule,\n  storeEmitters: scrollEmitters,\n  wiring: scrollWiring\n};\n","import { XInjectKey } from '../../../components/decorators/injection.decorators';\nimport { ScrollVisibilityObserver } from './scroll.types';\n\n/**\n * Constant to inject the first visible item observer.\n *\n * @internal\n */\nexport const ScrollObserverKey: XInjectKey<ScrollVisibilityObserver | null> = 'ScrollObserverKey';\n/**\n * The default scroll id for all the scroll components.\n *\n * @internal\n */\nexport const MainScrollId = 'main-scroll';\n","\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { XEmit } from '../../../components/decorators/bus.decorators';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/index';\n  import { scrollXModule } from '../x-module';\n  import { DISABLE_ANIMATIONS_KEY } from '../../../components/decorators/injection.consts';\n  import { ScrollObserverKey } from './scroll.const';\n  import { ScrollVisibilityObserver } from './scroll.types';\n\n  /**\n   * Extends the scroll making it able to sync the first visible element, and allowing\n   * the children position to be restored.\n   *\n   * Each child element that wants to have this support must be wrapped in a {@link MainScrollItem}\n   * component.\n   *\n   * @public\n   */\n  @Component({\n    components: { NoElement },\n    mixins: [xComponentMixin(scrollXModule)]\n  })\n  /* eslint-disable @typescript-eslint/unbound-method */\n  export default class MainScroll extends Vue {\n    /**\n     * If `true`, sets this scroll instance to the main of the application. Being the main\n     * scroll implies that features like restoring the scroll when the query changes, or storing\n     * the scroll position in the URL will be enabled for this container.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    public useWindow!: boolean;\n\n    /**\n     * Timeout in milliseconds to abort trying to restore the scroll position to the target\n     * element.\n     *\n     * @public\n     */\n    @Prop({ default: 5000 })\n    public restoreScrollTimeoutMs!: number;\n\n    /**\n     * Intersection percentage to consider an element visible.\n     *\n     * @public\n     */\n    @Prop({ default: 0.3 })\n    public threshold!: number;\n\n    /**\n     * Adjusts the size of the scroll container bounds.\n     *\n     * @public\n     */\n    @Prop({ default: '0px' })\n    public margin!: string;\n\n    /**\n     * The elements that are currently considered visible.\n     *\n     * @internal\n     */\n    protected intersectingElements: HTMLElement[] = [];\n\n    /**\n     * Intersection observer to determine visibility of the elements.\n     *\n     * @returns An intersection observer to detect elements visibility.\n     * @internal\n     */\n    protected intersectionObserver: IntersectionObserver | null = null;\n\n    /**\n     * Stores the identifier of the timeout that will consider the scroll failed to restore.\n     *\n     * @internal\n     */\n    protected restoreScrollFailTimeoutId?: number;\n\n    /**\n     * Pending identifier scroll position to restore. If it matches the {@link MainScrollItem.item}\n     * `id` property, this component should be scrolled into view.\n     *\n     * @internal\n     */\n    @State('scroll', 'pendingScrollTo')\n    public pendingScrollTo!: string;\n\n    /**\n     * Disables the animations.\n     *\n     * @returns A boolean to disable the animations.\n     * @internal\n     */\n    @XProvide(DISABLE_ANIMATIONS_KEY)\n    public get disableAnimations(): boolean {\n      return !!this.pendingScrollTo;\n    }\n\n    /**\n     * Creates an `IntersectionObserver` to detect the first visible elements. Children of this\n     * component should register themselves if they want to be observed.\n     *\n     * @returns The intersection observer.\n     * @public\n     */\n    @XProvide(ScrollObserverKey)\n    public get visibleElementsObserver(): ScrollVisibilityObserver | null {\n      const observer = this.intersectionObserver;\n      return observer\n        ? {\n            observe: observer.observe.bind(observer),\n            unobserve: element => {\n              this.removeVisibleElement(element);\n              observer.unobserve(element);\n            }\n          }\n        : null;\n    }\n\n    /**\n     * The first visible element contained in this component.\n     *\n     * @returns The first visible element in this component.\n     * @internal\n     */\n    @XEmit('UserScrolledToElement')\n    public get firstVisibleElement(): string | '' {\n      if (this.intersectingElements.length === 0) {\n        return '';\n      }\n      const firstVisibleElement = this.intersectingElements.reduce(\n        (firstVisibleElement, anotherElement) => {\n          // FIXME: This algorithm only takes into account LTR layouts\n          const firstVisibleElementBounds = firstVisibleElement.getBoundingClientRect();\n          const anotherElementBounds = anotherElement.getBoundingClientRect();\n          return anotherElementBounds.left <= firstVisibleElementBounds.left &&\n            anotherElementBounds.top <= firstVisibleElementBounds.top\n            ? anotherElement\n            : firstVisibleElement;\n        }\n      );\n\n      return firstVisibleElement === this.$el.querySelector('[data-scroll]')\n        ? ''\n        : firstVisibleElement.dataset.scroll!;\n    }\n\n    /**\n     * Initialise the observer after mounting the component.\n     */\n    mounted(): void {\n      this.intersectionObserver = new IntersectionObserver(this.updateVisibleElements, {\n        root: this.useWindow ? document : this.$el,\n        threshold: this.threshold,\n        rootMargin: this.margin\n      });\n    }\n\n    /**\n     * Disconnects the intersection observer.\n     *\n     * @internal\n     */\n    beforeDestroy(): void {\n      this.intersectionObserver?.disconnect();\n      this.$x.emit('UserScrolledToElement', '');\n    }\n\n    /**\n     * Disconnects the previous observer.\n     *\n     * @param _new - The new `IntersectionObserver`.\n     * @param old - The new `IntersectionObserver`.\n     * @internal\n     */\n    @Watch('intersectionObserver')\n    protected disconnectPreviousObserver(\n      _new: IntersectionObserver | null,\n      old: IntersectionObserver | null\n    ): void {\n      old?.disconnect();\n    }\n\n    /**\n     * If there is a pending scroll, starts a countdown to stop trying to restore the scroll.\n     *\n     * @param pendingScrollTo - The position the scroll should be restored to.\n     * @internal\n     */\n    @Watch('pendingScrollTo')\n    protected failRestoringScroll(pendingScrollTo: string | null): void {\n      // TODO Move this logic to the wiring. A cancelable delay operator is needed\n      clearTimeout(this.restoreScrollFailTimeoutId);\n      if (pendingScrollTo) {\n        this.restoreScrollFailTimeoutId = window.setTimeout(() => {\n          this.$x.emit('ScrollRestoreFailed');\n        }, this.restoreScrollTimeoutMs);\n      }\n    }\n\n    /**\n     * Removes an element from the {@link MainScroll.intersectingElements} list.\n     *\n     * @param element - The element to remove from the visible elements.\n     * @internal\n     */\n    protected removeVisibleElement(element: HTMLElement): void {\n      const index = this.intersectingElements.indexOf(element);\n      if (index !== -1) {\n        this.intersectingElements.splice(index, 1);\n      }\n    }\n\n    /**\n     * Updates the visible elements given a list of intersection observer entries.\n     *\n     * @param entries - The entries from whom update the visibility.\n     * @internal\n     */\n    protected updateVisibleElements(entries: IntersectionObserverEntry[]): void {\n      entries.forEach(entry => {\n        const target = entry.target as HTMLElement;\n        if (entry.isIntersecting) {\n          this.intersectingElements.push(target);\n        } else {\n          this.removeVisibleElement(target);\n        }\n      });\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     *\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-main-scroll--no-transition': !!this.pendingScrollTo\n      };\n    }\n  }\n","<template>\n  <NoElement :class=\"dynamicClasses\">\n    <slot />\n  </NoElement>\n</template>\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { XEmit } from '../../../components/decorators/bus.decorators';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/index';\n  import { scrollXModule } from '../x-module';\n  import { DISABLE_ANIMATIONS_KEY } from '../../../components/decorators/injection.consts';\n  import { ScrollObserverKey } from './scroll.const';\n  import { ScrollVisibilityObserver } from './scroll.types';\n\n  /**\n   * Extends the scroll making it able to sync the first visible element, and allowing\n   * the children position to be restored.\n   *\n   * Each child element that wants to have this support must be wrapped in a {@link MainScrollItem}\n   * component.\n   *\n   * @public\n   */\n  @Component({\n    components: { NoElement },\n    mixins: [xComponentMixin(scrollXModule)]\n  })\n  /* eslint-disable @typescript-eslint/unbound-method */\n  export default class MainScroll extends Vue {\n    /**\n     * If `true`, sets this scroll instance to the main of the application. Being the main\n     * scroll implies that features like restoring the scroll when the query changes, or storing\n     * the scroll position in the URL will be enabled for this container.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    public useWindow!: boolean;\n\n    /**\n     * Timeout in milliseconds to abort trying to restore the scroll position to the target\n     * element.\n     *\n     * @public\n     */\n    @Prop({ default: 5000 })\n    public restoreScrollTimeoutMs!: number;\n\n    /**\n     * Intersection percentage to consider an element visible.\n     *\n     * @public\n     */\n    @Prop({ default: 0.3 })\n    public threshold!: number;\n\n    /**\n     * Adjusts the size of the scroll container bounds.\n     *\n     * @public\n     */\n    @Prop({ default: '0px' })\n    public margin!: string;\n\n    /**\n     * The elements that are currently considered visible.\n     *\n     * @internal\n     */\n    protected intersectingElements: HTMLElement[] = [];\n\n    /**\n     * Intersection observer to determine visibility of the elements.\n     *\n     * @returns An intersection observer to detect elements visibility.\n     * @internal\n     */\n    protected intersectionObserver: IntersectionObserver | null = null;\n\n    /**\n     * Stores the identifier of the timeout that will consider the scroll failed to restore.\n     *\n     * @internal\n     */\n    protected restoreScrollFailTimeoutId?: number;\n\n    /**\n     * Pending identifier scroll position to restore. If it matches the {@link MainScrollItem.item}\n     * `id` property, this component should be scrolled into view.\n     *\n     * @internal\n     */\n    @State('scroll', 'pendingScrollTo')\n    public pendingScrollTo!: string;\n\n    /**\n     * Disables the animations.\n     *\n     * @returns A boolean to disable the animations.\n     * @internal\n     */\n    @XProvide(DISABLE_ANIMATIONS_KEY)\n    public get disableAnimations(): boolean {\n      return !!this.pendingScrollTo;\n    }\n\n    /**\n     * Creates an `IntersectionObserver` to detect the first visible elements. Children of this\n     * component should register themselves if they want to be observed.\n     *\n     * @returns The intersection observer.\n     * @public\n     */\n    @XProvide(ScrollObserverKey)\n    public get visibleElementsObserver(): ScrollVisibilityObserver | null {\n      const observer = this.intersectionObserver;\n      return observer\n        ? {\n            observe: observer.observe.bind(observer),\n            unobserve: element => {\n              this.removeVisibleElement(element);\n              observer.unobserve(element);\n            }\n          }\n        : null;\n    }\n\n    /**\n     * The first visible element contained in this component.\n     *\n     * @returns The first visible element in this component.\n     * @internal\n     */\n    @XEmit('UserScrolledToElement')\n    public get firstVisibleElement(): string | '' {\n      if (this.intersectingElements.length === 0) {\n        return '';\n      }\n      const firstVisibleElement = this.intersectingElements.reduce(\n        (firstVisibleElement, anotherElement) => {\n          // FIXME: This algorithm only takes into account LTR layouts\n          const firstVisibleElementBounds = firstVisibleElement.getBoundingClientRect();\n          const anotherElementBounds = anotherElement.getBoundingClientRect();\n          return anotherElementBounds.left <= firstVisibleElementBounds.left &&\n            anotherElementBounds.top <= firstVisibleElementBounds.top\n            ? anotherElement\n            : firstVisibleElement;\n        }\n      );\n\n      return firstVisibleElement === this.$el.querySelector('[data-scroll]')\n        ? ''\n        : firstVisibleElement.dataset.scroll!;\n    }\n\n    /**\n     * Initialise the observer after mounting the component.\n     */\n    mounted(): void {\n      this.intersectionObserver = new IntersectionObserver(this.updateVisibleElements, {\n        root: this.useWindow ? document : this.$el,\n        threshold: this.threshold,\n        rootMargin: this.margin\n      });\n    }\n\n    /**\n     * Disconnects the intersection observer.\n     *\n     * @internal\n     */\n    beforeDestroy(): void {\n      this.intersectionObserver?.disconnect();\n      this.$x.emit('UserScrolledToElement', '');\n    }\n\n    /**\n     * Disconnects the previous observer.\n     *\n     * @param _new - The new `IntersectionObserver`.\n     * @param old - The new `IntersectionObserver`.\n     * @internal\n     */\n    @Watch('intersectionObserver')\n    protected disconnectPreviousObserver(\n      _new: IntersectionObserver | null,\n      old: IntersectionObserver | null\n    ): void {\n      old?.disconnect();\n    }\n\n    /**\n     * If there is a pending scroll, starts a countdown to stop trying to restore the scroll.\n     *\n     * @param pendingScrollTo - The position the scroll should be restored to.\n     * @internal\n     */\n    @Watch('pendingScrollTo')\n    protected failRestoringScroll(pendingScrollTo: string | null): void {\n      // TODO Move this logic to the wiring. A cancelable delay operator is needed\n      clearTimeout(this.restoreScrollFailTimeoutId);\n      if (pendingScrollTo) {\n        this.restoreScrollFailTimeoutId = window.setTimeout(() => {\n          this.$x.emit('ScrollRestoreFailed');\n        }, this.restoreScrollTimeoutMs);\n      }\n    }\n\n    /**\n     * Removes an element from the {@link MainScroll.intersectingElements} list.\n     *\n     * @param element - The element to remove from the visible elements.\n     * @internal\n     */\n    protected removeVisibleElement(element: HTMLElement): void {\n      const index = this.intersectingElements.indexOf(element);\n      if (index !== -1) {\n        this.intersectingElements.splice(index, 1);\n      }\n    }\n\n    /**\n     * Updates the visible elements given a list of intersection observer entries.\n     *\n     * @param entries - The entries from whom update the visibility.\n     * @internal\n     */\n    protected updateVisibleElements(entries: IntersectionObserverEntry[]): void {\n      entries.forEach(entry => {\n        const target = entry.target as HTMLElement;\n        if (entry.isIntersecting) {\n          this.intersectingElements.push(target);\n        } else {\n          this.removeVisibleElement(target);\n        }\n      });\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     *\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-main-scroll--no-transition': !!this.pendingScrollTo\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n[`UserScrolledToElement`](./../../api/x-components.scrollxevents.md)\n[`ScrollRestoreFailed`](./../../api/x-components.scrollxevents.md)\n\n## See it in action\n\nThe `MainScroll` component must be an ancestor of the `MainScrollItem` components. This is because\nit injects the needed utilities to determine the first visible item.\n\n```vue\n<template>\n  <MainScroll>\n    <ul>\n      <MainScrollItem v-for=\"item in 24\" tag=\"li\">Item {{ item }}</MainScrollItem>\n    </ul>\n  </MainScroll>\n</template>\n\n<script>\n  import { MainScroll, MainScrollItem } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'MainScrollDemo',\n    components: {\n      MainScroll,\n      MainScrollItem\n    }\n  };\n</script>\n\n<style scoped>\n  ul {\n    overflow: auto;\n    max-height: 200px;\n  }\n\n  li {\n    height: 50px;\n    line-height: 50px;\n  }\n</style>\n```\n\n### Play with props\n\n#### Window scroll\n\nIn case you aren't using a custom scrolling element like the `Scroll` panel, and want to use the\ndefault browser scroll, you can do so by using the `useWindow` prop:\n\n```vue\n<template>\n  <MainScroll useWindow>\n    <ul>\n      <MainScrollItem v-for=\"item in 24\" tag=\"li\">Item {{ item }}</MainScrollItem>\n    </ul>\n  </MainScroll>\n</template>\n\n<script>\n  import { MainScroll, MainScrollItem } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'MainScrollDemo',\n    components: {\n      MainScroll,\n      MainScrollItem\n    }\n  };\n</script>\n```\n\n#### Timeout for restoring scroll\n\nWhen your application is loaded, this component, together with the `MainScrollItem` will try to\nrestore the scroll to the provided position (if available). Because of the dynamic nature of\nJavaScript applications, the element that it tries to restore the scroll to might not be available\nanymore. For this reason after a defined time, the scroll restoration will be considered failed.\n\nThis time can be configured through the `restore-scroll-timeout-ms` prop. This is specially useful\nwhen combined with the URL X Module.\n\n```vue\n<template>\n  <MainScroll :restoreScrollTimeoutMs=\"1000\">\n    <ul>\n      <MainScrollItem v-for=\"item in 24\" tag=\"li\">Item {{ item }}</MainScrollItem>\n    </ul>\n  </MainScroll>\n</template>\n\n<script>\n  import { MainScroll, MainScrollItem } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'MainScrollDemo',\n    components: {\n      MainScroll,\n      MainScrollItem\n    }\n  };\n</script>\n```\n\n#### Adjust first visible item\n\nBy default this component will consider the first visible item, the first element that is at least\nintersecting a 50% with its container. However this arbitrary number might not always be the best.\n\nTo configure this, you can use the `margin` and `threshold` props, which work exactly like in the\n`IntersectionObserver` API. In this example we are reducing the bounds of the intersection by 50px,\nand adjusting the element to be at least 75% intersecting.\n\n```vue\n<template>\n  <MainScroll :threshold=\"0.75\" margin=\"-50px\">\n    <ul>\n      <MainScrollItem v-for=\"item in 24\" tag=\"li\">Item {{ item }}</MainScrollItem>\n    </ul>\n  </MainScroll>\n</template>\n\n<script>\n  import { MainScroll, MainScrollItem } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'MainScrollDemo',\n    components: {\n      MainScroll,\n      MainScrollItem\n    }\n  };\n</script>\n```\n</docs>\n","/**\n * Comma separated list of common focusable selectors.\n *\n * @public\n */\n/* eslint-disable max-len */\nexport const FOCUSABLE_SELECTORS =\n  'a[href], button:not([disabled]), details, input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])';\n/* eslint-enable max-len */\n","import { AnyFunction } from '@empathyco/x-utils';\nimport { createDecorator } from 'vue-class-component';\nimport { debounce } from '../../utils/debounce';\nimport { DebounceOptions, DecoratorFor } from '../../utils/types';\n\n/**\n * Adds debounce to the method that the decorator is applied to.\n *\n * @remarks Pending debounced execution is cancelled when the component is destroyed.\n *\n * @param debounceTimeInMs - The time of debounce in ms.\n * @param debounceOptions - The options for the debounce strategy.\n *\n * @returns Decorator that applies debounce.\n *\n * @public\n */\nexport function Debounce(\n  debounceTimeInMs: number,\n  debounceOptions: DebounceOptions = {}\n): DecoratorFor<AnyFunction> {\n  return createDecorator((options, key) => {\n    const originalMethod = options.methods![key];\n    const debouncedMethod = debounce(\n      (context: Vue, args: unknown[]) => originalMethod.call(context, ...args),\n      debounceTimeInMs,\n      debounceOptions\n    );\n\n    options.methods![key] = function debouncedWrapper(...args: unknown[]) {\n      debouncedMethod(this, args);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const originalBeforeDestroy = options.beforeDestroy;\n    Object.assign(options, {\n      beforeDestroy(this: Vue) {\n        originalBeforeDestroy?.apply(this);\n        debouncedMethod.cancel();\n      }\n    });\n  });\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop, Mixins } from 'vue-property-decorator';\n  import { getTargetElement } from '../../utils/html';\n  import Fade from '../animations/fade.vue';\n  import { NoElement } from '../no-element';\n  import { FOCUSABLE_SELECTORS } from '../../utils/focus';\n  import { Debounce } from '../decorators/debounce.decorators';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n\n  /**\n   * Base component with no XPlugin dependencies that serves as a utility for constructing more\n   * complex modals.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseModal extends Mixins(\n    dynamicPropsMixin(['contentClass', 'overlayClass'])\n  ) {\n    /**\n     * Animation to use for opening/closing the modal. This animation only affects the content.\n     */\n    @Prop({ default: () => NoElement })\n    public animation!: Vue | string;\n\n    /**\n     * Animation to use for the overlay (backdrop) part of the modal. By default, it uses\n     * a fade transition.\n     */\n    @Prop({ default: () => Fade })\n    public overlayAnimation!: Vue | string;\n\n    /**\n     * Determines if the modal is open or not.\n     */\n    @Prop({ required: true })\n    public open!: boolean;\n\n    /**\n     * Determines if the focused element changes to one inside the modal when it opens. Either the\n     * first element with a positive tabindex or just the first focusable element.\n     */\n    @Prop({ default: true })\n    public focusOnOpen!: boolean;\n\n    /**\n     * The reference selector of a DOM element to use as reference to position the modal.\n     * This selector can be an ID or a class, if it is a class, it will use the first\n     * element that matches.\n     */\n    @Prop()\n    public referenceSelector?: string;\n\n    /**\n     * The previous value of the body overflow style.\n     */\n    protected previousBodyOverflow = '';\n    /**\n     * The previous value of the HTML element overflow style.\n     */\n    protected previousHTMLOverflow = '';\n    /**\n     * Boolean to delay the leave animation until it has completed.\n     */\n    protected isWaitingForLeave = false;\n    /**\n     * The reference element to use to find the modal's position.\n     */\n    protected referenceElement!: HTMLElement;\n\n    public $refs!: {\n      /**\n       * Reference to the modal element in the DOM.\n       */\n      modal: HTMLDivElement;\n      /**\n       * Reference to the modal content element in the DOM.\n       */\n      modalContent: HTMLDivElement;\n    };\n\n    protected mounted(): void {\n      /* Watcher added after mount to prevent SSR from breaking */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.$watch('open', this.syncBody);\n      if (this.open) {\n        this.syncBody(true);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.updatePosition);\n\n      this.$watch(\n        'clientHeaderSelector',\n        () => {\n          if (this.referenceSelector) {\n            const element = document.querySelector(this.referenceSelector) as HTMLElement;\n            if (element) {\n              this.referenceElement = element;\n              resizeObserver.observe(element);\n            }\n          }\n        },\n        { immediate: true }\n      );\n\n      this.$on('hook:beforeDestroy', () => {\n        resizeObserver.disconnect();\n      });\n    }\n\n    /**\n     * Updates the position of the modal setting the top of the element depending\n     * on the selector. The modal will be placed under this selector.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    updatePosition(): void {\n      const { height, y } = this.referenceElement?.getBoundingClientRect() ?? { height: 0, y: 0 };\n      this.$refs.modal.style.top = `${height + y}px`;\n      this.$refs.modal.style.bottom = '0';\n      this.$refs.modal.style.height = 'auto';\n    }\n\n    /**\n     * Syncs the body to the open state of the modal, adding or removing styles and listeners.\n     *\n     * @param isOpen - True when the modal is opened.\n     * @internal\n     */\n    protected syncBody(isOpen: boolean): void {\n      if (isOpen) {\n        this.disableScroll();\n        this.addBodyListeners();\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.$on('hook:beforeDestroy', this.removeBodyListeners);\n        this.$on('hook:beforeDestroy', this.enableScroll);\n        /* eslint-enable @typescript-eslint/unbound-method */\n        if (this.focusOnOpen) {\n          this.setFocus();\n        }\n      } else {\n        this.enableScroll();\n        this.removeBodyListeners();\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.$off('hook:beforeDestroy', this.removeBodyListeners);\n        this.$off('hook:beforeDestroy', this.enableScroll);\n        /* eslint-enable @typescript-eslint/unbound-method */\n      }\n    }\n\n    /**\n     * Disables the scroll of both the body and the window.\n     *\n     * @internal\n     */\n    protected disableScroll(): void {\n      this.previousBodyOverflow = document.body.style.overflow;\n      this.previousHTMLOverflow = document.documentElement.style.overflow;\n      document.body.style.overflow = document.documentElement.style.overflow = 'hidden';\n    }\n\n    /**\n     * Restores the scroll of both the body and the window.\n     *\n     * @internal\n     */\n    protected enableScroll(): void {\n      document.body.style.overflow = this.previousBodyOverflow;\n      document.documentElement.style.overflow = this.previousHTMLOverflow;\n    }\n\n    /**\n     * Adds listeners to the body element ot detect if the modal should be closed.\n     *\n     * @internal\n     */\n    protected addBodyListeners(): void {\n      // TODO find a better solution and remove the timeout\n      // to avoid emit the focusin on opening X that provokes closing it immediately.\n      // This is because this event was emitted after the open of main modal when the user clicks\n      // on the customer website search box (focus event). This way we avoid add the listener before\n      // the open and the avoid the event that provokes the close.\n      setTimeout(() => {\n        /* eslint-disable @typescript-eslint/unbound-method */\n        document.body.addEventListener('focusin', this.emitFocusInBody);\n        /* eslint-enable @typescript-eslint/unbound-method */\n      });\n    }\n\n    /**\n     * Removes the body listeners.\n     *\n     * @internal\n     */\n    protected removeBodyListeners(): void {\n      /* eslint-disable @typescript-eslint/unbound-method */\n      document.body.removeEventListener('focusin', this.emitFocusInBody);\n      /* eslint-enable @typescript-eslint/unbound-method */\n    }\n\n    /**\n     * Emits the `click:overlay` event if the click has been triggered in the overlay layer.\n     *\n     * @param event - The click event.\n     * @internal\n     */\n    protected emitOverlayClicked(event: MouseEvent): void {\n      this.$emit('click:overlay', event);\n    }\n\n    /**\n     * Emits the `focusin:body` event if a focus event has been triggered outside the modal.\n     *\n     * @param event - The focusin event.\n     * @internal\n     */\n    protected emitFocusInBody(event: FocusEvent): void {\n      if (!this.$refs.modalContent?.contains(getTargetElement(event))) {\n        this.$emit('focusin:body', event);\n      }\n    }\n\n    /**\n     * Sets the focused element to the first element either the first element with a positive\n     * tabindex or, if there isn't any, the first focusable element inside the modal.\n     *\n     * @internal\n     */\n    protected setFocus(): void {\n      const focusCandidates: HTMLElement[] = Array.from(\n        this.$refs.modalContent.querySelectorAll(FOCUSABLE_SELECTORS)\n      );\n\n      const elementToFocus =\n        focusCandidates.find(element => element.tabIndex) ?? focusCandidates[0];\n\n      elementToFocus?.focus();\n    }\n  }\n","<template>\n  <div v-show=\"isWaitingForLeave || open\" ref=\"modal\" class=\"x-modal\" data-test=\"modal\">\n    <component\n      :is=\"animation\"\n      @before-leave=\"isWaitingForLeave = true\"\n      @after-leave=\"isWaitingForLeave = false\"\n    >\n      <div\n        v-if=\"open\"\n        ref=\"modalContent\"\n        class=\"x-modal__content\"\n        data-test=\"modal-content\"\n        role=\"dialog\"\n        :class=\"contentClass\"\n      >\n        <!-- @slot (Required) Modal container content -->\n        <slot />\n      </div>\n    </component>\n    <component :is=\"overlayAnimation\">\n      <div\n        v-if=\"open\"\n        @click=\"emitOverlayClicked\"\n        @keydown=\"emitOverlayClicked\"\n        class=\"x-modal__overlay\"\n        :class=\"overlayClass\"\n        data-test=\"modal-overlay\"\n      />\n    </component>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop, Mixins } from 'vue-property-decorator';\n  import { getTargetElement } from '../../utils/html';\n  import Fade from '../animations/fade.vue';\n  import { NoElement } from '../no-element';\n  import { FOCUSABLE_SELECTORS } from '../../utils/focus';\n  import { Debounce } from '../decorators/debounce.decorators';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n\n  /**\n   * Base component with no XPlugin dependencies that serves as a utility for constructing more\n   * complex modals.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseModal extends Mixins(\n    dynamicPropsMixin(['contentClass', 'overlayClass'])\n  ) {\n    /**\n     * Animation to use for opening/closing the modal. This animation only affects the content.\n     */\n    @Prop({ default: () => NoElement })\n    public animation!: Vue | string;\n\n    /**\n     * Animation to use for the overlay (backdrop) part of the modal. By default, it uses\n     * a fade transition.\n     */\n    @Prop({ default: () => Fade })\n    public overlayAnimation!: Vue | string;\n\n    /**\n     * Determines if the modal is open or not.\n     */\n    @Prop({ required: true })\n    public open!: boolean;\n\n    /**\n     * Determines if the focused element changes to one inside the modal when it opens. Either the\n     * first element with a positive tabindex or just the first focusable element.\n     */\n    @Prop({ default: true })\n    public focusOnOpen!: boolean;\n\n    /**\n     * The reference selector of a DOM element to use as reference to position the modal.\n     * This selector can be an ID or a class, if it is a class, it will use the first\n     * element that matches.\n     */\n    @Prop()\n    public referenceSelector?: string;\n\n    /**\n     * The previous value of the body overflow style.\n     */\n    protected previousBodyOverflow = '';\n    /**\n     * The previous value of the HTML element overflow style.\n     */\n    protected previousHTMLOverflow = '';\n    /**\n     * Boolean to delay the leave animation until it has completed.\n     */\n    protected isWaitingForLeave = false;\n    /**\n     * The reference element to use to find the modal's position.\n     */\n    protected referenceElement!: HTMLElement;\n\n    public $refs!: {\n      /**\n       * Reference to the modal element in the DOM.\n       */\n      modal: HTMLDivElement;\n      /**\n       * Reference to the modal content element in the DOM.\n       */\n      modalContent: HTMLDivElement;\n    };\n\n    protected mounted(): void {\n      /* Watcher added after mount to prevent SSR from breaking */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.$watch('open', this.syncBody);\n      if (this.open) {\n        this.syncBody(true);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.updatePosition);\n\n      this.$watch(\n        'clientHeaderSelector',\n        () => {\n          if (this.referenceSelector) {\n            const element = document.querySelector(this.referenceSelector) as HTMLElement;\n            if (element) {\n              this.referenceElement = element;\n              resizeObserver.observe(element);\n            }\n          }\n        },\n        { immediate: true }\n      );\n\n      this.$on('hook:beforeDestroy', () => {\n        resizeObserver.disconnect();\n      });\n    }\n\n    /**\n     * Updates the position of the modal setting the top of the element depending\n     * on the selector. The modal will be placed under this selector.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    updatePosition(): void {\n      const { height, y } = this.referenceElement?.getBoundingClientRect() ?? { height: 0, y: 0 };\n      this.$refs.modal.style.top = `${height + y}px`;\n      this.$refs.modal.style.bottom = '0';\n      this.$refs.modal.style.height = 'auto';\n    }\n\n    /**\n     * Syncs the body to the open state of the modal, adding or removing styles and listeners.\n     *\n     * @param isOpen - True when the modal is opened.\n     * @internal\n     */\n    protected syncBody(isOpen: boolean): void {\n      if (isOpen) {\n        this.disableScroll();\n        this.addBodyListeners();\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.$on('hook:beforeDestroy', this.removeBodyListeners);\n        this.$on('hook:beforeDestroy', this.enableScroll);\n        /* eslint-enable @typescript-eslint/unbound-method */\n        if (this.focusOnOpen) {\n          this.setFocus();\n        }\n      } else {\n        this.enableScroll();\n        this.removeBodyListeners();\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.$off('hook:beforeDestroy', this.removeBodyListeners);\n        this.$off('hook:beforeDestroy', this.enableScroll);\n        /* eslint-enable @typescript-eslint/unbound-method */\n      }\n    }\n\n    /**\n     * Disables the scroll of both the body and the window.\n     *\n     * @internal\n     */\n    protected disableScroll(): void {\n      this.previousBodyOverflow = document.body.style.overflow;\n      this.previousHTMLOverflow = document.documentElement.style.overflow;\n      document.body.style.overflow = document.documentElement.style.overflow = 'hidden';\n    }\n\n    /**\n     * Restores the scroll of both the body and the window.\n     *\n     * @internal\n     */\n    protected enableScroll(): void {\n      document.body.style.overflow = this.previousBodyOverflow;\n      document.documentElement.style.overflow = this.previousHTMLOverflow;\n    }\n\n    /**\n     * Adds listeners to the body element ot detect if the modal should be closed.\n     *\n     * @internal\n     */\n    protected addBodyListeners(): void {\n      // TODO find a better solution and remove the timeout\n      // to avoid emit the focusin on opening X that provokes closing it immediately.\n      // This is because this event was emitted after the open of main modal when the user clicks\n      // on the customer website search box (focus event). This way we avoid add the listener before\n      // the open and the avoid the event that provokes the close.\n      setTimeout(() => {\n        /* eslint-disable @typescript-eslint/unbound-method */\n        document.body.addEventListener('focusin', this.emitFocusInBody);\n        /* eslint-enable @typescript-eslint/unbound-method */\n      });\n    }\n\n    /**\n     * Removes the body listeners.\n     *\n     * @internal\n     */\n    protected removeBodyListeners(): void {\n      /* eslint-disable @typescript-eslint/unbound-method */\n      document.body.removeEventListener('focusin', this.emitFocusInBody);\n      /* eslint-enable @typescript-eslint/unbound-method */\n    }\n\n    /**\n     * Emits the `click:overlay` event if the click has been triggered in the overlay layer.\n     *\n     * @param event - The click event.\n     * @internal\n     */\n    protected emitOverlayClicked(event: MouseEvent): void {\n      this.$emit('click:overlay', event);\n    }\n\n    /**\n     * Emits the `focusin:body` event if a focus event has been triggered outside the modal.\n     *\n     * @param event - The focusin event.\n     * @internal\n     */\n    protected emitFocusInBody(event: FocusEvent): void {\n      if (!this.$refs.modalContent?.contains(getTargetElement(event))) {\n        this.$emit('focusin:body', event);\n      }\n    }\n\n    /**\n     * Sets the focused element to the first element either the first element with a positive\n     * tabindex or, if there isn't any, the first focusable element inside the modal.\n     *\n     * @internal\n     */\n    protected setFocus(): void {\n      const focusCandidates: HTMLElement[] = Array.from(\n        this.$refs.modalContent.querySelectorAll(FOCUSABLE_SELECTORS)\n      );\n\n      const elementToFocus =\n        focusCandidates.find(element => element.tabIndex) ?? focusCandidates[0];\n\n      elementToFocus?.focus();\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    align-items: flex-start;\n    justify-content: flex-start;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n\n    &__content {\n      display: flex;\n      flex-flow: column nowrap;\n      z-index: 1;\n    }\n\n    &__overlay {\n      width: 100%;\n      height: 100%;\n      position: absolute;\n      background-color: rgb(0, 0, 0);\n      opacity: 0.3;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nThe `BaseModal` is a simple component that serves to create complex modals. Its open state has to be\npassed via prop. There is a prop, `referenceSelector`, used to place the modal under some element\ninstead of set the top of the element directly. It also accepts an animation to use for opening &\nclosing.\n\nIt emits a `click:overlay` event when any part out of the content is clicked, but only if the modal\nis open.\n\n```vue\n<template>\n  <div>\n    <button @click=\"open = true\">Open modal</button>\n    <BaseModal\n      :animation=\"fadeAndSlide\"\n      :open=\"open\"\n      @click:overlay=\"open = false\"\n      referenceSelector=\".header\"\n    >\n      <h1>Hello</h1>\n      <p>The modal is working</p>\n      <button @click=\"open = false\">Close modal</button>\n    </BaseModal>\n  </div>\n</template>\n\n<script>\n  import { BaseModal, FadeAndSlide } from '@empathyco/x-components';\n  import Vue from 'vue';\n\n  Vue.component('fadeAndSlide', FadeAndSlide);\n\n  export default {\n    components: {\n      BaseModal\n    },\n    data() {\n      return {\n        open: false\n      };\n    }\n  };\n</script>\n```\n\n### Customized usage\n\n#### Customizing the content with classes\n\nThe `contentClass` prop can be used to add classes to the modal content.\n\n```vue\n<template>\n  <div>\n    <button @click=\"open = true\">Open modal</button>\n    <BaseModal\n      :animation=\"fadeAndSlide\"\n      :open=\"open\"\n      @click:overlay=\"open = false\"\n      referenceSelector=\".header\"\n      contentClass=\"x-bg-neutral-75\"\n    >\n      <h1>Hello</h1>\n      <p>The modal is working</p>\n      <button @click=\"open = false\">Close modal</button>\n    </BaseModal>\n  </div>\n</template>\n\n<script>\n  import { BaseModal, FadeAndSlide } from '@empathyco/x-components';\n  import Vue from 'vue';\n\n  Vue.component('fadeAndSlide', FadeAndSlide);\n\n  export default {\n    components: {\n      BaseModal\n    },\n    data() {\n      return {\n        open: false\n      };\n    }\n  };\n</script>\n```\n\n#### Customizing the overlay with classes\n\nThe `overlayClass` prop can be used to add classes to the modal overlay.\n\n```vue\n<template>\n  <div>\n    <button @click=\"open = true\">Open modal</button>\n    <BaseModal\n      :animation=\"fadeAndSlide\"\n      :open=\"open\"\n      @click:overlay=\"open = false\"\n      referenceSelector=\".header\"\n      overlayClass=\"x-bg-neutral-75\"\n    >\n      <h1>Hello</h1>\n      <p>The modal is working</p>\n      <button @click=\"open = false\">Close modal</button>\n    </BaseModal>\n  </div>\n</template>\n\n<script>\n  import { BaseModal, FadeAndSlide } from '@empathyco/x-components';\n  import Vue from 'vue';\n\n  Vue.component('fadeAndSlide', FadeAndSlide);\n\n  export default {\n    components: {\n      BaseModal\n    },\n    data() {\n      return {\n        open: false\n      };\n    }\n  };\n</script>\n```\n\n## Vue Events\n\nA list of events that the component will emit:\n\n- `click:overlay`: the event is emitted after the user clicks any part out of the content but only\n  if the modal is open. The event payload is the mouse event that triggers it.\n- `focusin:body`: the event is emitted after the user focus in any part out of the content but only\n  if the modal is open. The event payload is the focus event that triggers it.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XOn } from '../decorators/bus.decorators';\n  import { WireMetadata } from '../../wiring/wiring.types';\n  import { getTargetElement, isElementEqualOrContained } from '../../utils/html';\n  import BaseModal from './base-modal.vue';\n\n  /**\n   * Component containing a modal expecting a required prop, named `modalId`. It reacts to\n   * `UserClickedOpenModal`, `UserClickedCloseModal` and `UserClickedOutOfModal` events, when their\n   * payload matches the component's 'modalId' prop, to handle its open/close state. The default\n   * slot offers the possibility to customise the modal content.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseModal }\n  })\n  export default class BaseIdModal extends Vue {\n    /** Animation to use for opening/closing the modal. */\n    @Prop()\n    public animation?: Vue | string;\n\n    /** The modalId to use for the open and close event listeners. */\n    @Prop({ required: true })\n    public modalId!: string;\n\n    /** Whether the modal is open or not. */\n    protected isOpen = false;\n\n    /** The element that opened the modal. */\n    protected openerElement?: HTMLElement;\n\n    /**\n     * Opens the modal.\n     *\n     * @param modalId - The payload of the {@link XEventsTypes.UserClickedOpenModal} event.\n     * @param metadata - The metadata of the emitted event.\n     * @public\n     */\n    @XOn('UserClickedOpenModal')\n    openModal(modalId: string, metadata: WireMetadata): void {\n      if (!this.isOpen && this.modalId === modalId) {\n        this.openerElement = metadata.target;\n        this.isOpen = true;\n      }\n    }\n\n    /**\n     * Closes the modal.\n     *\n     * @param payload - The payload of the closing events:\n     * {@link XEventsTypes.UserClickedCloseModal} or {@link XEventsTypes.UserClickedOutOfModal}.\n     *\n     * @public\n     */\n    @XOn(['UserClickedCloseModal', 'UserClickedOutOfModal'])\n    closeModal(payload: string): void {\n      if (this.isOpen && this.modalId === payload) {\n        this.isOpen = false;\n      }\n    }\n\n    /**\n     * Emits a {@link XEventsTypes.UserClickedOutOfModal} event unless the passed event target\n     * is the button that opened the modal.\n     *\n     * @param event - The event that triggered the close attempt.\n     * @public\n     */\n    protected emitClickOutOfModal(event: MouseEvent | FocusEvent): void {\n      // Prevents clicking the open button when the panel is already open to close the panel.\n      if (\n        !this.openerElement ||\n        !isElementEqualOrContained(this.openerElement, getTargetElement(event))\n      ) {\n        this.$x.emit('UserClickedOutOfModal', this.modalId, { target: this.$el as HTMLElement });\n      }\n    }\n  }\n","<template>\n  <BaseModal\n    @click:overlay=\"emitClickOutOfModal\"\n    @focusin:body=\"emitClickOutOfModal\"\n    :animation=\"animation\"\n    :open=\"isOpen\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </BaseModal>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XOn } from '../decorators/bus.decorators';\n  import { WireMetadata } from '../../wiring/wiring.types';\n  import { getTargetElement, isElementEqualOrContained } from '../../utils/html';\n  import BaseModal from './base-modal.vue';\n\n  /**\n   * Component containing a modal expecting a required prop, named `modalId`. It reacts to\n   * `UserClickedOpenModal`, `UserClickedCloseModal` and `UserClickedOutOfModal` events, when their\n   * payload matches the component's 'modalId' prop, to handle its open/close state. The default\n   * slot offers the possibility to customise the modal content.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseModal }\n  })\n  export default class BaseIdModal extends Vue {\n    /** Animation to use for opening/closing the modal. */\n    @Prop()\n    public animation?: Vue | string;\n\n    /** The modalId to use for the open and close event listeners. */\n    @Prop({ required: true })\n    public modalId!: string;\n\n    /** Whether the modal is open or not. */\n    protected isOpen = false;\n\n    /** The element that opened the modal. */\n    protected openerElement?: HTMLElement;\n\n    /**\n     * Opens the modal.\n     *\n     * @param modalId - The payload of the {@link XEventsTypes.UserClickedOpenModal} event.\n     * @param metadata - The metadata of the emitted event.\n     * @public\n     */\n    @XOn('UserClickedOpenModal')\n    openModal(modalId: string, metadata: WireMetadata): void {\n      if (!this.isOpen && this.modalId === modalId) {\n        this.openerElement = metadata.target;\n        this.isOpen = true;\n      }\n    }\n\n    /**\n     * Closes the modal.\n     *\n     * @param payload - The payload of the closing events:\n     * {@link XEventsTypes.UserClickedCloseModal} or {@link XEventsTypes.UserClickedOutOfModal}.\n     *\n     * @public\n     */\n    @XOn(['UserClickedCloseModal', 'UserClickedOutOfModal'])\n    closeModal(payload: string): void {\n      if (this.isOpen && this.modalId === payload) {\n        this.isOpen = false;\n      }\n    }\n\n    /**\n     * Emits a {@link XEventsTypes.UserClickedOutOfModal} event unless the passed event target\n     * is the button that opened the modal.\n     *\n     * @param event - The event that triggered the close attempt.\n     * @public\n     */\n    protected emitClickOutOfModal(event: MouseEvent | FocusEvent): void {\n      // Prevents clicking the open button when the panel is already open to close the panel.\n      if (\n        !this.openerElement ||\n        !isElementEqualOrContained(this.openerElement, getTargetElement(event))\n      ) {\n        this.$x.emit('UserClickedOutOfModal', this.modalId, { target: this.$el as HTMLElement });\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThe `BaseIdModal` component reacts to the `UserClickedOpenModal`, `UserClickedCloseModal` and\n`UserClickedOutOfModal` to handle its open/close state. The component filters out the events which\npayload doesn't match its `modalId` prop and reacts only to those who match this criteria.\n\n### Basic usage\n\nThe component interacts with both `BaseIdModalOpen` and `BaseIdModalClose` components, which have to\nshare the same value in their `modalId` prop to work:\n\n```vue\n<template>\n  <div>\n    <BaseIdModalOpen modalId=\"myModal\">Open</BaseIdModalOpen>\n    <BaseIdModal modalId=\"myModal\">\n      <img src=\"success.png\" />\n      <BaseIdModalClose modalId=\"myModal\">Close</BaseIdModalClose>\n    </BaseIdModal>\n  </div>\n</template>\n\n<script>\n  import { BaseIdModalOpen, BaseIdModal, BaseIdModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'TestModal',\n    components: {\n      BaseIdModalOpen,\n      BaseIdModal,\n      BaseIdModalClose\n    }\n  };\n</script>\n```\n\n### Customized usage\n\n#### Customizing the content with classes\n\nThe `contentClass` prop can be used to add classes to the modal content.\n\n```vue\n<template>\n  <div>\n    <BaseIdModalOpen modalId=\"myModal\">Open</BaseIdModalOpen>\n    <BaseIdModal modalId=\"myModal\" contentClass=\"x-bg-neutral-75\">\n      <img src=\"success.png\" />\n      <BaseIdModalClose modalId=\"myModal\">Close</BaseIdModalClose>\n    </BaseIdModal>\n  </div>\n</template>\n\n<script>\n  import { BaseIdModalOpen, BaseIdModal, BaseIdModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'TestModal',\n    components: {\n      BaseIdModalOpen,\n      BaseIdModal,\n      BaseIdModalClose\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedOutOfModal`: the event is emitted after the user clicks outside the modal. The event\n  payload is the id of the modal and a metadata with the target element that emitted it.\n</docs>\n","import Vue from 'vue';\nimport { Component, Prop, Watch } from 'vue-property-decorator';\nimport { throttle } from '../../utils/throttle';\nimport { XEvent } from '../../wiring/events.types';\nimport { XOn } from '../decorators/bus.decorators';\nimport { ScrollDirection } from './scroll.types';\n\n/**\n * Mixin to share Scroll logic.\n *\n * @public\n */\n@Component\n/* eslint-disable @typescript-eslint/unbound-method */\nexport default class ScrollMixin extends Vue {\n  /**\n   * The scrolling container reference.\n   *\n   * @public\n   */\n  public $el!: HTMLElement;\n  /**\n   * Distance to the end of the scroll that when reached will emit the\n   * `scroll:about-to-end` event.\n   *\n   * @public\n   */\n  @Prop({ default: 100 })\n  public distanceToBottom!: number;\n  /**\n   * Positive vertical distance to still consider that the an element is the first one visible.\n   * For example, if set to 100, after scrolling 100 pixels, the first rendered element\n   * will still be considered the first one.\n   */\n  @Prop({ default: 100 })\n  public firstElementThresholdPx!: number;\n  /**\n   * Time duration to ignore the subsequent scroll events after an emission.\n   * Higher values will decrease events precision but can prevent performance issues.\n   *\n   * @public\n   */\n  @Prop({ default: 100 })\n  public throttleMs!: number;\n\n  /**\n   * If true (default), sets the scroll position to the top when certain events are emitted.\n   *\n   * @public\n   */\n  @Prop({ type: Boolean, default: true })\n  protected resetOnChange!: boolean;\n\n  /**\n   * List of events that should reset the scroll when emitted.\n   *\n   * @public\n   */\n  @Prop({\n    default: () => [\n      'SearchBoxQueryChanged',\n      'SortChanged',\n      'SelectedFiltersChanged',\n      'SelectedFiltersForRequestChanged',\n      'SelectedRelatedTagsChanged',\n      'UserChangedExtraParams'\n    ]\n  })\n  public resetOn!: XEvent;\n\n  /**\n   * Property for getting the client height of scroll.\n   *\n   * @internal\n   */\n  protected clientHeight = 0;\n  /**\n   * Property for getting the current position of scroll.\n   *\n   * @internal\n   */\n  protected currentPosition = 0;\n  /**\n   * Property for getting the direction of scroll.\n   *\n   * @internal\n   */\n  protected direction!: ScrollDirection;\n  /**\n   * Property for getting the previous position of scroll.\n   *\n   * @internal\n   */\n  protected previousPosition = 0;\n  /**\n   * Property for getting the scroll height.\n   *\n   * @internal\n   */\n  protected scrollHeight = 0;\n\n  /**\n   * Throttled version of the function that stores the DOM scroll related properties.\n   * The duration of the throttle is configured through the\n   * {@link ScrollMixin.throttleMs}.\n   *\n   * @returns A throttled version of the function to store the scroll data.\n   * @internal\n   */\n  protected get throttledStoreScrollData(): () => void {\n    return throttle(this.storeScrollData, this.throttleMs);\n  }\n\n  /**\n   * Returns distance missing to end position position.\n   *\n   * @returns A number for knowing the distance missing to end position position.\n   * @internal\n   */\n  protected get distanceToEnd(): number {\n    return this.scrollEndPosition - this.currentPosition;\n  }\n\n  /**\n   * Returns `true` when the amount of pixels scrolled is greater than\n   * the {@link ScrollMixin.distanceToBottom}.\n   *\n   * @returns A boolean for knowing if the user is about to reaching to the end.\n   * @internal\n   */\n  protected get hasScrollAlmostReachedEnd(): boolean {\n    return !this.hasScrollReachedStart && this.distanceToBottom > this.distanceToEnd;\n  }\n\n  /**\n   * Returns `true` when there is no more content to scroll.\n   *\n   * @returns A boolean for knowing if the user scrolls to the end.\n   * @internal\n   */\n  protected get hasScrollReachedEnd(): boolean {\n    return this.currentPosition === this.scrollEndPosition;\n  }\n\n  /**\n   * Returns `true` when the scroll is at the initial position.\n   *\n   * @returns A boolean for knowing if the user scrolls to the start.\n   * @internal\n   */\n  protected get hasScrollReachedStart(): boolean {\n    return this.currentPosition === 0;\n  }\n\n  /**\n   * Returns direction of scroll based in {@link ScrollDirection}.\n   *\n   * @returns The scroll direction.\n   * @internal\n   */\n  protected get scrollDirection(): ScrollDirection {\n    return this.currentPosition > this.previousPosition ? 'DOWN' : 'UP';\n  }\n\n  /**\n   * Returns end position of scroll.\n   *\n   * @returns A number for knowing end position of scroll.\n   * @internal\n   */\n  protected get scrollEndPosition(): number {\n    return this.scrollHeight - this.clientHeight;\n  }\n\n  /**\n   * Initialises DOM dependant scroll properties.\n   *\n   * @internal\n   */\n  mounted(): void {\n    this.$nextTick().then(() => {\n      if (!this.$el) {\n        // TODO Replace with Empathy's logger\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[ScrollMixin]',\n          'Components using this mixin must set `this.$el` to the HTML node that is scrolling.'\n        );\n      } else {\n        this.storeScrollData();\n      }\n    });\n  }\n\n  /**\n   * Resets the scroll position.\n   *\n   * @internal\n   */\n  @XOn(instance => (instance as ScrollMixin).resetOn)\n  resetScroll(): void {\n    this.$nextTick().then(() => {\n      if (this.resetOnChange) {\n        this.$el.scrollTo({ top: 0 });\n      }\n    });\n  }\n\n  /**\n   * Emits the `scroll` event.\n   *\n   * @param _newScrollPosition - The new position of scroll.\n   * @param oldScrollPosition - The old position of scroll.\n   * @internal\n   */\n  @Watch('currentPosition')\n  protected emitScroll(_newScrollPosition: number, oldScrollPosition: number): void {\n    this.$emit('scroll', this.currentPosition);\n    this.previousPosition = oldScrollPosition;\n  }\n\n  /**\n   * Emits the 'scroll:at-start' event when the user reaches the start.\n   *\n   * @param isScrollAtStart - For knowing if the user reaches at start.\n   * @internal\n   */\n  @Watch('hasScrollReachedStart')\n  protected emitScrollReachedAtStart(isScrollAtStart: boolean): void {\n    this.$emit('scroll:at-start', isScrollAtStart);\n  }\n\n  /**\n   * Emits the 'scroll:almost-at-end' event when the user is about to reach to end.\n   *\n   * @param isScrollAlmostAtEnd - For knowing if the user is about to reach to end.\n   * @internal\n   */\n  @Watch('hasScrollAlmostReachedEnd')\n  protected emitScrollAlmostAtEnd(isScrollAlmostAtEnd: boolean): void {\n    this.$emit('scroll:almost-at-end', isScrollAlmostAtEnd);\n  }\n\n  /**\n   * Emits the 'scroll:at-end' event when the user reaches the end.\n   *\n   * @param isScrollAtEnd - For knowing if the user reaches at end.\n   * @internal\n   */\n  @Watch('hasScrollReachedEnd')\n  protected emitScrollAtEnd(isScrollAtEnd: boolean): void {\n    this.$emit('scroll:at-end', isScrollAtEnd);\n  }\n\n  /**\n   * Emits the `scroll:direction-change` event when the scrolling direction has changed.\n   *\n   * @param direction - The new direction of scroll.\n   * @internal\n   */\n  @Watch('scrollDirection')\n  protected emitScrollDirection(direction: ScrollDirection): void {\n    this.$emit('scroll:direction-change', direction);\n  }\n\n  /**\n   * Updates scroll related properties.\n   *\n   * @internal\n   */\n  protected storeScrollData(): void {\n    if (this.$el) {\n      this.currentPosition = this.$el.scrollTop;\n      this.scrollHeight = this.$el.scrollHeight;\n      this.clientHeight = this.$el.clientHeight;\n    }\n  }\n}\n/*  eslint-enable @typescript-eslint/unbound-method */\n","import { ThrottleFunction } from './types';\n\n/**\n * Util function that returns a throttled version of the function passed as parameter.\n *\n * @param fn - Function to be debounced.\n * @param throttleTimeMs - The time of throttle in ms.\n * @returns A new function with the throttle.\n *\n * @public\n */\n\nexport const throttle = <Params extends any[]>(\n  fn: (...args: Params) => void,\n  throttleTimeMs: number\n): ThrottleFunction<Params> => {\n  let timeout: ReturnType<typeof setTimeout> | undefined;\n  let params: Params;\n\n  const throttleFn: ThrottleFunction<Params> = (...args) => {\n    params = args;\n    if (!timeout) {\n      timeout = setTimeout(() => {\n        fn(...params);\n        timeout = undefined;\n      }, throttleTimeMs);\n    }\n  };\n\n  return throttleFn;\n};\n","\n\n\n\n\n\n\n  import { mixins } from 'vue-class-component';\n  import { Component } from 'vue-property-decorator';\n  import ScrollMixin from './scroll.mixin';\n\n  /**\n   * Base scroll component that depending on the user interactivity emits different events for\n   * knowing when the user scrolls, the direction of scroll and if user reaches the start or end.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseScroll extends mixins(ScrollMixin) {}\n","<template>\n  <div @scroll=\"throttledStoreScrollData\" class=\"x-scroll x-base-scroll\" data-test=\"base-scroll\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { mixins } from 'vue-class-component';\n  import { Component } from 'vue-property-decorator';\n  import ScrollMixin from './scroll.mixin';\n\n  /**\n   * Base scroll component that depending on the user interactivity emits different events for\n   * knowing when the user scrolls, the direction of scroll and if user reaches the start or end.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseScroll extends mixins(ScrollMixin) {}\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nThe `BaseScroll` is a component that manages the state of scroll of a specified element. The\ncomponent does the necessary calculations for knowing the direction of scroll, if the scroll has\nreached to start or to end, and is about to reaching to end. The components emits the next events\ndepending of movement that realize the user:\n\n```vue\n<template>\n  <BaseScroll\n    @scroll=\"scroll\"\n    @scroll:direction-change=\"scrollDirectionChange\"\n    @scroll:at-start=\"scrollAtStart\"\n    @scroll:almost-at-end=\"scrollAlmostAtEnd\"\n    @scroll:at-end=\"scrollAtEnd\"\n    :throttleMs=\"1000\"\n    :distanceToBottom=\"200\"\n  >\n    <template>\n      <div class=\"content-scroll\">\n        <span>content1</span>\n        <span>content1</span>\n      </div>\n    </template>\n  </BaseScroll>\n</template>\n\n<script>\n  import { BaseScroll } from '@empathyco/x-components';\n\n  export default {\n    name: 'ScrollTest',\n    components: {\n      BaseScroll\n    },\n    methods: {\n      scroll(position) {\n        console.log('scroll', position);\n      },\n      scrollDirectionChange(direction) {\n        console.log('scroll:direction-change', direction);\n      },\n      scrollAtStart() {\n        console.log('scroll:at-start');\n      },\n      scrollAlmostAtEnd(distance) {\n        console.log('scroll:almost-at-end', distance);\n      },\n      scrollAtEnd() {\n        console.log('scroll:at-end');\n      }\n    }\n  };\n</script>\n```\n\n### Avoid reset scroll on query change\n\nSet to false the reset scroll on query change feature which is true by default.\n\n```vue\n<template>\n  <BaseScroll @scroll=\"scroll\" :resetOnChange=\"false\">\n    <template>\n      <div class=\"content-scroll\">\n        <span>content1</span>\n        <span>content1</span>\n      </div>\n    </template>\n  </BaseScroll>\n</template>\n\n<script>\n  import { BaseScroll } from '@empathyco/x-components';\n\n  export default {\n    name: 'ScrollTest',\n    components: {\n      BaseScroll\n    },\n    methods: {\n      scroll(position) {\n        console.log('scroll', position);\n      }\n    }\n  };\n</script>\n```\n\n### Reset scroll\n\nYou can configure which events reset the scroll position using the `resetOn` prop.\n\n```vue\n<template>\n  <BaseScroll @scroll=\"scroll\" :resetOn=\"resetScrollEvents\">\n    <template>\n      <div class=\"content-scroll\">\n        <span>content1</span>\n        <span>content1</span>\n      </div>\n    </template>\n  </BaseScroll>\n</template>\n\n<script>\n  import { BaseScroll } from '@empathyco/x-components';\n\n  export default {\n    name: 'ScrollTest',\n    components: {\n      BaseScroll\n    },\n    data() {\n      return {\n        resetScrollEvents: ['UserAcceptedAQuery']\n      };\n    },\n    methods: {\n      scroll(position) {\n        console.log('scroll', position);\n      }\n    }\n  };\n</script>\n```\n\n## Vue Events:\n\n- `scroll`: the event is emitted after the user scrolls in this container. The payload is the scroll\n  top distance in pixels.\n- `scroll:direction-change`: the event is emitted when the user changes the scroll direction. The\n  payload is the new scrolling direction.\n- `scroll:at-start`: the event is emitted when the user scrolls up to the initial position of the\n  scroll.\n- `scroll:almost-at-end`: the event is emitted when the user is about to reach the bottom part of\n  the scroll.\n- `scroll:at-end`: the event is emitted when the user has reached the bottom part of the scroll.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import BaseScroll from '../../../components/scroll/base-scroll.vue';\n  import { ScrollDirection } from '../../../components/scroll/scroll.types';\n  import { scrollXModule } from '../x-module';\n  import { MainScrollId } from './scroll.const';\n\n  /**\n   * Scrollable container that emits scroll related X Events. It exposes all the listeners\n   * and props from the {@link BaseScroll} component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)],\n    components: { BaseScroll }\n  })\n  export default class Scroll extends Vue {\n    /**\n     * Id to identify the component.\n     *\n     * @public\n     */\n    @Prop({ default: MainScrollId })\n    public id!: string;\n\n    /**\n     * Emits the `UserScrolled` event.\n     *\n     * @param position - The new position of scroll.\n     * @internal\n     */\n    protected emitScroll(position: number): void {\n      this.$x.emit('UserScrolled', position, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the `UserChangedScrollDirection` event when the scrolling direction has changed.\n     *\n     * @param direction - The new direction of scroll.\n     * @internal\n     */\n    protected emitScrollDirectionChange(direction: ScrollDirection): void {\n      this.$x.emit('UserChangedScrollDirection', direction, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserReachedScrollStart' event when the user reaches the start.\n     *\n     * @param isAtStart - A boolean indicating if the scroll is at the ending position.\n     * @internal\n     */\n    protected emitScrollAtStart(isAtStart: boolean): void {\n      this.$x.emit('UserReachedScrollStart', isAtStart, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserAlmostReachedScrollEnd' event when the user is about to reach to end.\n     *\n     * @param isAlmostAtEnd - A boolean indicating if the scroll is almost at its ending position.\n     * @internal\n     */\n    protected emitScrollAlmostAtEnd(isAlmostAtEnd: boolean): void {\n      this.$x.emit('UserAlmostReachedScrollEnd', isAlmostAtEnd, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserReachedScrollEnd' event when the user is about to reach to end.\n     *\n     * @param isAtEnd - A boolean indicating if the scroll is at the ending position.\n     * @internal\n     */\n    protected emitScrollAtEnd(isAtEnd: boolean): void {\n      this.$x.emit('UserReachedScrollEnd', isAtEnd, this.createEventMetadata());\n    }\n\n    /**\n     * Creates a {@link WireMetadata} metadata object for all the emitted events.\n     *\n     * @internal\n     * @returns A new {@link WireMetadata} object.\n     */\n    protected createEventMetadata(): Partial<WireMetadata> {\n      return { target: this.$el as HTMLElement, id: this.id };\n    }\n\n    /**\n     * Scrolls to initial position when the user has clicked the scroll to top button.\n     *\n     * @param scrollId - {@link XEventsTypes.UserClickedScrollToTop}.\n     * @internal\n     */\n    @XOn('UserClickedScrollToTop')\n    scrollToTop(scrollId: string): void {\n      if (scrollId === this.id && this.$el) {\n        this.$el?.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    }\n  }\n","<template>\n  <BaseScroll\n    @scroll=\"emitScroll\"\n    @scroll:direction-change=\"emitScrollDirectionChange\"\n    @scroll:at-start=\"emitScrollAtStart\"\n    @scroll:almost-at-end=\"emitScrollAlmostAtEnd\"\n    @scroll:at-end=\"emitScrollAtEnd\"\n    v-on=\"$listeners\"\n    :id=\"id\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </BaseScroll>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import BaseScroll from '../../../components/scroll/base-scroll.vue';\n  import { ScrollDirection } from '../../../components/scroll/scroll.types';\n  import { scrollXModule } from '../x-module';\n  import { MainScrollId } from './scroll.const';\n\n  /**\n   * Scrollable container that emits scroll related X Events. It exposes all the listeners\n   * and props from the {@link BaseScroll} component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)],\n    components: { BaseScroll }\n  })\n  export default class Scroll extends Vue {\n    /**\n     * Id to identify the component.\n     *\n     * @public\n     */\n    @Prop({ default: MainScrollId })\n    public id!: string;\n\n    /**\n     * Emits the `UserScrolled` event.\n     *\n     * @param position - The new position of scroll.\n     * @internal\n     */\n    protected emitScroll(position: number): void {\n      this.$x.emit('UserScrolled', position, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the `UserChangedScrollDirection` event when the scrolling direction has changed.\n     *\n     * @param direction - The new direction of scroll.\n     * @internal\n     */\n    protected emitScrollDirectionChange(direction: ScrollDirection): void {\n      this.$x.emit('UserChangedScrollDirection', direction, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserReachedScrollStart' event when the user reaches the start.\n     *\n     * @param isAtStart - A boolean indicating if the scroll is at the ending position.\n     * @internal\n     */\n    protected emitScrollAtStart(isAtStart: boolean): void {\n      this.$x.emit('UserReachedScrollStart', isAtStart, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserAlmostReachedScrollEnd' event when the user is about to reach to end.\n     *\n     * @param isAlmostAtEnd - A boolean indicating if the scroll is almost at its ending position.\n     * @internal\n     */\n    protected emitScrollAlmostAtEnd(isAlmostAtEnd: boolean): void {\n      this.$x.emit('UserAlmostReachedScrollEnd', isAlmostAtEnd, this.createEventMetadata());\n    }\n\n    /**\n     * Emits the 'UserReachedScrollEnd' event when the user is about to reach to end.\n     *\n     * @param isAtEnd - A boolean indicating if the scroll is at the ending position.\n     * @internal\n     */\n    protected emitScrollAtEnd(isAtEnd: boolean): void {\n      this.$x.emit('UserReachedScrollEnd', isAtEnd, this.createEventMetadata());\n    }\n\n    /**\n     * Creates a {@link WireMetadata} metadata object for all the emitted events.\n     *\n     * @internal\n     * @returns A new {@link WireMetadata} object.\n     */\n    protected createEventMetadata(): Partial<WireMetadata> {\n      return { target: this.$el as HTMLElement, id: this.id };\n    }\n\n    /**\n     * Scrolls to initial position when the user has clicked the scroll to top button.\n     *\n     * @param scrollId - {@link XEventsTypes.UserClickedScrollToTop}.\n     * @internal\n     */\n    @XOn('UserClickedScrollToTop')\n    scrollToTop(scrollId: string): void {\n      if (scrollId === this.id && this.$el) {\n        this.$el?.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nThe Scroll is a component that wraps the BaseScroll and provides it for a unique id.\n\n### Customized usage\n\n#### Overriding the properties\n\nIt renders an element with scroll, with the content passed in the `default slot`.\n\n```vue\n<template>\n  <Scroll id=\"exampleScrollId\" throttleMs=\"50\" distanceToBottom=\"300\">\n    <div class=\"content-scroll\">\n      <span>content1</span>\n      <span>content1</span>\n    </div>\n  </Scroll>\n</template>\n\n<script>\n  import { Scroll } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'ScrollIdTest',\n    components: {\n      Scroll\n    }\n  };\n</script>\n```\n\n#### Using scroll events.\n\n```vue\n<template>\n  <Scroll\n    @scroll=\"scroll\"\n    @scroll:direction-change=\"scrollDirectionChange\"\n    @scroll:at-start=\"scrollAtStart\"\n    @scroll:almost-at-end=\"scrollAlmostAtEnd\"\n    @scroll:at-end=\"scrollAtEnd\"\n    id=\"exampleScrollId\"\n    throttleMs=\"50\"\n    distanceToBottom=\"300\"\n  >\n    <div class=\"content-scroll\">\n      <span>content1</span>\n      <span>content1</span>\n    </div>\n  </Scroll>\n</template>\n\n<script>\n  import { Scroll } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'ScrollIdTest',\n    components: {\n      Scroll\n    },\n    methods: {\n      scroll(position) {\n        console.log('scroll', position);\n      },\n      scrollDirectionChange(direction) {\n        console.log('scroll:direction-change', direction);\n      },\n      scrollAtStart(isAtStart) {\n        console.log('scroll:at-start', isAtStart);\n      },\n      scrollAlmostAtEnd(isAlmostAtEnd) {\n        console.log('scroll:almost-at-end', isAlmostAtEnd);\n      },\n      scrollAtEnd(isAtEnd) {\n        console.log('scroll:at-end', isAtEnd);\n      }\n    }\n  };\n</script>\n```\n\n#### Using XEvents.\n\nYou can use the XEvents subscribing to them.\n\n```vue\n<template>\n  <Scroll throttleMs=\"50\" distanceToBottom=\"300\">\n    <div class=\"content-scroll\">\n      <span>content1</span>\n      <span>content1</span>\n    </div>\n  </Scroll>\n</template>\n\n<script>\n  import { Scroll } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'ScrollIdTest',\n    components: {\n      Scroll\n    },\n    mounted() {\n      this.$x.on('UserScrolled').subscribe(distance => {\n        console.log(distance);\n      });\n      this.$x.on('UserChangedScrollDirection').subscribe(direction => {\n        console.log(direction);\n      });\n      this.$x.on('UserReachedScrollStart').subscribe(isAtStart => {\n        console.log(isAtStart);\n      });\n      this.$x.on('UserAlmostReachedScrollEnd').subscribe(isAlmostAtEnd => {\n        console.log(isAlmostAtEnd);\n      });\n      this.$x.on('UserReachedScrollEnd').subscribe(isAtEnd => {\n        console.log(isAtEnd);\n      });\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserScrolled`: emitted after the user scrolls in this container. The payload is the scroll top\n  distance in pixels.\n- `UserChangedScrollDirection`: emitted when the user changes the scroll direction. The payload is\n  the new scrolling direction.\n- `UserReachedScrollStart`: emitted when the user scrolls up to the initial position of the scroll.\n- `UserAlmostReachedScrollEnd`: emitted when the user is about to reach the bottom part of the\n  scroll.\n- `UserReachedScrollEnd`: emitted when the user has reached the bottom part of the scroll.\n</docs>\n","import { DefineComponent, PropType } from 'vue';\n\n/**\n * Type for animations props.\n *\n * @public\n */\nexport const AnimationProp = [String, Object, Function] as PropType<DefineComponent | string>;\n","<template>\n  <component :is=\"animation\">\n    <div v-if=\"open\" class=\"x-toggle-panel\" data-test=\"base-toggle-panel\">\n      <!-- @slot (Required) Default content -->\n      <slot />\n    </div>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { AnimationProp } from '../../types/animation-prop';\n\n  /**\n   * Simple panel that receives its open state via prop, which is responsible of rendering\n   * default slot inside a configurable transition.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * Handles if the panel is rendered. It is used with v-if instead of v-show to get better\n       * performance.\n       *\n       * @public\n       */\n      open: {\n        type: Boolean,\n        required: true\n      },\n      /**\n       * Animation component that will be used to animate the panel content.\n       *\n       * @public\n       */\n      animation: {\n        type: AnimationProp,\n        default: 'div'\n      }\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nSimple panel that receives its open state via prop, which is responsible of rendering default slot\ninside a configurable transition.\n\n### Basic usage\n\nUsing default slot:\n\n```vue\n<BaseTogglePanel :open=\"true\" :animation=\"collapseFromTop\">\n  <Filters :filters=\"filters\">\n    <template #default=\"{ filter }\">\n      <p>{{ filter.label }}</p>\n    </template>\n  </Filters>\n</BaseTogglePanel>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { AnimationProp } from '../../types/animation-prop';\n\n  /**\n   * Simple panel that receives its open state via prop, which is responsible of rendering\n   * default slot inside a configurable transition.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * Handles if the panel is rendered. It is used with v-if instead of v-show to get better\n       * performance.\n       *\n       * @public\n       */\n      open: {\n        type: Boolean,\n        required: true\n      },\n      /**\n       * Animation component that will be used to animate the panel content.\n       *\n       * @public\n       */\n      animation: {\n        type: AnimationProp,\n        default: 'div'\n      }\n    }\n  });\n","<template>\n  <BaseEventButton\n    v-on=\"$listeners\"\n    :events=\"events\"\n    class=\"x-events-modal-close-button x-button\"\n    data-test=\"close-modal\"\n    aria-label=\"Close\"\n  >\n    <!-- @slot (Required) Button content with a text, an icon or both -->\n    <slot />\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import { computed, defineComponent, PropType } from 'vue';\n  import { PropsWithType } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import BaseEventButton from '../base-event-button.vue';\n\n  /**\n   * Component contains an event button that emits {@link\n   * XEventsTypes.UserClickedCloseEventsModal}\n   * when clicked. It has a default slot to customize its contents.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventButton\n    },\n    props: {\n      /**\n       * Event name to use for closing the modal.\n       *\n       * @public\n       */\n      closingEvent: {\n        type: String as PropType<PropsWithType<XEventsTypes, void>>,\n        default: 'UserClickedCloseEventsModal'\n      }\n    },\n    setup(props) {\n      const events = computed<Partial<XEventsTypes>>(() => ({ [props.closingEvent]: undefined }));\n      return {\n        events\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThe `BaseEventsModalClose` component can be used to close the `BaseEventsModal` component.\n\n### Basic example\n\nOn clicked, the component closes the `BaseEventsModal`. The only needed thing is the content that\nthe button should render, that can be any thing: a text, an image, an icon, a combination of the two\nof them...\n\n```vue\n<template>\n  <BaseEventsCloseButton>\n    <img src=\"./close-button-icon.svg\" />\n  </BaseEventsCloseButton>\n</template>\n\n<script>\n  import { BaseEventsModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseEventsModalCloseTest',\n    components: {\n      BaseEventsModalClose\n    }\n  };\n</script>\n```\n\n### Defining another event to emit when clicking the button\n\nBy default it uses the same `closingEvent` that the `BaseEventsModal` is listening by default too.\nThis event can be changed using the `closingEvent` prop.\n\n```vue\n<template>\n  <BaseEventsModalClose closingEvent=\"UserClosedEmpathize\">×</BaseEventsModalClose>\n</template>\n\n<script>\n  import { BaseEventsModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseEventsModalCloseTest',\n    components: {\n      BaseEventsModalClose\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedCloseEventsModal`: the event is emitted after the user clicks the button.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { computed, defineComponent, PropType } from 'vue';\n  import { PropsWithType } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import BaseEventButton from '../base-event-button.vue';\n\n  /**\n   * Component contains an event button that emits {@link\n   * XEventsTypes.UserClickedCloseEventsModal}\n   * when clicked. It has a default slot to customize its contents.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventButton\n    },\n    props: {\n      /**\n       * Event name to use for closing the modal.\n       *\n       * @public\n       */\n      closingEvent: {\n        type: String as PropType<PropsWithType<XEventsTypes, void>>,\n        default: 'UserClickedCloseEventsModal'\n      }\n    },\n    setup(props) {\n      const events = computed<Partial<XEventsTypes>>(() => ({ [props.closingEvent]: undefined }));\n      return {\n        events\n      };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XEvent } from '../../wiring/events.types';\n  import { XOn } from '../decorators/bus.decorators';\n  import { WireMetadata } from '../../wiring/wiring.types';\n  import { getTargetElement, isElementEqualOrContained } from '../../utils/html';\n  import BaseModal from './base-modal.vue';\n\n  /**\n   * Component containing a modal that emits a {@link XEventsTypes.UserClickedCloseEventsModal} when\n   * clicking outside the content rendered in the default slot and can receive, through the\n   * eventsToCloseModal prop, a list of {@link XEvent | xEvents} to listen to in order to close\n   * also the modal, eventsToOpenModal prop,  another list of {@link XEvent | xEvents} to customize\n   * the events to listen to open the modal and a prop, displayOverlay, to display an\n   * overlay over the rest of the html. The default slot offers the possibility to customize the\n   * modal content.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseModal }\n  })\n  export default class BaseEventsModal extends Vue {\n    /**\n     * Animation to use for opening/closing the modal.\n     */\n    @Prop()\n    public animation?: Vue | string;\n    /**\n     * Array of {@link XEvent | xEvents} to listen to open the modal.\n     */\n    @Prop({ default: (): XEvent[] => ['UserClickedOpenEventsModal'] })\n    public eventsToOpenModal!: XEvent[];\n\n    /**\n     * Array of {@link XEvent | xEvents} to listen to close the modal.\n     */\n    @Prop({\n      default: (): XEvent[] => ['UserClickedCloseEventsModal', 'UserClickedOutOfEventsModal']\n    })\n    public eventsToCloseModal!: XEvent[];\n\n    /**\n     * Event to emit when any part of the website out of the modal has been clicked.\n     */\n    @Prop({ default: 'UserClickedOutOfEventsModal' })\n    public bodyClickEvent!: XEvent;\n\n    /**\n     * Whether the modal is open or not.\n     */\n    protected isOpen = false;\n\n    /** The element that opened the modal. */\n    protected openerElement?: HTMLElement;\n\n    /**\n     * Opens the modal.\n     *\n     * @param _payload - The payload of the event that opened the modal.\n     * @param metadata - The metadata of the event that opened the modal.\n     *\n     * @internal\n     */\n    @XOn(component => (component as BaseEventsModal).eventsToOpenModal)\n    openModal(_payload: unknown, metadata: WireMetadata): void {\n      if (!this.isOpen) {\n        this.openerElement = metadata.target;\n        this.isOpen = true;\n      }\n    }\n\n    /**\n     * Closes the modal.\n     *\n     * @internal\n     */\n    @XOn(component => (component as BaseEventsModal).eventsToCloseModal)\n    closeModal(): void {\n      if (this.isOpen) {\n        this.isOpen = false;\n      }\n    }\n\n    /**\n     * Emits the event defined in the {@link BaseEventsModal.bodyClickEvent} event unless the passed\n     * event target is the button that opened the modal.\n     *\n     * @param event - The event that triggered the close attempt.\n     * @public\n     */\n    protected emitBodyClickEvent(event: MouseEvent | FocusEvent): void {\n      // Prevents clicking the open button when the panel is already open to close the panel.\n      if (\n        !this.openerElement ||\n        !isElementEqualOrContained(this.openerElement, getTargetElement(event))\n      ) {\n        this.$x.emit(this.bodyClickEvent, undefined, { target: this.$el as HTMLElement });\n      }\n    }\n  }\n","<template>\n  <BaseModal\n    @click:overlay=\"emitBodyClickEvent\"\n    @focusin:body=\"emitBodyClickEvent\"\n    :animation=\"animation\"\n    :open=\"isOpen\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </BaseModal>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XEvent } from '../../wiring/events.types';\n  import { XOn } from '../decorators/bus.decorators';\n  import { WireMetadata } from '../../wiring/wiring.types';\n  import { getTargetElement, isElementEqualOrContained } from '../../utils/html';\n  import BaseModal from './base-modal.vue';\n\n  /**\n   * Component containing a modal that emits a {@link XEventsTypes.UserClickedCloseEventsModal} when\n   * clicking outside the content rendered in the default slot and can receive, through the\n   * eventsToCloseModal prop, a list of {@link XEvent | xEvents} to listen to in order to close\n   * also the modal, eventsToOpenModal prop,  another list of {@link XEvent | xEvents} to customize\n   * the events to listen to open the modal and a prop, displayOverlay, to display an\n   * overlay over the rest of the html. The default slot offers the possibility to customize the\n   * modal content.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseModal }\n  })\n  export default class BaseEventsModal extends Vue {\n    /**\n     * Animation to use for opening/closing the modal.\n     */\n    @Prop()\n    public animation?: Vue | string;\n    /**\n     * Array of {@link XEvent | xEvents} to listen to open the modal.\n     */\n    @Prop({ default: (): XEvent[] => ['UserClickedOpenEventsModal'] })\n    public eventsToOpenModal!: XEvent[];\n\n    /**\n     * Array of {@link XEvent | xEvents} to listen to close the modal.\n     */\n    @Prop({\n      default: (): XEvent[] => ['UserClickedCloseEventsModal', 'UserClickedOutOfEventsModal']\n    })\n    public eventsToCloseModal!: XEvent[];\n\n    /**\n     * Event to emit when any part of the website out of the modal has been clicked.\n     */\n    @Prop({ default: 'UserClickedOutOfEventsModal' })\n    public bodyClickEvent!: XEvent;\n\n    /**\n     * Whether the modal is open or not.\n     */\n    protected isOpen = false;\n\n    /** The element that opened the modal. */\n    protected openerElement?: HTMLElement;\n\n    /**\n     * Opens the modal.\n     *\n     * @param _payload - The payload of the event that opened the modal.\n     * @param metadata - The metadata of the event that opened the modal.\n     *\n     * @internal\n     */\n    @XOn(component => (component as BaseEventsModal).eventsToOpenModal)\n    openModal(_payload: unknown, metadata: WireMetadata): void {\n      if (!this.isOpen) {\n        this.openerElement = metadata.target;\n        this.isOpen = true;\n      }\n    }\n\n    /**\n     * Closes the modal.\n     *\n     * @internal\n     */\n    @XOn(component => (component as BaseEventsModal).eventsToCloseModal)\n    closeModal(): void {\n      if (this.isOpen) {\n        this.isOpen = false;\n      }\n    }\n\n    /**\n     * Emits the event defined in the {@link BaseEventsModal.bodyClickEvent} event unless the passed\n     * event target is the button that opened the modal.\n     *\n     * @param event - The event that triggered the close attempt.\n     * @public\n     */\n    protected emitBodyClickEvent(event: MouseEvent | FocusEvent): void {\n      // Prevents clicking the open button when the panel is already open to close the panel.\n      if (\n        !this.openerElement ||\n        !isElementEqualOrContained(this.openerElement, getTargetElement(event))\n      ) {\n        this.$x.emit(this.bodyClickEvent, undefined, { target: this.$el as HTMLElement });\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThe `BaseEventsModal` component handles the modal open/close state via the events passed via props.\nIts configured by default to work as a modal for a whole search application, but if the events are\nchanged, it can work as a modal that is opened/closed when the events it is listening are emitted.\n\n### Basic usage\n\nThe component interacts with the open and close components, which are preconfigured by default to\nemit the same events that the `BaseEventsModal` component is listening to:\n\n```vue\n<template>\n  <div>\n    <BaseEventsModalOpen>Open</BaseEventsModalOpen>\n    <BaseEventsModal>\n      <BaseEventsModalClose>Close</BaseEventsModalClose>\n      <img src=\"success.png\" />\n    </BaseEventsModal>\n  </div>\n</template>\n\n<script>\n  import { BaseEventsModalOpen, BaseEventsModal } from '@empathyco/x-components';\n\n  export default {\n    name: 'ModalTest',\n    components: {\n      BaseEventsModalOpen,\n      BaseEventsModal\n    }\n  };\n</script>\n```\n\n### Customizing the events\n\nIf needed, the events to open/close the modal can be changed. The modal can listen one or more\nevents. To do so, the `eventsToCloseModal` and `eventsToOpenModal` props can be used. Below you can\nsee a full example on how this would work with custom events.\n\n```vue\n<template>\n  <div>\n    <BaseEventsModalOpen openingEvent=\"UserClickedOpenMyCustomModal\">Open</BaseEventsModalOpen>\n    <BaseEventsModal\n      :eventsToCloseModal=\"eventsToCloseModal\"\n      :eventsToOpenModal=\"eventsToOpenModal\"\n    >\n      <BaseEventsModalClose closingEvent=\"UserClickedCloseMyCustomModalFromHeader\">\n        Close from header\n      </BaseEventsModalClose>\n      <img src=\"success.png\" />\n      <BaseEventsModalClose closingEvent=\"UserClickedCloseMyCustomModalFromFooter\">\n        Close from footer\n      </BaseEventsModalClose>\n    </BaseEventsModal>\n  </div>\n</template>\n\n<script>\n  import {\n    BaseEventsModalOpen,\n    BaseEventsModal,\n    BaseEventsModalClose\n  } from '@empathyco/x-components';\n\n  export default {\n    name: 'ModalTest',\n    components: {\n      BaseEventsModalOpen,\n      BaseEventsModal,\n      BaseEventsModalClose\n    }\n  };\n</script>\n```\n\n### Customizing the content with classes\n\nThe `contentClass` prop can be used to add classes to the modal content.\n\n```vue\n<template>\n  <div>\n    <BaseEventsModalOpen>Open</BaseEventsModalOpen>\n    <BaseEventsModal contentClass=\"x-bg-neutral-75\">\n      <BaseEventsModalClose>Close</BaseEventsModalClose>\n      <img src=\"success.png\" />\n    </BaseEventsModal>\n  </div>\n</template>\n\n<script>\n  import { BaseEventsModalOpen, BaseEventsModal } from '@empathyco/x-components';\n\n  export default {\n    name: 'ModalTest',\n    components: {\n      BaseEventsModalOpen,\n      BaseEventsModal\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedCloseEventsModal`: the event is emitted after clicking outside the content rendered in\n  the default slot.\n- `UserClickedOutOfEventsModal`: the event is emitted after clicking outside the modal.\n- Custom events to open or close the modal.\n</docs>\n","import { getCurrentInstance } from 'vue';\nimport { XComponentAPI } from '../plugins';\n\n/**\n * Function which returns the `$x` object from the current component instance.\n *\n * @returns The `$x` object from the current component instance.\n *\n * @public\n */\nexport function use$x(): XComponentAPI {\n  return (getCurrentInstance()?.proxy as unknown as { $x: XComponentAPI }).$x;\n}\n","<template>\n  <NoElement>\n    <!--\n      @slot closing-element. It's the element that will trigger the modal closing. It's a\n      button by default.\n        @binding {Function} closeModal - The function to close the modal.\n    -->\n    <slot :closeModal=\"emitCloseModalEvent\" name=\"closing-element\">\n      <button\n        @click=\"emitCloseModalEvent\"\n        class=\"x-events-modal-id-close-button x-button\"\n        data-test=\"close-modal-id\"\n      >\n        <!-- @slot (Required) Button content with a text, an icon or both -->\n        <slot />\n      </button>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { NoElement } from '../no-element';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Component that allows to close a modal by emitting\n   * {@link XEventsTypes.UserClickedCloseModal}.\n   * It allows full customization with the 'closing-element' slot and exposes the 'closeModal'\n   * function.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      /**\n       * The modalId of the modal that will be closed.\n       *\n       * @public\n       */\n      modalId: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedCloseModal} event with the modalId as payload.\n       *\n       * @param event - The event triggering the function.\n       * @public\n       */\n      const emitCloseModalEvent = ({ target }: Event): void => {\n        $x.emit('UserClickedCloseModal', props.modalId, { target: target as HTMLElement });\n      };\n\n      return {\n        emitCloseModalEvent\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedCloseModal`: the event is emitted after the user clicks the button. The event payload\n  is the id of the modal that is going to be closed.\n\n## Examples\n\nComponent containing an event button that emits `UserClickedCloseModal` when clicked with the\nmodalId as payload. It has a default slot to customize its contents and can also be fully\ncustomized, replacing the default button with any other element.\n\n### Basic example\n\nThe component renders whatever is passed to it in the default slot inside the button and closes the\nmodal with modalId `my-modal`.\n\n```vue\n<template>\n  <BaseIdModalClose modalId=\"my-modal\">\n    <img src=\"./close-button-icon.svg\" />\n  </BaseIdModalClose>\n</template>\n\n<script>\n  import { BaseIdModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseIdModalCloseTest',\n    components: {\n      BaseIdModalClose\n    }\n  };\n</script>\n```\n\n### Replacing the default button\n\nThe component renders whatever element is passed, replacing the default button and exposing the\nfunction to close the modal with modalId `my-modal`.\n\n```vue\n<template>\n  <BaseIdModalClose modalId=\"my-modal\">\n    <template #closing-element=\"{ closeModal }\">\n      <ul>\n        <li @click=\"closeModal\">Close here</li>\n        <li>Not here</li>\n      </ul>\n    </template>\n  </BaseIdModalClose>\n</template>\n\n<script>\n  import { BaseIdModalClose } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseIdModalCloseTest',\n    components: {\n      BaseIdModalClose\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { NoElement } from '../no-element';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Component that allows to close a modal by emitting\n   * {@link XEventsTypes.UserClickedCloseModal}.\n   * It allows full customization with the 'closing-element' slot and exposes the 'closeModal'\n   * function.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      /**\n       * The modalId of the modal that will be closed.\n       *\n       * @public\n       */\n      modalId: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedCloseModal} event with the modalId as payload.\n       *\n       * @param event - The event triggering the function.\n       * @public\n       */\n      const emitCloseModalEvent = ({ target }: Event): void => {\n        $x.emit('UserClickedCloseModal', props.modalId, { target: target as HTMLElement });\n      };\n\n      return {\n        emitCloseModalEvent\n      };\n    }\n  });\n","<template>\n  <NoElement>\n    <!--\n      @slot opening-element. It's the element that will trigger the modal opening. It's a\n      button by default.\n        @binding {Function} openModal - The function to open the modal.\n    -->\n    <slot :openModal=\"emitOpenModalEvent\" name=\"opening-element\">\n      <button\n        @click=\"emitOpenModalEvent\"\n        class=\"x-events-modal-id-open-button x-button\"\n        data-test=\"open-modal-id\"\n      >\n        <!-- @slot (Required) Button content with a text, an icon or both -->\n        <slot />\n      </button>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { NoElement } from '../no-element';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Component that allows to open a modal by emitting {@link XEventsTypes.UserClickedOpenModal}\n   * with the modalId as payload. It allows full customization with the 'opening-element' slot and\n   * exposes the 'openModal' function.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { NoElement },\n    props: {\n      /**\n       * The modalId of the modal that will be opened.\n       *\n       * @public\n       */\n      modalId: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedOpenModal} event with the modalId as payload.\n       *\n       * @param event - The event triggering the function.\n       * @public\n       */\n      const emitOpenModalEvent = ({ target }: Event): void => {\n        $x.emit('UserClickedOpenModal', props.modalId, { target: target as HTMLElement });\n      };\n\n      return {\n        emitOpenModalEvent\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedOpenModal`: the event is emitted after the user clicks the button. The event payload\n  is the id of the modal that is going to be opened.\n\n## Examples\n\nComponent containing an event button that emits `UserClickedOpenModal` when it is clicked with the\nmodalId as payload. It has a default slot to customize its contents and can also be fully\ncustomized, replacing the default button with any other element.\n\n### Basic example\n\nThe component rendering content passed to the default slot inside the button and opening the modal\nwith modalId `my-modal`.\n\n```vue\n<template>\n  <BaseIdModalOpen modalId=\"my-modal\">\n    <img src=\"./open-button-icon.svg\" />\n    <span>Open</span>\n  </BaseIdModalOpen>\n</template>\n\n<script>\n  import { BaseIdModalOpen } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseIdModalOpenTest',\n    components: {\n      BaseIdModalOpen\n    }\n  };\n</script>\n```\n\n### Replacing the default button\n\nThe component renders whatever element is passed, replacing the default button and exposing the\nfunction to open the modal with modalId `my-modal`.\n\n```vue\n<template>\n  <BaseIdModalOpen modalId=\"my-modal\">\n    <template #opening-element=\"{ openModal }\">\n      <ul>\n        <li @click=\"openModal\">Open here</li>\n        <li>Not here</li>\n      </ul>\n    </template>\n  </BaseIdModalOpen>\n</template>\n\n<script>\n  import { BaseIdModalOpen } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseIdModalOpenTest',\n    components: {\n      BaseIdModalOpen\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { NoElement } from '../no-element';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Component that allows to open a modal by emitting {@link XEventsTypes.UserClickedOpenModal}\n   * with the modalId as payload. It allows full customization with the 'opening-element' slot and\n   * exposes the 'openModal' function.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { NoElement },\n    props: {\n      /**\n       * The modalId of the modal that will be opened.\n       *\n       * @public\n       */\n      modalId: {\n        type: String,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedOpenModal} event with the modalId as payload.\n       *\n       * @param event - The event triggering the function.\n       * @public\n       */\n      const emitOpenModalEvent = ({ target }: Event): void => {\n        $x.emit('UserClickedOpenModal', props.modalId, { target: target as HTMLElement });\n      };\n\n      return {\n        emitOpenModalEvent\n      };\n    }\n  });\n","<template>\n  <BaseEventsModalClose\n    v-on=\"$listeners\"\n    class=\"x-close-main-modal\"\n    data-test=\"close-main-modal\"\n    :closingEvent=\"closingEvent\"\n  >\n    <slot />\n  </BaseEventsModalClose>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { XEvent } from '../../wiring/events.types';\n  import BaseEventsModalClose from './base-events-modal-close.vue';\n\n  /**\n   * Button to close the {@link MainModal}.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventsModalClose\n    },\n    setup() {\n      /**\n       * Event to be emitted to close the {@link MainModal}.\n       *\n       * @internal\n       */\n      const closingEvent: XEvent = 'UserClickedCloseX';\n\n      return {\n        closingEvent\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserClickedCloseX`](./../../api/x-components.xeventstypes.md)\n\n## See it in action\n\nHere you have a basic example of how the close main modal button works.\n\n```vue live\n<template>\n  <div>\n    <OpenMainModal>Open X</OpenMainModal>\n    <MainModal>\n      <CloseMainModal>Close X</CloseMainModal>\n    </MainModal>\n  </div>\n</template>\n\n<script>\n  import { MainModal, CloseMainModal, OpenMainModal } from '@empathyco/x-components';\n\n  export default {\n    name: 'XModalDemo',\n    components: {\n      MainModal,\n      CloseMainModal,\n      OpenMainModal\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { XEvent } from '../../wiring/events.types';\n  import BaseEventsModalClose from './base-events-modal-close.vue';\n\n  /**\n   * Button to close the {@link MainModal}.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventsModalClose\n    },\n    setup() {\n      /**\n       * Event to be emitted to close the {@link MainModal}.\n       *\n       * @internal\n       */\n      const closingEvent: XEvent = 'UserClickedCloseX';\n\n      return {\n        closingEvent\n      };\n    }\n  });\n","<template>\n  <BaseEventsModal\n    class=\"x-main-modal\"\n    data-test=\"main-modal\"\n    :eventsToOpenModal=\"openEvents\"\n    :eventsToCloseModal=\"closeEvents\"\n    :bodyClickEvent=\"outOfModalClickEvent\"\n    :animation=\"animation\"\n    :focusOnOpen=\"focusOnOpen\"\n    v-bind=\"$attrs\"\n  >\n    <slot />\n  </BaseEventsModal>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { AnimationProp } from '../../types/animation-prop';\n  import { XEvent } from '../../wiring/events.types';\n  import BaseEventsModal from './base-events-modal.vue';\n\n  /**\n   * A specialised version of a modal component, made to contain a full search application.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventsModal\n    },\n    props: {\n      /**\n       * Animation to use for opening/closing the modal.\n       *\n       * @public\n       */\n      animation: {\n        type: AnimationProp\n      },\n      /**\n       * Determines if the focused element changes to one inside the modal when it opens. Either the\n       * first element with a positive tabindex or just the first focusable element.\n       */\n      focusOnOpen: {\n        type: Boolean,\n        default: false\n      }\n    },\n    setup() {\n      /**\n       * Events to listen for opening the main modal.\n       *\n       * @internal\n       */\n      const openEvents: XEvent[] = ['UserClickedOpenX', 'UserOpenXProgrammatically'];\n\n      /**\n       * Events to listen for closing the main modal.\n       *\n       * @internal\n       */\n      const closeEvents: XEvent[] = ['UserClickedCloseX', 'UserClickedOutOfMainModal'];\n\n      /**\n       * Event to be emitted by the modal when clicked out of its content.\n       *\n       * @internal\n       */\n      const outOfModalClickEvent: XEvent = 'UserClickedOutOfMainModal';\n\n      return {\n        openEvents,\n        closeEvents,\n        outOfModalClickEvent\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserClickedOutOfMainModal`](./../../api/x-components.xeventstypes.md)\n\n## See it in action\n\nHere you have a basic example of how the main modal works.\n\n```vue live\n<template>\n  <div>\n    <OpenMainModal>Open X</OpenMainModal>\n    <MainModal>\n      <CloseMainModal>Close X</CloseMainModal>\n    </MainModal>\n  </div>\n</template>\n\n<script>\n  import { MainModal, CloseMainModal, OpenMainModal } from '@empathyco/x-components';\n\n  export default {\n    name: 'MainModalDemo',\n    components: {\n      MainModal,\n      CloseMainModal,\n      OpenMainModal\n    }\n  };\n</script>\n```\n\n### Customizing the content with classes\n\nThe `contentClass` prop can be used to add classes to the modal content.\n\n```vue live\n<template>\n  <div>\n    <OpenMainModal>Open X</OpenMainModal>\n    <MainModal contentClass=\"x-bg-neutral-75\">\n      <CloseMainModal>Close X</CloseMainModal>\n    </MainModal>\n  </div>\n</template>\n\n<script>\n  import { MainModal, CloseMainModal, OpenMainModal } from '@empathyco/x-components';\n\n  export default {\n    name: 'MainModalDemo',\n    components: {\n      MainModal,\n      CloseMainModal,\n      OpenMainModal\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { AnimationProp } from '../../types/animation-prop';\n  import { XEvent } from '../../wiring/events.types';\n  import BaseEventsModal from './base-events-modal.vue';\n\n  /**\n   * A specialised version of a modal component, made to contain a full search application.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      BaseEventsModal\n    },\n    props: {\n      /**\n       * Animation to use for opening/closing the modal.\n       *\n       * @public\n       */\n      animation: {\n        type: AnimationProp\n      },\n      /**\n       * Determines if the focused element changes to one inside the modal when it opens. Either the\n       * first element with a positive tabindex or just the first focusable element.\n       */\n      focusOnOpen: {\n        type: Boolean,\n        default: false\n      }\n    },\n    setup() {\n      /**\n       * Events to listen for opening the main modal.\n       *\n       * @internal\n       */\n      const openEvents: XEvent[] = ['UserClickedOpenX', 'UserOpenXProgrammatically'];\n\n      /**\n       * Events to listen for closing the main modal.\n       *\n       * @internal\n       */\n      const closeEvents: XEvent[] = ['UserClickedCloseX', 'UserClickedOutOfMainModal'];\n\n      /**\n       * Event to be emitted by the modal when clicked out of its content.\n       *\n       * @internal\n       */\n      const outOfModalClickEvent: XEvent = 'UserClickedOutOfMainModal';\n\n      return {\n        openEvents,\n        closeEvents,\n        outOfModalClickEvent\n      };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { AnimationProp } from '../../types/animation-prop';\n  import { NoElement } from '../no-element';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n  import BaseTogglePanel from './base-toggle-panel.vue';\n\n  /**\n   * Toggle panel which uses the base toggle panel, adds a header and manage the\n   * open / close state of the panel.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseTogglePanel },\n    mixins: [dynamicPropsMixin(['headerClass'])]\n  })\n  export default class BaseHeaderTogglePanel extends Vue {\n    /**\n     * Animation component that will be used to animate the base-toggle-panel.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    protected animation!: typeof AnimationProp;\n    /**\n     * Handles if the panel is open by default.\n     *\n     * @public\n     */\n    @Prop({ default: false })\n    protected startCollapsed!: boolean;\n    /**\n     * Handles if the base panel is open or closed.\n     *\n     * @internal\n     */\n    protected open = !this.startCollapsed;\n    /**\n     * Toggles the open property.\n     *\n     * @internal\n     */\n    protected toggleOpen(): void {\n      this.open = !this.open;\n      this.emitOpenStatusEvent();\n    }\n    /**\n     * Emits open status event.\n     *\n     * @internal\n     */\n    protected emitOpenStatusEvent(): void {\n      this.$emit(this.open ? 'open' : 'close');\n    }\n  }\n","<template>\n  <div class=\"x-header-toggle-panel\">\n    <!-- @slot (Required) Slot that is be used for replacing the whole header. -->\n    <slot name=\"header\" v-bind=\"{ toggleOpen, open }\">\n      <!-- header-toggle-panel__header -->\n      <button\n        @click=\"toggleOpen\"\n        class=\"x-header-toggle-panel__header\"\n        :class=\"headerClass\"\n        data-test=\"toggle-panel-header\"\n      >\n        <!-- @slot (Required) Slot used to just pass the content. -->\n        <slot name=\"header-content\" v-bind=\"{ open }\"></slot>\n      </button>\n    </slot>\n\n    <BaseTogglePanel :open=\"open\" :animation=\"animation\">\n      <!-- @slot (Required) Default content. -->\n      <slot />\n    </BaseTogglePanel>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { AnimationProp } from '../../types/animation-prop';\n  import { NoElement } from '../no-element';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n  import BaseTogglePanel from './base-toggle-panel.vue';\n\n  /**\n   * Toggle panel which uses the base toggle panel, adds a header and manage the\n   * open / close state of the panel.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseTogglePanel },\n    mixins: [dynamicPropsMixin(['headerClass'])]\n  })\n  export default class BaseHeaderTogglePanel extends Vue {\n    /**\n     * Animation component that will be used to animate the base-toggle-panel.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    protected animation!: typeof AnimationProp;\n    /**\n     * Handles if the panel is open by default.\n     *\n     * @public\n     */\n    @Prop({ default: false })\n    protected startCollapsed!: boolean;\n    /**\n     * Handles if the base panel is open or closed.\n     *\n     * @internal\n     */\n    protected open = !this.startCollapsed;\n    /**\n     * Toggles the open property.\n     *\n     * @internal\n     */\n    protected toggleOpen(): void {\n      this.open = !this.open;\n      this.emitOpenStatusEvent();\n    }\n    /**\n     * Emits open status event.\n     *\n     * @internal\n     */\n    protected emitOpenStatusEvent(): void {\n      this.$emit(this.open ? 'open' : 'close');\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-header-toggle-panel__header {\n    cursor: pointer;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nToggle panel which uses the base toggle panel, adds a header and manage the open / close state of\nthe panel.\n\n### Basic usage\n\n```vue\n<BaseHeaderTogglePanel :animation=\"collapseHeight\" :start-collapsed=\"false\">\n  <template #header-content=\"{ open }\">\n    <p>Header, open: {{ open ? 'close' : 'open' }}</p>\n  </template>\n  <template>\n    <p>Default content</p>\n  </template>\n</BaseHeaderTogglePanel>\n```\n\n### Custom header\n\n```vue\n<BaseHeaderTogglePanel :animation=\"collapseHeight\" :start-collapsed=\"true\">\n  <template #header=\"{ toggleOpen, open }\">\n    <p>Header, open: {{ open ? 'close' : 'open' }}</p>\n    <button @click=\"toggleOpen\">Toggle</button>\n  </template>\n  <template>\n    <p>Default content</p>\n  </template>\n</BaseHeaderTogglePanel>\n```\n\n### Customizing default header with classes\n\nThe `headerClass` prop can be used to add classes to the header of the toggle panel.\n\n```vue\n<BaseHeaderTogglePanel\n  headerClass=\"custom-class\"\n  :animation=\"collapseHeight\"\n  :start-collapsed=\"false\"\n>\n  <template #header-content=\"{ open }\">\n    <p>Header, open: {{ open ? 'close' : 'open' }}</p>\n  </template>\n  <template>\n    <p>Default content</p>\n  </template>\n</BaseHeaderTogglePanel>\n```\n\n## Events A list of events that the component will emit: - `open`: the event is emitted after the\n\nuser clicks the element and opens it. - `close`: the event is emitted after the user clicks the\nelement and closes it.\n\n```\n\n```\n</docs>\n","<template>\n  <BaseEventButton\n    v-on=\"$listeners\"\n    :events=\"events\"\n    class=\"x-result-add-to-cart x-button\"\n    data-test=\"result-add-to-cart\"\n  >\n    <!-- @slot (Required) Button content with a text, an icon or both -->\n    <slot />\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { computed, defineComponent, PropType } from 'vue';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import BaseEventButton from '../base-event-button.vue';\n\n  /**\n   * Renders a button with a default slot. It receives the result with the data and emits\n   * {@link XEventsTypes.UserClickedResultAddToCart} to the bus on click mouse event.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseEventButton },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      }\n    },\n    setup(props) {\n      /**\n       * The events to be emitted by the button.\n       *\n       * @returns Events {@link XEventsTypes} to emit.\n       *\n       * @public\n       */\n      const events = computed<Partial<XEventsTypes>>(() => ({\n        UserClickedResultAddToCart: props.result\n      }));\n\n      return {\n        events\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nRenders a button with a default slot. It receives the result with the data and emits an event\n`UserClickedResultAddToCart` to the bus on click mouse event.\n\n### Basic example\n\nThis component is a button to emit `UserClickedResultAddToCart` whe clicked by the user\n\n```vue\n<BaseResultAddToCart :result=\"result\">\n  <img src=\"./add-to-cart.svg\" />\n  <span>Add to cart</span>\n</BaseResultAddToCart>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedResultAddToCart`: the event is emitted after the user clicks the button. The event\n  payload is the result data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { computed, defineComponent, PropType } from 'vue';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import BaseEventButton from '../base-event-button.vue';\n\n  /**\n   * Renders a button with a default slot. It receives the result with the data and emits\n   * {@link XEventsTypes.UserClickedResultAddToCart} to the bus on click mouse event.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseEventButton },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      }\n    },\n    setup(props) {\n      /**\n       * The events to be emitted by the button.\n       *\n       * @returns Events {@link XEventsTypes} to emit.\n       *\n       * @public\n       */\n      const events = computed<Partial<XEventsTypes>>(() => ({\n        UserClickedResultAddToCart: props.result\n      }));\n\n      return {\n        events\n      };\n    }\n  });\n","<template>\n  <div :class=\"dynamicClasses\" class=\"x-result-current-price\" data-test=\"result-current-price\">\n    <!--\n      @slot Base currency item\n          @binding {result} result - Result data\n    -->\n    <slot :result=\"result\">\n      <BaseCurrency :value=\"result.price.value\" :format=\"format\" />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { computed, defineComponent, PropType } from 'vue';\n  import { VueCSSClasses } from '../../utils/types';\n  import BaseCurrency from '../currency/base-currency.vue';\n\n  /**\n   * Component that renders the {@link @empathyco/x-types#Result | result} current price\n   * that may or may not be on sale.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n      /**\n       * Format or mask to be defined as string.\n       * - Use 'i' to define integer numbers.\n       * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n       * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\n       * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n       * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n       * than one character.\n       * - Set whatever you need around the integers and decimals marks.\n       * - Default mask: 'i.iii,dd' which returns '1.345,67'.\n       *\n       * @remarks The number of 'd', which is the maximum decimal length, MUST match with the length\n       * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n       * part, delete significant digits.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    },\n    setup(props) {\n      /**\n       * Dynamic CSS classes to add to the root element of this component.\n       *\n       * @returns A booleans dictionary where each key is the class name to add,\n       * and the boolean value tells if it should be added or not.\n       * @internal\n       */\n      const dynamicClasses = computed<VueCSSClasses>(() => ({\n        'x-result-current-price--on-sale': props.result.price?.hasDiscount ?? false\n      }));\n\n      return {\n        dynamicClasses\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThis component shows the current price formatted. You can provide the `format` by property or let\nthe `BaseCurrency` component use an injected one.\n\n```vue\n<BaseResultCurrentPrice :value=\"result\" :format=\"'i.iii,ddd €'\" />\n```\n\n### Overriding default slot\n\n```vue\n<BaseResultCurrentPrice :result=\"result\">\n  <span class=\"custom-base-result-current-price\">{{ result.price.value }}</span>\n</BaseResultCurrentPrice>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { computed, defineComponent, PropType } from 'vue';\n  import { VueCSSClasses } from '../../utils/types';\n  import BaseCurrency from '../currency/base-currency.vue';\n\n  /**\n   * Component that renders the {@link @empathyco/x-types#Result | result} current price\n   * that may or may not be on sale.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n      /**\n       * Format or mask to be defined as string.\n       * - Use 'i' to define integer numbers.\n       * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n       * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\n       * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n       * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n       * than one character.\n       * - Set whatever you need around the integers and decimals marks.\n       * - Default mask: 'i.iii,dd' which returns '1.345,67'.\n       *\n       * @remarks The number of 'd', which is the maximum decimal length, MUST match with the length\n       * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n       * part, delete significant digits.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    },\n    setup(props) {\n      /**\n       * Dynamic CSS classes to add to the root element of this component.\n       *\n       * @returns A booleans dictionary where each key is the class name to add,\n       * and the boolean value tells if it should be added or not.\n       * @internal\n       */\n      const dynamicClasses = computed<VueCSSClasses>(() => ({\n        'x-result-current-price--on-sale': props.result.price?.hasDiscount ?? false\n      }));\n\n      return {\n        dynamicClasses\n      };\n    }\n  });\n","import { DefineComponent, PropType } from 'vue';\n\nexport const animationProp = [String, Object, Function] as PropType<DefineComponent | string>;\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { computed, DefineComponent, defineComponent, PropType, Ref, ref, watch } from 'vue';\n  import { NoElement } from '../no-element';\n  import { animationProp } from '../../utils/options-api';\n\n  /**\n   * Component to be reused that renders an `<img>`.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n\n      /**\n       * Animation to use when switching between the placeholder, the loaded image, or the failed\n       * image fallback.\n       *\n       * @public\n       */\n      loadAnimation: {\n        type: animationProp,\n        default: () => NoElement\n      },\n\n      /**\n       * Animation to use when switching between the loaded image and the hover image.\n       *\n       * @public\n       */\n      hoverAnimation: {\n        type: animationProp\n      },\n\n      /**\n       * Indicates if the next valid image should be displayed on hover.\n       *\n       * @public\n       */\n      showNextImageOnHover: {\n        type: Boolean,\n        default: false\n      }\n    },\n\n    setup(props) {\n      /**\n       * Copy of the images of the result.\n       *\n       * It is used as a queue of images to load, once an image loads/fails to load, it is removed\n       * from this array.\n       *\n       * @internal\n       */\n      const pendingImages: Ref<string[]> = ref([]);\n\n      /**\n       * Contains the images that have been loaded successfully.\n       *\n       * @internal\n       */\n      const loadedImages: Ref<string[]> = ref([]);\n\n      /**\n       * Indicates if the user is hovering the image.\n       *\n       * @internal\n       */\n      const isHovering = ref(false);\n\n      /**\n       * Indicates if the user has hovered the image.\n       *\n       * @internal\n       */\n      const userHasHoveredImage = ref(false);\n\n      /**.\n       * Styles to use inline in the image loader, to prevent override from CSS\n       *\n       * @internal\n       */\n      const loaderStyles: Partial<CSSStyleDeclaration> = {\n        position: 'absolute !important',\n        top: '0 !important',\n        left: '0 !important',\n        width: '100% !important',\n        height: '100% !important',\n        pointerEvents: 'none !important',\n        visibility: 'hidden !important'\n      };\n\n      /**\n       * Initializes images state and resets when the result's images change.\n       *\n       * @internal\n       */\n      watch(\n        () => props.result.images,\n        () => {\n          pendingImages.value = [...(props.result.images ?? [])];\n          loadedImages.value = pendingImages.value.filter(image =>\n            loadedImages.value.includes(image)\n          );\n        },\n        { immediate: true }\n      );\n\n      /**\n       * Animation to be used.\n       *\n       * @returns The animation to be used, taking into account if the user has hovered the image.\n       *\n       * @internal\n       */\n      const animation = computed<DefineComponent | string>(() => {\n        return userHasHoveredImage\n          ? props.hoverAnimation ?? props.loadAnimation\n          : props.loadAnimation;\n      });\n\n      /**\n       * Gets the src from the result image.\n       *\n       * @returns The result image src.\n       *\n       * @internal\n       */\n      const imageSrc = computed<string>(() => {\n        return loadedImages.value[\n          !props.showNextImageOnHover || !isHovering.value ? 0 : loadedImages.value.length - 1\n        ];\n      });\n\n      /**\n       * Indicates if the loader should try to load the next image.\n       *\n       * @returns True if it should try to load the next image.\n       *\n       * @internal\n       */\n      const shouldLoadNextImage = computed<boolean>(() => {\n        const numImagesToLoad = props.showNextImageOnHover && userHasHoveredImage ? 2 : 1;\n        return !!pendingImages.value.length && loadedImages.value.length < numImagesToLoad;\n      });\n\n      /**\n       * Sets an image as failed.\n       *\n       * @internal\n       */\n      const flagImageAsFailed = (): void => {\n        pendingImages.value.shift();\n      };\n\n      /**\n       * Sets an image as loaded.\n       *\n       * @internal\n       */\n      const flagImageLoaded = (): void => {\n        const image = pendingImages.value.shift();\n        if (image) {\n          loadedImages.value.push(image);\n        }\n      };\n\n      return {\n        pendingImages,\n        loadedImages,\n        isHovering,\n        userHasHoveredImage,\n        loaderStyles,\n        animation,\n        imageSrc,\n        shouldLoadNextImage,\n        flagImageAsFailed,\n        flagImageLoaded\n      };\n    }\n  });\n","<template>\n  <!-- This is a div because using a picture causes the onload event of the image to fire twice. -->\n  <!-- eslint-disable-next-line vuejs-accessibility/mouse-events-have-key-events -->\n  <div\n    @mouseenter.once=\"userHasHoveredImage = true\"\n    @mouseenter=\"isHovering = true\"\n    @mouseleave=\"isHovering = false\"\n    class=\"x-result-picture x-picture\"\n    data-test=\"result-picture\"\n  >\n    <img\n      v-if=\"shouldLoadNextImage\"\n      @load=\"flagImageLoaded\"\n      @error=\"flagImageAsFailed\"\n      loading=\"lazy\"\n      :src=\"pendingImages[0]\"\n      :style=\"loaderStyles\"\n      class=\"x-picture-image\"\n      data-test=\"result-picture-loader\"\n      alt=\"\"\n      role=\"presentation\"\n    />\n    <component :is=\"animation\" class=\"x-picture-image\" :appear=\"false\">\n      <!-- @slot Fallback image content. It will be rendered when all the images failed -->\n      <slot v-if=\"!loadedImages.length && !pendingImages.length\" name=\"fallback\" />\n\n      <!-- @slot Loading image content. It will be rendered while the real image is not loaded -->\n      <slot v-else-if=\"!loadedImages.length\" name=\"placeholder\" />\n\n      <img\n        v-else\n        :key=\"imageSrc\"\n        :alt=\"result.name\"\n        :src=\"imageSrc\"\n        class=\"x-result-picture-image\"\n        data-test=\"result-picture-image\"\n      />\n    </component>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { computed, DefineComponent, defineComponent, PropType, Ref, ref, watch } from 'vue';\n  import { NoElement } from '../no-element';\n  import { animationProp } from '../../utils/options-api';\n\n  /**\n   * Component to be reused that renders an `<img>`.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n\n      /**\n       * Animation to use when switching between the placeholder, the loaded image, or the failed\n       * image fallback.\n       *\n       * @public\n       */\n      loadAnimation: {\n        type: animationProp,\n        default: () => NoElement\n      },\n\n      /**\n       * Animation to use when switching between the loaded image and the hover image.\n       *\n       * @public\n       */\n      hoverAnimation: {\n        type: animationProp\n      },\n\n      /**\n       * Indicates if the next valid image should be displayed on hover.\n       *\n       * @public\n       */\n      showNextImageOnHover: {\n        type: Boolean,\n        default: false\n      }\n    },\n\n    setup(props) {\n      /**\n       * Copy of the images of the result.\n       *\n       * It is used as a queue of images to load, once an image loads/fails to load, it is removed\n       * from this array.\n       *\n       * @internal\n       */\n      const pendingImages: Ref<string[]> = ref([]);\n\n      /**\n       * Contains the images that have been loaded successfully.\n       *\n       * @internal\n       */\n      const loadedImages: Ref<string[]> = ref([]);\n\n      /**\n       * Indicates if the user is hovering the image.\n       *\n       * @internal\n       */\n      const isHovering = ref(false);\n\n      /**\n       * Indicates if the user has hovered the image.\n       *\n       * @internal\n       */\n      const userHasHoveredImage = ref(false);\n\n      /**.\n       * Styles to use inline in the image loader, to prevent override from CSS\n       *\n       * @internal\n       */\n      const loaderStyles: Partial<CSSStyleDeclaration> = {\n        position: 'absolute !important',\n        top: '0 !important',\n        left: '0 !important',\n        width: '100% !important',\n        height: '100% !important',\n        pointerEvents: 'none !important',\n        visibility: 'hidden !important'\n      };\n\n      /**\n       * Initializes images state and resets when the result's images change.\n       *\n       * @internal\n       */\n      watch(\n        () => props.result.images,\n        () => {\n          pendingImages.value = [...(props.result.images ?? [])];\n          loadedImages.value = pendingImages.value.filter(image =>\n            loadedImages.value.includes(image)\n          );\n        },\n        { immediate: true }\n      );\n\n      /**\n       * Animation to be used.\n       *\n       * @returns The animation to be used, taking into account if the user has hovered the image.\n       *\n       * @internal\n       */\n      const animation = computed<DefineComponent | string>(() => {\n        return userHasHoveredImage\n          ? props.hoverAnimation ?? props.loadAnimation\n          : props.loadAnimation;\n      });\n\n      /**\n       * Gets the src from the result image.\n       *\n       * @returns The result image src.\n       *\n       * @internal\n       */\n      const imageSrc = computed<string>(() => {\n        return loadedImages.value[\n          !props.showNextImageOnHover || !isHovering.value ? 0 : loadedImages.value.length - 1\n        ];\n      });\n\n      /**\n       * Indicates if the loader should try to load the next image.\n       *\n       * @returns True if it should try to load the next image.\n       *\n       * @internal\n       */\n      const shouldLoadNextImage = computed<boolean>(() => {\n        const numImagesToLoad = props.showNextImageOnHover && userHasHoveredImage ? 2 : 1;\n        return !!pendingImages.value.length && loadedImages.value.length < numImagesToLoad;\n      });\n\n      /**\n       * Sets an image as failed.\n       *\n       * @internal\n       */\n      const flagImageAsFailed = (): void => {\n        pendingImages.value.shift();\n      };\n\n      /**\n       * Sets an image as loaded.\n       *\n       * @internal\n       */\n      const flagImageLoaded = (): void => {\n        const image = pendingImages.value.shift();\n        if (image) {\n          loadedImages.value.push(image);\n        }\n      };\n\n      return {\n        pendingImages,\n        loadedImages,\n        isHovering,\n        userHasHoveredImage,\n        loaderStyles,\n        animation,\n        imageSrc,\n        shouldLoadNextImage,\n        flagImageAsFailed,\n        flagImageLoaded\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-result-picture {\n    position: relative;\n    min-width: 1px;\n    min-height: 1px;\n\n    &-image {\n      max-width: 100%;\n      max-height: 100%;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThis component is for the result image. It may be part of the search result page, recommendations or\nother section which needs to include results.\n\nThe result prop is required. It will render a `<img/>` with the result image:\n\n```vue\n<BaseResultImage :result=\"result\" />\n```\n\n### Showing the next image on hover\n\nIf a result has multiple images, it can show the next one on hover.\n\n```vue\n<BaseResultImage :result=\"result\" showNextImageOnHover />\n```\n\n### Customizing slots content\n\nFallback and placeholder contents can be customized.\n\nThe fallback slot allows you to replace the content of the fallback image.\n\nThe other slot is called `placeholder`, and allows you to set the image that its going to be\ndisplayed while the real one is loaded.\n\n```vue\n<BaseResultImage :result=\"result\">\n  <template #placeholder>\n    <img alt=\"Placeholder image\" src=\"./placeholder-image.svg\"/>\n  </template>\n  <template #fallback>\n    <img alt=\"Fallback image\" src=\"./fallback-image.svg\"/>\n  </template>\n</BaseResultImage>\n```\n\n### Customizing the animations\n\nTwo animations can be used this component.\n\nThe `loadAnimation` is used to transition between the placeholder, the fallback and the image.\n\nThe `hoverAnimation` is used to transition between the image and the hover image, if the\n`showNextImageOnHover` prop is `true`.\n\n`hoverAnimation` will default to `loadAnimation` if it is not provided.\n\n```vue\n<template>\n  <BaseResultImage\n    :result=\"result\"\n    :loadAnimation=\"loadAnimation\"\n    :hoverAnimation=\"hoverAnimation\"\n    showNextImageOnHover\n  />\n</template>\n\n<script>\n  import { BaseResultImage } from '@empathyco/x-components';\n  import { CrossFade, CollapseHeight } from '@empathyco/x-components/animations';\n\n  export default {\n    name: 'BaseResultImageAnimations',\n    components: {\n      BaseResultImage\n    },\n    data() {\n      return {\n        loadAnimation: CrossFade,\n        hoverAnimation: CollapseHeight,\n        result: {\n          name: 'jacket',\n          images: ['https://some-image', 'https://some-image-2']\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, inject, PropType, ref } from 'vue';\n  import { PropsWithType } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import { use$x } from '../../composables/index';\n  import { WireMetadata } from '../../wiring';\n\n  /**\n   * Component to be reused that renders an `<a>` wrapping the result contents.\n   *\n   * @remarks\n   * It has the logic to emit {@link XEventsTypes.UserClickedAResult} to the bus on click mouse\n   * events. Additionally, this component may be injected other events to be emitted on click\n   * event, so, depending on where it's used its father component may provide this events.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * The rendered DOM element.\n       *\n       * @internal\n       */\n      const el = ref<HTMLElement | null>();\n\n      /**\n       * The list of additional events to be emitted by the component when user clicks the link.\n       *\n       * @internal\n       */\n      const resultClickExtraEvents = inject<PropsWithType<XEventsTypes, Result>[]>(\n        'resultClickExtraEvents',\n        []\n      );\n\n      /**\n       * The metadata to be injected in the events emitted by the component. This component can emit\n       * have extra events so this record pairs each event to its metadata.\n       */\n      const resultLinkMetadataPerEvent = inject<\n        // TODO: Refactor this inject key to the constants when doing EMP-909\n        Partial<\n          Record<\n            PropsWithType<XEventsTypes, Result>,\n            Omit<WireMetadata, 'moduleName' | 'origin' | 'location'>\n          >\n        >\n      >('resultLinkMetadataPerEvent', {});\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedAResult} when user clicks on the result, and also\n       * additional events if have been injected in the component.\n       *\n       * @internal\n       */\n      const emitUserClickedAResult = (): void => {\n        $x.emit('UserClickedAResult', props.result, {\n          target: el.value!,\n          ...resultLinkMetadataPerEvent['UserClickedAResult']\n        });\n        resultClickExtraEvents.forEach(event => {\n          $x.emit(event, props.result, { target: el.value!, ...resultLinkMetadataPerEvent[event] });\n        });\n      };\n\n      return {\n        emitUserClickedAResult\n      };\n    }\n  });\n","<template>\n  <a\n    ref=\"el\"\n    @click=\"emitUserClickedAResult\"\n    @click.right=\"emitUserClickedAResult\"\n    @click.middle=\"emitUserClickedAResult\"\n    :href=\"result.url\"\n    class=\"x-result-link\"\n    data-test=\"result-link\"\n  >\n    <!--\n      @slot (Required) Link content with a text, an image, another component or both\n          @binding {Result} result - Result data\n     -->\n    <slot :result=\"result\" />\n  </a>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, inject, PropType, ref } from 'vue';\n  import { PropsWithType } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import { use$x } from '../../composables/index';\n  import { WireMetadata } from '../../wiring';\n\n  /**\n   * Component to be reused that renders an `<a>` wrapping the result contents.\n   *\n   * @remarks\n   * It has the logic to emit {@link XEventsTypes.UserClickedAResult} to the bus on click mouse\n   * events. Additionally, this component may be injected other events to be emitted on click\n   * event, so, depending on where it's used its father component may provide this events.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      /**\n       * The rendered DOM element.\n       *\n       * @internal\n       */\n      const el = ref<HTMLElement | null>();\n\n      /**\n       * The list of additional events to be emitted by the component when user clicks the link.\n       *\n       * @internal\n       */\n      const resultClickExtraEvents = inject<PropsWithType<XEventsTypes, Result>[]>(\n        'resultClickExtraEvents',\n        []\n      );\n\n      /**\n       * The metadata to be injected in the events emitted by the component. This component can emit\n       * have extra events so this record pairs each event to its metadata.\n       */\n      const resultLinkMetadataPerEvent = inject<\n        // TODO: Refactor this inject key to the constants when doing EMP-909\n        Partial<\n          Record<\n            PropsWithType<XEventsTypes, Result>,\n            Omit<WireMetadata, 'moduleName' | 'origin' | 'location'>\n          >\n        >\n      >('resultLinkMetadataPerEvent', {});\n\n      /**\n       * Emits the {@link XEventsTypes.UserClickedAResult} when user clicks on the result, and also\n       * additional events if have been injected in the component.\n       *\n       * @internal\n       */\n      const emitUserClickedAResult = (): void => {\n        $x.emit('UserClickedAResult', props.result, {\n          target: el.value!,\n          ...resultLinkMetadataPerEvent['UserClickedAResult']\n        });\n        resultClickExtraEvents.forEach(event => {\n          $x.emit(event, props.result, { target: el.value!, ...resultLinkMetadataPerEvent[event] });\n        });\n      };\n\n      return {\n        emitUserClickedAResult\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-result-link {\n    text-decoration: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following event:\n\n- [`UserClickedAResult`](x-components.xeventstypes.userclickedaresult.md)\n\nThe component can emit more events on click using the `resultClickExtraEvents` prop.\n\n## See it in action\n\nThis component is a wrapper for the result contents (images, name, price...) It may be part of the\nsearch result page, recommendations or other section which needs to include results.\n\nAdditionally, this component may be injected other events to be emitted on click event, so,\ndepending where it's used its father component may provide this events.\n\nThe result prop is required. It will render a `<a></a>` with the href to the result URL:\n\n```vue\n<BaseResultLink :result=\"result\">\n  <template #default=\"{ result }\">\n    <img :src=\"result.images[0]\"/>\n    <span>{{ result.name }}</span>\n  </template>\n</BaseResultLink>\n```\n</docs>\n","<template>\n  <div\n    v-if=\"result.price.hasDiscount\"\n    class=\"x-result-previous-price\"\n    data-test=\"result-previous-price\"\n  >\n    <!--\n      @slot Base currency item\n         @binding {result} result - Result data\n    -->\n    <slot :result=\"result\">\n      <BaseCurrency :value=\"result.price.originalValue\" :format=\"format\" />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, PropType } from 'vue';\n  import BaseCurrency from '../currency/base-currency.vue';\n\n  /**\n   * Component that renders the {@link @empathyco/x-types#Result | result} previous price.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n      /**\n       * Format or mask to be defined as string.\n       * - Use 'i' to define integer numbers.\n       * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n       * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\n       * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n       * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n       * than one character.\n       * - Set whatever you need around the integers and decimals marks.\n       *\n       * @remarks The number of 'd', which is the maximum decimal length, MUST match with the length\n       * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n       * part, delete significant digits.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThis component shows the previous price formatted if it has discount. The component has two optional\nprops. `format` to select the currency format to be applied.\n\n```vue\n<template>\n  <BaseResultPreviousPrice :result=\"result\" :format=\"'i.iii,ddd €'\" />\n</template>\n\n<script>\n  import { BaseResultPreviousPrice } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseResultPreviousPriceDemo',\n    components: {\n      BaseResultPreviousPrice\n    }\n  };\n</script>\n```\n\n### Overriding default slot\n\n```vue\n<template>\n  <BaseResultPreviousPrice :result=\"result\">\n    <span class=\"custom-base-result-previous-price\">{{ result.price.originalValue }}</span>\n  </BaseResultPreviousPrice>\n</template>\n\n<script>\n  import { BaseResultPreviousPrice } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseResultPreviousPriceDemo',\n    components: {\n      BaseResultPreviousPrice\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, PropType } from 'vue';\n  import BaseCurrency from '../currency/base-currency.vue';\n\n  /**\n   * Component that renders the {@link @empathyco/x-types#Result | result} previous price.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { BaseCurrency },\n    props: {\n      /**\n       * (Required) The {@link @empathyco/x-types#Result | result} information.\n       *\n       * @public\n       */\n      result: {\n        type: Object as PropType<Result>,\n        required: true\n      },\n      /**\n       * Format or mask to be defined as string.\n       * - Use 'i' to define integer numbers.\n       * - Use 'd' to define decimal numbers. You can define the length of the decimal part. If the\n       * doesn't include decimals, it is filled with zeros until reach the length defined with 'd's.\n       * - Integer separator must be defined between the 3rd and the 4th integer 'i' of a group.\n       * - Decimal separator must be defined between the last 'i' and the first 'd'. It can be more\n       * than one character.\n       * - Set whatever you need around the integers and decimals marks.\n       *\n       * @remarks The number of 'd', which is the maximum decimal length, MUST match with the length\n       * of decimals provided from the adapter. Otherwise, when the component truncate the decimal\n       * part, delete significant digits.\n       *\n       * @public\n       */\n      format: {\n        type: String\n      }\n    }\n  });\n","<template functional>\n  <svg\n    :class=\"[].concat(data.staticClass, data.class)\"\n    version=\"1.1\"\n    viewBox=\"0 0 256 371\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    style=\"background-color: #eef1f2\"\n  >\n    <rect height=\"371\" width=\"256\" x=\"0\" y=\"0\" fill=\"#EEF1F2\"></rect>\n    <path\n      d=\"M142.40625,0 L142.40625,13.5625 L20.34375,13.5625 C16.5983809,13.5625 13.5625,16.5983809\n      13.5625,20.34375 L13.5625,20.34375 L13.5625,159.969687 L76.628125,96.971875\n      C79.2732363,94.3424453 83.5445762,94.3424453 86.1896875,96.971875 L86.1896875,96.971875\n      L128.84375,139.625937 L164.784375,103.753125 C167.429486,101.123695 171.700826,101.123695\n      174.345938,103.753125 L174.345938,103.753125 L203.4375,132.844687 L203.4375,81.375 L217,81.375\n       L217,196.65625 C217,207.891934 207.891934,217 196.65625,217 L196.65625,217 L20.34375,217\n       C9.10806641,217 0,207.891934 0,196.65625 L0,196.65625 L0,20.34375 C0,9.10806641 9.10806641,0\n       20.34375,0 L20.34375,0 L142.40625,0 Z M62,37 C73.045625,37 82,45.954375 82,57 C82,68.045625\n       73.045625,77 62,77 C50.954375,77 42,68.045625 42,57 C42,45.954375 50.954375,37 62,37 Z\n       M211.783582,5.21641753 C213.066298,6.49913292 213.112109,8.55036201 211.921016,9.88797123\n       L211.783582,10.0335825 L191.317,30.5 L211.783582,50.9664175 C213.113806,52.2966409\n       213.113806,54.4533591 211.783582,55.7835825 C210.500867,57.0662979 208.449638,57.1121091\n       207.112029,55.9210163 L206.966418,55.7835825 L186.5,35.317 L166.033582,55.7835825\n       C164.703359,57.1138058 162.546641,57.1138058 161.216418,55.7835825 C159.933702,54.5008671\n       159.887891,52.449638 161.078984,51.1120288 L161.216418,50.9664175 L181.683,30.5\n       L161.216418,10.0335825 C159.886194,8.7033591 159.886194,6.5466409 161.216418,5.21641753\n       C162.499133,3.93370214 164.550362,3.88789087 165.887971,5.07898373 L166.033582,5.21641753\n       L186.5,25.683 L206.966418,5.21641753 C208.296641,3.88619416 210.453359,3.88619416\n       211.783582,5.21641753 Z\"\n      fill=\"#DBE2E5\"\n      fill-rule=\"nonzero\"\n      transform=\"translate(20.000000, 77.000000)\"\n    ></path>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <svg\n    :class=\"[].concat(data.staticClass, data.class)\"\n    version=\"1.1\"\n    viewBox=\"0 0 256 371\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    style=\"background-color: #eef1f2\"\n  >\n    <rect height=\"371\" width=\"256\" x=\"0\" y=\"0\" fill=\"#EEF1F2\"></rect>\n    <path\n      d=\"M162.40625,77 L162.40625,90.5625 L40.34375,90.5625 C36.5983809,90.5625 33.5625,93.5983809\n      33.5625,97.34375 L33.5625,97.34375 L33.5625,236.969687 L96.628125,173.971875\n      C99.2732363,171.342445 103.544576,171.342445 106.189687,173.971875 L106.189687,173.971875\n      L148.84375,216.625937 L184.784375,180.753125 C187.429486,178.123695 191.700826,178.123695\n      194.345938,180.753125 L194.345938,180.753125 L223.4375,209.844687 L223.4375,158.375\n      L237,158.375 L237,273.65625 C237,284.891934 227.891934,294 216.65625,294 L216.65625,294\n      L40.34375,294 C29.1080664,294 20,284.891934 20,273.65625 L20,273.65625 L20,97.34375\n      C20,86.1080664 29.1080664,77 40.34375,77 L40.34375,77 L162.40625,77 Z M82,114\n      C93.045625,114 102,122.954375 102,134 C102,145.045625 93.045625,154 82,154 C70.954375,154\n      62,145.045625 62,134 C62,122.954375 70.954375,114 82,114 Z M175.444623,100.396089\n      L183.687219,108.661381 C184.620423,109.602859 184.620423,111.123422 183.680918,112.077314\n      C182.737148,113.018189 181.212972,113.018189 180.26465,112.073775 L180.26465,112.073775\n      L177.727,109.527 L177.745354,109.644062 C179.677469,121.418749 189.812727,130.462066\n      202.047328,130.661575 L202.047328,130.661575 L202.460517,130.664942 C209.153157,130.664942\n      215.436777,128.056193 220.174617,123.31173 C221.12269,122.361456 222.670209,122.361776\n      223.58594,123.311542 C224.527282,124.25405 224.527282,125.78338 223.586285,126.726562\n      C217.94114,132.382374 210.431948,135.5 202.451652,135.5 C187.460762,135.5 174.984785,124.35392\n       172.907406,109.825508 L172.907406,109.825508 L172.902,109.787 L170.627234,112.068625\n       C170.216136,112.485215 169.674234,112.730073 169.104127,112.774878 L169.104127,112.774878\n       L168.913187,112.782365 C168.276718,112.782365 167.658303,112.532522 167.207809,112.075026\n       C166.263587,111.129629 166.263587,109.597657 167.206898,108.658263 L167.206898,108.658263\n       L175.444623,100.396089 Z M202.54801,75.5 C217.536718,75.5 230.012345,86.6439604\n       232.093604,101.171817 L232.093604,101.171817 L232.098,101.21 L234.379146,98.9226859\n       C235.281116,98.0234824 236.717815,97.9826095 237.660635,98.8020572 L237.660635,98.8020572\n       L237.791853,98.9249739 C238.734405,99.8686992 238.736601,101.398026 237.795291,102.341522\n       L237.795291,102.341522 L229.557794,110.600807 L221.31437,102.338232 C220.381166,101.396755\n       220.381166,99.876192 221.320671,98.9222996 C222.265013,97.9808537 223.794144,97.9808537\n       224.736486,98.9253846 L224.736486,98.9253846 L227.277,101.473 L227.259636,101.355612\n       C225.324141,89.5799272 215.187742,80.5375269 202.954224,80.3380384 L202.954224,80.3380384\n       L202.541072,80.3346719 C195.847619,80.3346719 189.562063,82.9439869 184.830962,87.683869\n       C183.887384,88.6368031 182.34531,88.6368031 181.414841,87.6918832 C180.466611,86.7485972\n       180.466611,85.2139736 181.411064,84.2734376 C187.057027,78.6168059 194.564245,75.5\n       202.54801,75.5 Z\"\n      fill=\"#DBE2E5\"\n      fill-rule=\"nonzero\"\n    ></path>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { normalizeString } from '../utils/normalize';\n  import { VueCSSClasses } from '../utils/types';\n  import { NoElement } from './no-element';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * Highlights the given part of the text. The component is smart enough to do matches\n   * between special characters like tilde, cedilla, eñe, capital letters...\n   *\n   * @public\n   */\n  @Component({\n    components: { NoElement }\n  })\n  export default class Highlight extends Mixins(\n    dynamicPropsMixin(['noMatchClass', 'matchingPartClass'])\n  ) {\n    /**\n     * The text to highlight some part of it.\n     *\n     * @public\n     */\n    @Prop({ default: '' })\n    public text!: string;\n\n    /**\n     * The part of the text to be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: '' })\n    public highlight!: string;\n\n    /**\n     * CSS Class to add when the `text` string contains the `highlight` string.\n     */\n    @Prop({ default: '' })\n    public matchClass!: string;\n\n    /**\n     * Checks if the normalized suggestion query matches with the module's query, so it has a\n     * matching part.\n     *\n     * @returns True if there is a match between the text and the highlight strings.\n     * @internal\n     */\n    protected get hasMatch(): boolean {\n      return !!this.matchParts.match;\n    }\n\n    /**\n     * CSS classes to add depending on the component state.\n     *\n     * @remarks\n     * `x-highlight--has-match`: When there is a match between the text and the part to highlight.\n     * `[matchClass]`: When there is a match between the text and\n     * the part to highlight.\n     * `[noMatchClass]`: when there is no match between the text to highlight.\n     * @returns The {@link VueCSSClasses} classes.\n     * @internal\n     */\n    protected get dynamicCSSClasses(): VueCSSClasses {\n      const classes: VueCSSClasses = {\n        'x-highlight--has-match': this.hasMatch,\n        'x-highlight-text': this.hasMatch,\n        [this.matchClass]: this.hasMatch\n      };\n      if (this.noMatchClass) {\n        classes[this.noMatchClass] = !this.hasMatch;\n      }\n      return classes;\n    }\n\n    /**\n     * Splits the text to highlight into 3 parts: a starting part, the matching part\n     * and the ending part. If there is no match between the text and the highlight, the `start`\n     * property will contain the whole text.\n     *\n     * @returns An object containing the different parts of the text.\n     * @internal\n     */\n    protected get matchParts(): HighlightMatch {\n      const matcherIndex = normalizeString(this.text).indexOf(normalizeString(this.highlight));\n      return matcherIndex !== -1 && this.highlight\n        ? this.splitAt(this.text.trim(), matcherIndex, matcherIndex + this.highlight.trim().length)\n        : { start: this.text, match: '', end: '' };\n    }\n\n    /**\n     * Splits the label in three parts based on two indexes.\n     *\n     * @param label - The string that will be divided in three parts.\n     * @param start - The first index that the label will be divided by.\n     * @param end - The second index that the label will be divided by.\n     *\n     * @returns The three parts of the divided label.\n     * @internal\n     */\n    protected splitAt(label: string, start: number, end: number): HighlightMatch {\n      return {\n        start: label.substring(0, start),\n        match: label.substring(start, end),\n        end: label.substring(end)\n      };\n    }\n  }\n\n  /**\n   * Contains the different parts of a string match.\n   */\n  interface HighlightMatch {\n    /**\n     * When the match does not happen from the beginning of the string, the initial unmatched\n     * part.\n     */\n    start: string;\n    /**\n     * The part of the text that is matching.\n     */\n    match: string;\n    /**\n     * When the match does not extend until the end, the remaining unmatched string.\n     */\n    end: string;\n  }\n","<template>\n  <NoElement>\n    <slot v-bind=\"{ text, hasMatch, ...matchParts }\">\n      <span class=\"x-highlight\" :class=\"dynamicCSSClasses\">\n        <span\n          v-if=\"matchParts.start\"\n          v-text=\"matchParts.start\"\n          class=\"x-highlight__text\"\n          data-test=\"highlight-start\"\n        />\n        <span\n          v-if=\"hasMatch\"\n          v-text=\"matchParts.match\"\n          class=\"x-highlight__text x-highlight-text-match\"\n          :class=\"matchingPartClass\"\n          data-test=\"matching-part\"\n        />\n        <span\n          v-if=\"matchParts.end\"\n          v-text=\"matchParts.end\"\n          class=\"x-highlight__text\"\n          data-test=\"highlight-end\"\n        />\n      </span>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { normalizeString } from '../utils/normalize';\n  import { VueCSSClasses } from '../utils/types';\n  import { NoElement } from './no-element';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * Highlights the given part of the text. The component is smart enough to do matches\n   * between special characters like tilde, cedilla, eñe, capital letters...\n   *\n   * @public\n   */\n  @Component({\n    components: { NoElement }\n  })\n  export default class Highlight extends Mixins(\n    dynamicPropsMixin(['noMatchClass', 'matchingPartClass'])\n  ) {\n    /**\n     * The text to highlight some part of it.\n     *\n     * @public\n     */\n    @Prop({ default: '' })\n    public text!: string;\n\n    /**\n     * The part of the text to be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: '' })\n    public highlight!: string;\n\n    /**\n     * CSS Class to add when the `text` string contains the `highlight` string.\n     */\n    @Prop({ default: '' })\n    public matchClass!: string;\n\n    /**\n     * Checks if the normalized suggestion query matches with the module's query, so it has a\n     * matching part.\n     *\n     * @returns True if there is a match between the text and the highlight strings.\n     * @internal\n     */\n    protected get hasMatch(): boolean {\n      return !!this.matchParts.match;\n    }\n\n    /**\n     * CSS classes to add depending on the component state.\n     *\n     * @remarks\n     * `x-highlight--has-match`: When there is a match between the text and the part to highlight.\n     * `[matchClass]`: When there is a match between the text and\n     * the part to highlight.\n     * `[noMatchClass]`: when there is no match between the text to highlight.\n     * @returns The {@link VueCSSClasses} classes.\n     * @internal\n     */\n    protected get dynamicCSSClasses(): VueCSSClasses {\n      const classes: VueCSSClasses = {\n        'x-highlight--has-match': this.hasMatch,\n        'x-highlight-text': this.hasMatch,\n        [this.matchClass]: this.hasMatch\n      };\n      if (this.noMatchClass) {\n        classes[this.noMatchClass] = !this.hasMatch;\n      }\n      return classes;\n    }\n\n    /**\n     * Splits the text to highlight into 3 parts: a starting part, the matching part\n     * and the ending part. If there is no match between the text and the highlight, the `start`\n     * property will contain the whole text.\n     *\n     * @returns An object containing the different parts of the text.\n     * @internal\n     */\n    protected get matchParts(): HighlightMatch {\n      const matcherIndex = normalizeString(this.text).indexOf(normalizeString(this.highlight));\n      return matcherIndex !== -1 && this.highlight\n        ? this.splitAt(this.text.trim(), matcherIndex, matcherIndex + this.highlight.trim().length)\n        : { start: this.text, match: '', end: '' };\n    }\n\n    /**\n     * Splits the label in three parts based on two indexes.\n     *\n     * @param label - The string that will be divided in three parts.\n     * @param start - The first index that the label will be divided by.\n     * @param end - The second index that the label will be divided by.\n     *\n     * @returns The three parts of the divided label.\n     * @internal\n     */\n    protected splitAt(label: string, start: number, end: number): HighlightMatch {\n      return {\n        start: label.substring(0, start),\n        match: label.substring(start, end),\n        end: label.substring(end)\n      };\n    }\n  }\n\n  /**\n   * Contains the different parts of a string match.\n   */\n  interface HighlightMatch {\n    /**\n     * When the match does not happen from the beginning of the string, the initial unmatched\n     * part.\n     */\n    start: string;\n    /**\n     * The part of the text that is matching.\n     */\n    match: string;\n    /**\n     * When the match does not extend until the end, the remaining unmatched string.\n     */\n    end: string;\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits no events.\n\n## See it in action\n\nHere you have a basic example of how the highlight component is rendered.\n\n_Type any term in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <input v-model=\"highlight\" />\n    <Highlight :highlight=\"highlight\" text=\"milanesa\" />\n  </div>\n</template>\n\n<script>\n  import { Highlight } from '@empathyco/x-components';\n\n  export default {\n    name: 'HighlightDemo',\n    components: {\n      Highlight\n    },\n    data() {\n      return {\n        highlight: ''\n      };\n    }\n  };\n</script>\n```\n\n### Customise the layout\n\nThis component allows to customise the whole layout. Be careful as due to Vue 2 limitations you can\nonly render a single root element.\n\n```vue live\n<template>\n  <div>\n    <input v-model=\"highlight\" />\n    <Highlight\n      :highlight=\"highlight\"\n      text=\"Entraña\"\n      #default=\"{ hasMatch, start, match, end, text }\"\n    >\n      <span class=\"custom-layout\" v-if=\"hasMatch\">\n        <strong>{{ start }}</strong>\n        {{ match }}\n        <strong>{{ end }}</strong>\n      </span>\n      <span v-else>{{ text }}</span>\n    </Highlight>\n  </div>\n</template>\n\n<script>\n  import { Highlight } from '@empathyco/x-components';\n\n  export default {\n    name: 'HighlightDemo',\n    components: {\n      Highlight\n    },\n    data() {\n      return {\n        highlight: 'entran'\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BooleanFilter, Suggestion } from '@empathyco/x-types';\n  import { forEach } from '@empathyco/x-utils';\n  import { computed, defineComponent, PropType, ref } from 'vue';\n  import { QueryFeature } from '../../types';\n  import { VueCSSClasses } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import Highlight from '../highlight.vue';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Renders a button with a default slot. It receives a query, which should be the query of the\n   * module using this component, a suggestion, the {@link XEvent | XEvents} that will be emitted\n   * on click with a given feature.\n   *\n   * The default slot receives the suggestion and the matched query has props.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { Highlight },\n    props: {\n      /**\n       * The normalized query of the module using this component.\n       *\n       * @public\n       */\n      query: {\n        type: String,\n        default: ''\n      },\n\n      /**\n       * The suggestion to render and use in the default slot.\n       *\n       * @public\n       */\n      suggestion: {\n        type: Object as PropType<Suggestion>,\n        required: true\n      },\n\n      /**\n       * The feature from which the events will be emitted.\n       *\n       * @public\n       */\n      //TODO: set to true when the suggestions components pass it.\n      feature: {\n        type: String as PropType<QueryFeature>\n      },\n\n      /**\n       * The {@link XEvent | XEvents} that will be emitted when selecting a suggestion.\n       *\n       * @public\n       */\n      suggestionSelectedEvents: {\n        type: Object as PropType<Partial<XEventsTypes>>,\n        required: true\n      },\n\n      /**\n       * Indicates if the curated suggestion should be highlighted.\n       *\n       * @public\n       */\n      highlightCurated: {\n        type: Boolean\n      }\n    },\n\n    setup(props) {\n      const el = ref<HTMLElement | null>(null);\n\n      const $x = use$x();\n\n      /**\n       * Returns the suggestion filter object.\n       * It is a BooleanFilter because the label is needed.\n       * It returns only the first element because the facets and filters are being planned\n       * in the BaseSuggestions component.\n       *\n       * @returns The filter.\n       * @public\n       */\n      const filter = computed<BooleanFilter | undefined>(\n        () => props.suggestion.facets?.[0]?.filters[0] as BooleanFilter\n      );\n\n      /**\n       * The event handler that will be triggered when clicking on a suggestion.\n       *\n       * @remarks\n       * UserAcceptedAQuery: suggestion.query\n       * UserSelectedASuggestion: suggestion\n       * UserClickedAFilter: suggestion.facets[0].filters[0]\n       * Merges the events defined in the suggestionSelectedEvents prop and also emits them\n       *\n       * @returns The {@link XEvent | XEvents} to emit.\n       * @public\n       */\n      const events = computed<Partial<XEventsTypes>>(() => {\n        const filterEvent: Partial<XEventsTypes> = filter.value\n          ? { UserClickedAFilter: filter.value }\n          : {};\n        return {\n          UserAcceptedAQuery: props.suggestion.query,\n          UserSelectedASuggestion: props.suggestion,\n          ...props.suggestionSelectedEvents,\n          ...filterEvent\n        };\n      });\n\n      /**\n       * Emits the events when the button is clicked.\n       *\n       * @public\n       */\n      const emitEvents = (): void => {\n        forEach(events.value, (event, payload): void => {\n          $x.emit(event, payload, {\n            target: el.value!,\n            feature: props.feature\n          });\n        });\n      };\n\n      /**\n       * Checks if the suggestion is curated and if it should be highlighted.\n       *\n       * @returns True if the suggestion is curated and should be highlighted.\n       *\n       * @internal\n       */\n      const shouldHighlightCurated = computed<boolean>(\n        () => props.highlightCurated && !!props.suggestion.isCurated\n      );\n\n      /**\n       * Generates css classes dynamically.\n       *\n       * @remarks\n       * 'x-suggestion--matching added when the query should be matched.\n       *\n       * @returns The {@link VueCSSClasses} classes.\n       * @public\n       */\n      const dynamicCSSClasses = computed<VueCSSClasses>(() => ({\n        'x-suggestion--is-curated': shouldHighlightCurated.value\n      }));\n\n      return {\n        el,\n        filter,\n        emitEvents,\n        dynamicCSSClasses\n      };\n    }\n  });\n","<template>\n  <button ref=\"el\" @click=\"emitEvents\" v-on=\"$listeners\" :class=\"dynamicCSSClasses\">\n    <!--\n      @slot Button content\n          @binding {Suggestion} suggestion - Suggestion data\n          @binding {String} query - The query that the suggestion belongs to\n          @binding {Filter} filter - Suggestion's filter\n      -->\n    <slot v-bind=\"{ query, suggestion, filter }\">\n      <Highlight class=\"x-suggestion__query\" :text=\"suggestion.query\" :highlight=\"query\" />\n      <span v-if=\"filter\" class=\"x-suggestion__filter\">{{ filter.label }}</span>\n    </slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import { BooleanFilter, Suggestion } from '@empathyco/x-types';\n  import { forEach } from '@empathyco/x-utils';\n  import { computed, defineComponent, PropType, ref } from 'vue';\n  import { QueryFeature } from '../../types';\n  import { VueCSSClasses } from '../../utils/types';\n  import { XEventsTypes } from '../../wiring/events.types';\n  import Highlight from '../highlight.vue';\n  import { use$x } from '../../composables/index';\n\n  /**\n   * Renders a button with a default slot. It receives a query, which should be the query of the\n   * module using this component, a suggestion, the {@link XEvent | XEvents} that will be emitted\n   * on click with a given feature.\n   *\n   * The default slot receives the suggestion and the matched query has props.\n   *\n   * @public\n   */\n  export default defineComponent({\n    components: { Highlight },\n    props: {\n      /**\n       * The normalized query of the module using this component.\n       *\n       * @public\n       */\n      query: {\n        type: String,\n        default: ''\n      },\n\n      /**\n       * The suggestion to render and use in the default slot.\n       *\n       * @public\n       */\n      suggestion: {\n        type: Object as PropType<Suggestion>,\n        required: true\n      },\n\n      /**\n       * The feature from which the events will be emitted.\n       *\n       * @public\n       */\n      //TODO: set to true when the suggestions components pass it.\n      feature: {\n        type: String as PropType<QueryFeature>\n      },\n\n      /**\n       * The {@link XEvent | XEvents} that will be emitted when selecting a suggestion.\n       *\n       * @public\n       */\n      suggestionSelectedEvents: {\n        type: Object as PropType<Partial<XEventsTypes>>,\n        required: true\n      },\n\n      /**\n       * Indicates if the curated suggestion should be highlighted.\n       *\n       * @public\n       */\n      highlightCurated: {\n        type: Boolean\n      }\n    },\n\n    setup(props) {\n      const el = ref<HTMLElement | null>(null);\n\n      const $x = use$x();\n\n      /**\n       * Returns the suggestion filter object.\n       * It is a BooleanFilter because the label is needed.\n       * It returns only the first element because the facets and filters are being planned\n       * in the BaseSuggestions component.\n       *\n       * @returns The filter.\n       * @public\n       */\n      const filter = computed<BooleanFilter | undefined>(\n        () => props.suggestion.facets?.[0]?.filters[0] as BooleanFilter\n      );\n\n      /**\n       * The event handler that will be triggered when clicking on a suggestion.\n       *\n       * @remarks\n       * UserAcceptedAQuery: suggestion.query\n       * UserSelectedASuggestion: suggestion\n       * UserClickedAFilter: suggestion.facets[0].filters[0]\n       * Merges the events defined in the suggestionSelectedEvents prop and also emits them\n       *\n       * @returns The {@link XEvent | XEvents} to emit.\n       * @public\n       */\n      const events = computed<Partial<XEventsTypes>>(() => {\n        const filterEvent: Partial<XEventsTypes> = filter.value\n          ? { UserClickedAFilter: filter.value }\n          : {};\n        return {\n          UserAcceptedAQuery: props.suggestion.query,\n          UserSelectedASuggestion: props.suggestion,\n          ...props.suggestionSelectedEvents,\n          ...filterEvent\n        };\n      });\n\n      /**\n       * Emits the events when the button is clicked.\n       *\n       * @public\n       */\n      const emitEvents = (): void => {\n        forEach(events.value, (event, payload): void => {\n          $x.emit(event, payload, {\n            target: el.value!,\n            feature: props.feature\n          });\n        });\n      };\n\n      /**\n       * Checks if the suggestion is curated and if it should be highlighted.\n       *\n       * @returns True if the suggestion is curated and should be highlighted.\n       *\n       * @internal\n       */\n      const shouldHighlightCurated = computed<boolean>(\n        () => props.highlightCurated && !!props.suggestion.isCurated\n      );\n\n      /**\n       * Generates css classes dynamically.\n       *\n       * @remarks\n       * 'x-suggestion--matching added when the query should be matched.\n       *\n       * @returns The {@link VueCSSClasses} classes.\n       * @public\n       */\n      const dynamicCSSClasses = computed<VueCSSClasses>(() => ({\n        'x-suggestion--is-curated': shouldHighlightCurated.value\n      }));\n\n      return {\n        el,\n        filter,\n        emitEvents,\n        dynamicCSSClasses\n      };\n    }\n  });\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- `UserAcceptedAQuery`: the event is emitted after the user clicks the button. The event payload is\n  the suggestion query data.\n- `UserSelectedASuggestion`: the event is emitted after the user clicks the button. The event\n  payload is the suggestion data.\n- `UserClickedAFilter`: the event is emitted after the user clicks the button if the suggestion\n  includes a filter. The event payload is the suggestion filter.\n- The component can emit more events on click using the `suggestionSelectedEvents` prop.\n\n## See it in action\n\nThis suggestion component expects a suggestion to render and pass to its default slot, a normalized\nquery to compare with the suggestion's query and highlight its matching parts, and events to emit\nwhen the suggestion is selected.\n\nIf the suggestion contains a filter, it is displayed next to the suggestion.\n\n```vue live\n<template>\n  <BaseSuggestion v-bind=\"{ query, suggestion }\" />\n</template>\n<script>\n  import { BaseSuggestion } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSuggestionDemo',\n    components: {\n      BaseSuggestion\n    },\n    data() {\n      return {\n        query: 'st',\n        suggestion: {\n          modelName: 'QuerySuggestion',\n          query: 'steak',\n          facet: {\n            namedModel: 'SimpleFacet',\n            id: 'category',\n            label: 'Category',\n            filters: [\n              {\n                id: 'category:groceries',\n                modelName: 'SimpleFilter',\n                facetId: 'category-facet',\n                label: 'Groceries',\n                selected: false,\n                totalResults: 10\n              }\n            ]\n          }\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customise the content\n\nYou can make this component render any content you want by using the `default` slot.\n\n```vue live\n<template>\n  <BaseSuggestion v-bind=\"{ query, suggestion }\" #default=\"{ suggestion, query, filter }\">\n    <span>🔍</span>\n    <Highlight :text=\"suggestion.query\" :highlight=\"query\" />\n    <span v-if=\"filter\">{{ filter.label }}</span>\n  </BaseSuggestion>\n</template>\n<script>\n  import { BaseSuggestion } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSuggestionDemo',\n    components: {\n      BaseSuggestion\n    },\n    data() {\n      return {\n        query: 'st',\n        suggestion: {\n          modelName: 'QuerySuggestion',\n          query: 'steak'\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { Suggestion, Facet, Filter } from '@empathyco/x-types';\n  import { isArrayEmpty } from '../../utils/array';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n\n  /**\n   * Paints a list of suggestions passed in by prop. Requires a component for a single suggestion\n   * in the default slot for working.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseSuggestions extends Mixins(dynamicPropsMixin(['suggestionItemClass'])) {\n    /**\n     * The list of suggestions to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestions!: Suggestion[];\n\n    /**\n     * Animation component that will be used to animate the suggestion.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Number of suggestions to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Boolean value to indicate if the facets should be rendered.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected showFacets!: boolean;\n\n    /**\n     * When {@link BaseSuggestions.showFacets} is true, it indicates if the suggestion without\n     * filter should be rendered.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected showPlainSuggestion!: boolean;\n\n    /**\n     * An array with the unique keys for each suggestion. Required by the `v-for` loop.\n     *\n     * @returns An array with the unique keys of the suggestions.\n     * @internal\n     */\n    protected get suggestionsKeys(): string[] {\n      return this.suggestionsToRender.map(suggestion =>\n        isArrayEmpty(suggestion.facets)\n          ? suggestion.query\n          : `${suggestion.query}-in-${this.getFacetsKey(suggestion.facets)}`\n      );\n    }\n\n    /**\n     * Generates a string from the given facets.\n     *\n     * @param facets - The list of facets to reduce to a string.\n     * @returns - A string representing the list of facets.\n     * @internal\n     */\n    protected getFacetsKey(facets: Facet[]): string {\n      // Component methods are bound by Vue:\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      return facets.map(this.getFacetKey).join('&');\n    }\n\n    /**\n     * Generates a string from the given facet.\n     *\n     * @param facet - The facet to reduce to a string.\n     * @returns - A string representing the facet.\n     * @internal\n     */\n    protected getFacetKey(facet: Facet): string {\n      return facet.filters.map(filter => filter.id).join('&');\n    }\n\n    /**\n     * Creates a list of suggestions to render based on the configuration of this component.\n     *\n     * @returns - The list of suggestions to be rendered by this component.\n     *\n     * @internal\n     */\n    protected get suggestionsToRender(): Suggestion[] {\n      return this.suggestions\n        .flatMap(suggestion =>\n          this.showFacets && suggestion.facets?.length\n            ? this.showPlainSuggestion\n              ? [{ ...suggestion, facets: [] }, ...this.expandSuggestionFilters(suggestion)]\n              : this.expandSuggestionFilters(suggestion)\n            : { ...suggestion, facets: [] }\n        )\n        .slice(0, this.maxItemsToRender);\n    }\n\n    /**\n     * Creates a suggestion for each one of the filter inside each facet.\n     *\n     * @param suggestion - Suggestion to expand.\n     * @returns A list of suggestions, each one with a single filter.\n     *\n     * @internal\n     */\n    protected expandSuggestionFilters(suggestion: Suggestion): Suggestion[] {\n      return (\n        suggestion.facets?.flatMap(facet =>\n          facet.filters.map(filter => ({\n            ...suggestion,\n            facets: [{ ...facet, filters: [filter] }]\n          }))\n        ) ?? []\n      );\n    }\n\n    /**\n     * Returns the filter contained by the suggestion.\n     *\n     * @param suggestion - Suggestion containing the filter.\n     * @returns The suggestion filter.\n     * @internal\n     */\n    protected getSuggestionFilter(suggestion: Suggestion): Filter | undefined {\n      return suggestion.facets?.[0]?.filters[0];\n    }\n  }\n","<template>\n  <component :is=\"animation\" v-if=\"suggestions.length\" tag=\"ul\" class=\"x-suggestions\">\n    <li\n      v-for=\"(suggestion, index) in suggestionsToRender\"\n      :key=\"suggestionsKeys[index]\"\n      class=\"x-suggestions__item\"\n      :class=\"suggestionItemClass\"\n      data-test=\"suggestion-item\"\n    >\n      <!--\n        @slot (Required) List item content\n            @binding {Suggestion} suggestion - Suggestion data\n            @binding {number} index - Suggestion index\n            @binding {Filter | undefined} filter - Suggestion's filter\n       -->\n      <slot v-bind=\"{ suggestion, index, filter: getSuggestionFilter(suggestion) }\" />\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { Suggestion, Facet, Filter } from '@empathyco/x-types';\n  import { isArrayEmpty } from '../../utils/array';\n  import { dynamicPropsMixin } from '../dynamic-props.mixin';\n\n  /**\n   * Paints a list of suggestions passed in by prop. Requires a component for a single suggestion\n   * in the default slot for working.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseSuggestions extends Mixins(dynamicPropsMixin(['suggestionItemClass'])) {\n    /**\n     * The list of suggestions to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestions!: Suggestion[];\n\n    /**\n     * Animation component that will be used to animate the suggestion.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Number of suggestions to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Boolean value to indicate if the facets should be rendered.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected showFacets!: boolean;\n\n    /**\n     * When {@link BaseSuggestions.showFacets} is true, it indicates if the suggestion without\n     * filter should be rendered.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected showPlainSuggestion!: boolean;\n\n    /**\n     * An array with the unique keys for each suggestion. Required by the `v-for` loop.\n     *\n     * @returns An array with the unique keys of the suggestions.\n     * @internal\n     */\n    protected get suggestionsKeys(): string[] {\n      return this.suggestionsToRender.map(suggestion =>\n        isArrayEmpty(suggestion.facets)\n          ? suggestion.query\n          : `${suggestion.query}-in-${this.getFacetsKey(suggestion.facets)}`\n      );\n    }\n\n    /**\n     * Generates a string from the given facets.\n     *\n     * @param facets - The list of facets to reduce to a string.\n     * @returns - A string representing the list of facets.\n     * @internal\n     */\n    protected getFacetsKey(facets: Facet[]): string {\n      // Component methods are bound by Vue:\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      return facets.map(this.getFacetKey).join('&');\n    }\n\n    /**\n     * Generates a string from the given facet.\n     *\n     * @param facet - The facet to reduce to a string.\n     * @returns - A string representing the facet.\n     * @internal\n     */\n    protected getFacetKey(facet: Facet): string {\n      return facet.filters.map(filter => filter.id).join('&');\n    }\n\n    /**\n     * Creates a list of suggestions to render based on the configuration of this component.\n     *\n     * @returns - The list of suggestions to be rendered by this component.\n     *\n     * @internal\n     */\n    protected get suggestionsToRender(): Suggestion[] {\n      return this.suggestions\n        .flatMap(suggestion =>\n          this.showFacets && suggestion.facets?.length\n            ? this.showPlainSuggestion\n              ? [{ ...suggestion, facets: [] }, ...this.expandSuggestionFilters(suggestion)]\n              : this.expandSuggestionFilters(suggestion)\n            : { ...suggestion, facets: [] }\n        )\n        .slice(0, this.maxItemsToRender);\n    }\n\n    /**\n     * Creates a suggestion for each one of the filter inside each facet.\n     *\n     * @param suggestion - Suggestion to expand.\n     * @returns A list of suggestions, each one with a single filter.\n     *\n     * @internal\n     */\n    protected expandSuggestionFilters(suggestion: Suggestion): Suggestion[] {\n      return (\n        suggestion.facets?.flatMap(facet =>\n          facet.filters.map(filter => ({\n            ...suggestion,\n            facets: [{ ...facet, filters: [filter] }]\n          }))\n        ) ?? []\n      );\n    }\n\n    /**\n     * Returns the filter contained by the suggestion.\n     *\n     * @param suggestion - Suggestion containing the filter.\n     * @returns The suggestion filter.\n     * @internal\n     */\n    protected getSuggestionFilter(suggestion: Suggestion): Filter | undefined {\n      return suggestion.facets?.[0]?.filters[0];\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-suggestions {\n    list-style-type: none;\n\n    &,\n    &__item {\n      display: flex;\n      flex-flow: column nowrap;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nFor this component to work, you will need to set a list of suggestions as prop, and also to\nimplement the component for single suggestion, which handles the click event. In the following\nexample, the suggestions are retrieved from a property called `suggestions`, and the implementation\nof the suggestion component is a simple `button`, that calls the `emitSuggestionSelected` method\nwhen clicked.\n\n```vue\n<BaseSuggestions :suggestions=\"suggestions\">\n  <template #default=\"{ suggestion }\">\n    <button @click=\"emitSuggestionSelected($event, suggestion)\">\n      {{ suggestion.query }}\n    </button>\n  </template>\n</BaseSuggestions>\n```\n\nFollowing the previous example, the component options object could be something like this:\n\n```js\nexport default {\n  computed: {\n    ...mapGetters(['x', 'querySuggestions'], { suggestions: 'suggestions' })\n  },\n  methods: {\n    emitSuggestionSelected(event, suggestion) {\n      this.$x.emit('UserAcceptedAQuery', suggestion.query, { target: event.target });\n      this.$x.emit('UserSelectedAQuerySuggestion', suggestion, { target: event.target });\n    }\n  }\n};\n```\n\n### Play with props\n\nIn this example, the suggestions has been limited to render a maximum of 3 items. _Type \"puzzle\" or\nanother toy in the input field to try it out!_\n\n```vue\n<template>\n  <BaseSuggestions :suggestions=\"suggestions\" :maxItemsToRender=\"3\" />\n</template>\n\n<script>\n  import { BaseSuggestions } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSuggestionsDemo',\n    components: {\n      BaseSuggestions\n    },\n    data() {\n      return {\n        suggestions: [\n          {\n            facets: [],\n            key: 'chips',\n            query: 'Chips',\n            totalResults: 10,\n            results: [],\n            modelName: 'PopularSearch'\n          }\n        ]\n      };\n    }\n  };\n</script>\n```\n\nIn this example, the filters of the suggestion will be rendered along with the query.\n\nThe `showPlainSuggestion` prop can be used to indicate if the suggestion without filter must be\nrendered along with the suggestion with filters.\n\nThis will render:\n\n- Chips //If `showPlainSuggestion` is true\n- Chips EXAMPLE\n\n```vue\n<template>\n  <BaseSuggestions :suggestions=\"suggestions\" showFacets showPlainSuggestion />\n</template>\n\n<script>\n  import { BaseSuggestions } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSuggestionsDemo',\n    components: {\n      BaseSuggestions\n    },\n    data() {\n      return {\n        suggestions: [\n          {\n            facets: [\n              {\n                id: 'exampleFacet',\n                label: 'exampleFacet',\n                modelName: 'SimpleFacet',\n                filters: [\n                  {\n                    facetId: 'exampleFacet',\n                    id: '{!tag=exampleFacet}exampleFacet_60361120_64009600:\"EXAMPLE\"',\n                    label: 'EXAMPLE',\n                    selected: false,\n                    totalResults: 10,\n                    modelName: 'SimpleFilter'\n                  }\n                ]\n              }\n            ],\n            key: 'chips',\n            query: 'Chips',\n            totalResults: 10,\n            results: [],\n            modelName: 'PopularSearch'\n          }\n        ]\n      };\n    }\n  };\n</script>\n```\n\nIn this example, the `contentClass` prop can be used to add classes to the suggestion item.\n\n```vue\n<template>\n  <BaseSuggestions :suggestions=\"suggestions\" suggestionItemClass=\"x-custom-class\" />\n</template>\n\n<script>\n  import { BaseSuggestions } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSuggestionsDemo',\n    components: {\n      BaseSuggestions\n    },\n    data() {\n      return {\n        suggestions: [\n          {\n            facets: [],\n            key: 'chips',\n            query: 'Chips',\n            totalResults: 10,\n            results: [],\n            modelName: 'PopularSearch'\n          }\n        ]\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n  import { computed, defineComponent } from 'vue';\n\n  /**\n   * The auto progress bar component is useful for displaying a visual indicator of numerical data\n   * in a bar shape.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * A boolean flag indicating if the bar is loading.\n       *\n       * @public\n       */\n      isLoading: {\n        type: Boolean,\n        default: true\n      },\n      /**\n       * The duration in seconds of the progress bar.\n       *\n       * @public\n       */\n      durationInSeconds: {\n        type: Number,\n        default: 5\n      }\n    },\n    setup(props) {\n      /**\n       * Computed property to calculate the animation's duration.\n       *\n       * @returns The CSS styles of the animation.\n       *\n       * @internal\n       */\n      const cssStyles = computed<Partial<CSSStyleDeclaration>>(() => ({\n        animationDuration: `${props.durationInSeconds}s`\n      }));\n\n      return {\n        cssStyles\n      };\n    }\n  });\n","<template>\n  <div v-if=\"isLoading\" class=\"x-progress-bar\" data-test=\"progress-bar\" role=\"progressbar\">\n    <div class=\"x-progress-bar-fill\" :style=\"cssStyles\" data-test=\"progress-bar-line\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { computed, defineComponent } from 'vue';\n\n  /**\n   * The auto progress bar component is useful for displaying a visual indicator of numerical data\n   * in a bar shape.\n   *\n   * @public\n   */\n  export default defineComponent({\n    props: {\n      /**\n       * A boolean flag indicating if the bar is loading.\n       *\n       * @public\n       */\n      isLoading: {\n        type: Boolean,\n        default: true\n      },\n      /**\n       * The duration in seconds of the progress bar.\n       *\n       * @public\n       */\n      durationInSeconds: {\n        type: Number,\n        default: 5\n      }\n    },\n    setup(props) {\n      /**\n       * Computed property to calculate the animation's duration.\n       *\n       * @returns The CSS styles of the animation.\n       *\n       * @internal\n       */\n      const cssStyles = computed<Partial<CSSStyleDeclaration>>(() => ({\n        animationDuration: `${props.durationInSeconds}s`\n      }));\n\n      return {\n        cssStyles\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\">\n  .x-progress-bar {\n    display: inline-block;\n    overflow: hidden;\n    background-color: #dbe2e5;\n    border-radius: 4px;\n\n    &-fill {\n      height: 4px;\n      background-color: #283034;\n      animation: slide linear;\n      transform-origin: left;\n    }\n  }\n  @keyframes slide {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(0);\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## See it in action\n\nHere you have a basic example of how the auto progress bar is rendered.\n\n```vue live\n<template>\n  <AutoProgressBar :isLoading=\"isLoading\" :durationInSeconds=\"durationInSeconds\" />\n</template>\n\n<script>\n  import { AutoProgressBar } from '@empathyco/x-components';\n  export default {\n    name: 'AutoProgressBarDemo',\n    components: {\n      AutoProgressBar\n    },\n    data() {\n      return {\n        isLoading: true,\n        durationInSeconds: 100\n      };\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the auto progress bar has been set to do an animation for 5 seconds. There is a way\nto cancel the animation by sending the isLoading prop to false.\n\n```vue live\n<template>\n  <AutoProgressBar :durationInSeconds=\"5\" :isLoading=\"true\" />\n</template>\n\n<script>\n  import { AutoProgressBar } from '@empathyco/x-components';\n  export default {\n    name: 'AutoProgressBarDemo',\n    components: {\n      AutoProgressBar\n    }\n  };\n</script>\n```\n\n## Events\n\nThis component emits the following events:\n\n- `UserClickedARedirection` after the user clicks the redirection button.\n- `UserClickedAbortARedirection` after the user clicks the abort redirection button.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { toKebabCase } from '../utils/string';\n  import { ListItem, VueCSSClasses } from '../utils/types';\n  import { XEmit } from './decorators/bus.decorators';\n  import { XInject } from './decorators/injection.decorators';\n  import { LIST_ITEMS_KEY } from './decorators/injection.consts';\n\n  /**\n   * The type returned by the gridItems function. Basically it's a list of items with its CSS\n   * classes and a slotName.\n   *\n   * @internal\n   */\n  interface GridItem {\n    slotName: string;\n    item: ListItem;\n    cssClass: VueCSSClasses;\n  }\n\n  /**\n   * Grid component that is able to render different items based on their modelName value. In order\n   * to achieve this, it exposes a scopedSlot for each different modelName. In case the items used\n   * do not have modelName property, the default slot is used instead. It has a required property:\n   * the `items` to render; and an optional one: the number `columns` the grid is divided in. If the\n   * number of columns is not specified, the grid automatically fills the rows with as many columns\n   * as it can fit.\n   *\n   * @public\n   */\n  @Component({})\n  export default class BaseGrid extends Vue {\n    /**\n     * Animation component that will be used to animate the base grid.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Number of columns the grid is divided into. By default, its value is 0, setting the grid\n     * columns mode to auto-fill.\n     *\n     * @public\n     */\n    @Prop({ default: 0 })\n    protected columns!: number;\n\n    /**\n     * The list of items to be rendered.\n     *\n     * @remarks The items must have an id property.\n     *\n     * @public\n     */\n    @Prop()\n    protected items!: ListItem[];\n\n    /**\n     * It injects {@link ListItem} provided by an ancestor.\n     *\n     * @internal\n     */\n    @XInject(LIST_ITEMS_KEY)\n    public injectedListItems!: ListItem[];\n\n    /**\n     * Emits the {@link XEventsTypes.RenderedColumnsNumberChanged | RenderedColumnsNumberChanged}\n     * event whenever the number of columns rendered inside the grid changes.\n     *\n     * @internal\n     */\n    @XEmit('RenderedColumnsNumberChanged', { immediate: false })\n    public renderedColumnsNumber = 0;\n\n    /**\n     * It returns the items passed as props or the injected ones.\n     *\n     * @returns List of grid items.\n     *\n     * @public\n     */\n    protected get computedItems(): ListItem[] {\n      return (\n        this.items ??\n        this.injectedListItems ??\n        //TODO: add here logger\n        //eslint-disable-next-line no-console\n        console.warn('It is necessary to pass a prop or inject the list of filters')\n      );\n    }\n\n    /**\n     * CSS class based on the column property value so items inside the grid can fill different\n     * amount of columns or rows based on how many columns the grid is divided into.\n     *\n     * @returns CSS class with the column property value.\n     *\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return this.columns ? `x-base-grid--cols-${this.columns}` : 'x-base-grid--cols-auto';\n    }\n\n    /**\n     * CSSStyleDeclaration object specifying the number of columns the grid is divided into based on\n     * the column property value.\n     *\n     * @returns A CSSStyleDeclaration to use as the style attribute.\n     *\n     * @internal\n     */\n    protected get style(): Partial<CSSStyleDeclaration> {\n      return {\n        gridTemplateColumns: this.columns\n          ? `repeat(${this.columns}, minmax(0, 1fr))`\n          : 'repeat(auto-fill, minmax(var(--x-size-min-width-grid-item, 150px), 1fr))'\n      };\n    }\n\n    /**\n     * Maps the item to an object containing: the `item`, its `CSS class` and its slot name.\n     *\n     * @returns An array of objects containing the item and its CSS class.\n     *\n     * @internal\n     */\n    protected get gridItems(): GridItem[] {\n      return this.computedItems.map(item => {\n        const slotName = toKebabCase(item.modelName);\n        return {\n          slotName,\n          item,\n          cssClass: `x-base-grid__${slotName}`\n        };\n      });\n    }\n\n    /**\n     * Initialises the rendered columns number and sets a ResizeObserver to keep it updated.\n     *\n     * @internal\n     */\n    protected mounted(): void {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.updateRenderedColumnsNumber);\n      resizeObserver.observe(this.$el);\n      this.$on('hook:beforeDestroy', () => {\n        resizeObserver.disconnect();\n      });\n    }\n\n    /**\n     * Updates the number of columns rendered inside the grid.\n     *\n     * @internal\n     */\n    protected updateRenderedColumnsNumber(): void {\n      const { gridTemplateColumns } = getComputedStyle(this.$el);\n      this.renderedColumnsNumber = gridTemplateColumns.split(' ').length;\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    :style=\"style\"\n    class=\"x-base-grid\"\n    :class=\"cssClasses\"\n    tag=\"ul\"\n    data-test=\"grid\"\n  >\n    <li\n      v-for=\"{ slotName, item, cssClass } in gridItems\"\n      :key=\"item.id\"\n      :class=\"cssClass\"\n      class=\"x-base-grid__item\"\n    >\n      <!--\n        @slot Customized item rendering. Specifying a slot with the item's modelName will result in\n        the item using that slot composition to render.\n            @binding {item} item - Item to render\n      -->\n      <slot v-if=\"$scopedSlots[slotName]\" :name=\"slotName\" :item=\"item\" />\n      <!--\n        @slot (required) Default item rendering. This slot will be used by default for rendering\n        the item without an specific slot implementation.\n            @binding {item} item - Item to render\n      -->\n      <slot v-else :item=\"item\">{{ item.name || item.modelName || item.id || item }}</slot>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { toKebabCase } from '../utils/string';\n  import { ListItem, VueCSSClasses } from '../utils/types';\n  import { XEmit } from './decorators/bus.decorators';\n  import { XInject } from './decorators/injection.decorators';\n  import { LIST_ITEMS_KEY } from './decorators/injection.consts';\n\n  /**\n   * The type returned by the gridItems function. Basically it's a list of items with its CSS\n   * classes and a slotName.\n   *\n   * @internal\n   */\n  interface GridItem {\n    slotName: string;\n    item: ListItem;\n    cssClass: VueCSSClasses;\n  }\n\n  /**\n   * Grid component that is able to render different items based on their modelName value. In order\n   * to achieve this, it exposes a scopedSlot for each different modelName. In case the items used\n   * do not have modelName property, the default slot is used instead. It has a required property:\n   * the `items` to render; and an optional one: the number `columns` the grid is divided in. If the\n   * number of columns is not specified, the grid automatically fills the rows with as many columns\n   * as it can fit.\n   *\n   * @public\n   */\n  @Component({})\n  export default class BaseGrid extends Vue {\n    /**\n     * Animation component that will be used to animate the base grid.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Number of columns the grid is divided into. By default, its value is 0, setting the grid\n     * columns mode to auto-fill.\n     *\n     * @public\n     */\n    @Prop({ default: 0 })\n    protected columns!: number;\n\n    /**\n     * The list of items to be rendered.\n     *\n     * @remarks The items must have an id property.\n     *\n     * @public\n     */\n    @Prop()\n    protected items!: ListItem[];\n\n    /**\n     * It injects {@link ListItem} provided by an ancestor.\n     *\n     * @internal\n     */\n    @XInject(LIST_ITEMS_KEY)\n    public injectedListItems!: ListItem[];\n\n    /**\n     * Emits the {@link XEventsTypes.RenderedColumnsNumberChanged | RenderedColumnsNumberChanged}\n     * event whenever the number of columns rendered inside the grid changes.\n     *\n     * @internal\n     */\n    @XEmit('RenderedColumnsNumberChanged', { immediate: false })\n    public renderedColumnsNumber = 0;\n\n    /**\n     * It returns the items passed as props or the injected ones.\n     *\n     * @returns List of grid items.\n     *\n     * @public\n     */\n    protected get computedItems(): ListItem[] {\n      return (\n        this.items ??\n        this.injectedListItems ??\n        //TODO: add here logger\n        //eslint-disable-next-line no-console\n        console.warn('It is necessary to pass a prop or inject the list of filters')\n      );\n    }\n\n    /**\n     * CSS class based on the column property value so items inside the grid can fill different\n     * amount of columns or rows based on how many columns the grid is divided into.\n     *\n     * @returns CSS class with the column property value.\n     *\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return this.columns ? `x-base-grid--cols-${this.columns}` : 'x-base-grid--cols-auto';\n    }\n\n    /**\n     * CSSStyleDeclaration object specifying the number of columns the grid is divided into based on\n     * the column property value.\n     *\n     * @returns A CSSStyleDeclaration to use as the style attribute.\n     *\n     * @internal\n     */\n    protected get style(): Partial<CSSStyleDeclaration> {\n      return {\n        gridTemplateColumns: this.columns\n          ? `repeat(${this.columns}, minmax(0, 1fr))`\n          : 'repeat(auto-fill, minmax(var(--x-size-min-width-grid-item, 150px), 1fr))'\n      };\n    }\n\n    /**\n     * Maps the item to an object containing: the `item`, its `CSS class` and its slot name.\n     *\n     * @returns An array of objects containing the item and its CSS class.\n     *\n     * @internal\n     */\n    protected get gridItems(): GridItem[] {\n      return this.computedItems.map(item => {\n        const slotName = toKebabCase(item.modelName);\n        return {\n          slotName,\n          item,\n          cssClass: `x-base-grid__${slotName}`\n        };\n      });\n    }\n\n    /**\n     * Initialises the rendered columns number and sets a ResizeObserver to keep it updated.\n     *\n     * @internal\n     */\n    protected mounted(): void {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.updateRenderedColumnsNumber);\n      resizeObserver.observe(this.$el);\n      this.$on('hook:beforeDestroy', () => {\n        resizeObserver.disconnect();\n      });\n    }\n\n    /**\n     * Updates the number of columns rendered inside the grid.\n     *\n     * @internal\n     */\n    protected updateRenderedColumnsNumber(): void {\n      const { gridTemplateColumns } = getComputedStyle(this.$el);\n      this.renderedColumnsNumber = gridTemplateColumns.split(' ').length;\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-base-grid {\n    display: grid;\n    grid-auto-flow: dense;\n    list-style: none;\n    align-items: stretch;\n\n    &__banner,\n    &__next-queries-group {\n      grid-column-start: 1;\n      grid-column-end: -1;\n    }\n\n    &__item {\n      display: flex;\n      flex-flow: column nowrap;\n\n      > * {\n        flex-grow: 1;\n      }\n    }\n\n    &--cols-auto .x-base-grid__item {\n      // layout\n      min-width: var(--x-size-min-width-grid-item);\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component renders a list of elements in different slots depending on their modelName. In order\nto achieve this, it exposes a scopedSlot for each different modelName. In case the items used do not\nhave modelName property, the default slot is used instead. It has a required property, the `items`\nto render, and an optional one, the number of `columns` the grid is divided in. If the number of\ncolumns is not specified, the grid automatically fills the rows with as many columns as it can fit.\n\n### Basic example\n\nIt renders a list of items using the default slot:\n\n```vue\n<template>\n  <BaseGrid :items=\"items\">\n    <template #default=\"{ item }\">\n      {{ `Default slot content: ${item.id}` }}\n    </template>\n  </BaseGrid>\n</template>\n```\n\n### Configuring the number of columns\n\nIt renders a grid with 12 columns instead of 6, which is the default value:\n\n```vue\n<template>\n  <BaseGrid :items=\"items\" :columns=\"12\">\n    <template #default=\"{ item }\">\n      {{ `Default slot content: ${item.id}` }}\n    </template>\n  </BaseGrid>\n</template>\n```\n\n### Rendering usage\n\nConfiguring the number of columns.\n\nIt renders a list of items using the different scopedSlots created by the item's modelName. For\nexample, if you want to use this component as the search grid, you pass the search results (results,\nbanners, promoted, next queries...etc) as items. Each of these results have a different modelName\nand are rendered in different slots.\n\n```vue\n<template>\n  <BaseGrid :animation=\"animation\" :items=\"items\">\n    <template #banner=\"{ item }\">\n      <span class=\"banner\">\n        {{ `${item.title} banner` }}\n      </span>\n    </template>\n    <template #next-queries=\"{ item }\">\n      <span>\n        {{ `${item.totalResults} next queries` }}\n      </span>\n    </template>\n    <template #promoted=\"{ item }\">\n      <span class=\"promoted\">\n        {{ `${item.title} promoted` }}\n      </span>\n    </template>\n    <template #result=\"{ item }\">\n      <BaseResultLink :result=\"item\">\n        {{ item.name }}\n      </BaseResultLink>\n    </template>\n  </BaseGrid>\n</template>\n```\n\n### Customizing the items width\n\nThe `--x-size-min-width-grid-item` variable can be used to customize the min width of the grid\nitems.\n\n```vue\n<template>\n  <BaseGrid :items=\"items\" style=\"--x-size-min-width-grid-item: 150px\">\n    <template #default=\"{ item }\">\n      {{ `Default slot content: ${item.id}` }}\n    </template>\n  </BaseGrid>\n</template>\n```\n</docs>\n","import { FOCUSABLE_SELECTORS } from '../utils/focus';\nimport { ArrowKey } from '../utils/types';\nimport {\n  AbsoluteDistances,\n  Intersection,\n  Point,\n  Points,\n  SpatialNavigation\n} from './services.types';\n\n/**\n * Implementation of {@link SpatialNavigation} using directional focus.\n *\n * @public\n */\nexport class DirectionalFocusNavigationService implements SpatialNavigation {\n  /**\n   * The HTMLElement that is currently on focus and used as reference to navigateTo from.\n   */\n  private origin!: HTMLElement;\n\n  /**\n   * The DOMRect of the origin Element.\n   */\n  private originRect!: DOMRect;\n\n  /**\n   * Direction of the navigation.\n   */\n  private direction!: ArrowKey;\n\n  /**\n   * Weight of the projected intersection area weight in the\n   * {@link DirectionalFocusNavigationService.getDistanceScore | getDistanceScore} formula.\n   */\n  private readonly intersectionAreaWeight = 100;\n\n  /**\n   * Weight of the absolute distance on the orthogonal axis between to elements when navigating\n   * left or right. Used to calculate the displacement in\n   * {@link DirectionalFocusNavigationService.getDisplacementAndAlignment |\n   * getDisplacementAndAlignment}.\n   */\n  private readonly orthogonalWeightHorizontal = 30;\n\n  /**\n   * Weight of the absolute distance on the orthogonal axis between to elements when navigating\n   * up or down. Used to calculate the displacement in\n   * {@link DirectionalFocusNavigationService.getDisplacementAndAlignment |\n   * getDisplacementAndAlignment}.\n   */\n  private readonly orthogonalWeightVertical = 2;\n\n  /**\n   * Weight of the degree of alignment between two elements when calculating the alignment in\n   * {@link DirectionalFocusNavigationService.getDisplacementAndAlignment |\n   * getDisplacementAndAlignment}.\n   */\n  private readonly alignWeight = 5;\n\n  /**\n   * Set of functions to filter out candidates based on the navigation's direction.\n   */\n  private readonly filterFunction = {\n    ArrowUp: (candidateRect: DOMRect) => this.isBelow(this.originRect, candidateRect),\n    ArrowRight: (candidateRect: DOMRect) => this.isRightSide(candidateRect, this.originRect),\n    ArrowDown: (candidateRect: DOMRect) => this.isBelow(candidateRect, this.originRect),\n    ArrowLeft: (candidateRect: DOMRect) => this.isRightSide(this.originRect, candidateRect)\n  };\n\n  /**\n   * Constructor for the {@link DirectionalFocusNavigationService}.\n   *\n   * @param container - The element that contains the navigable elements.\n   * @param focusableSelectors - A comma separated string with the focusable selectors to look up.\n   */\n  public constructor(\n    /**\n     * The {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement | HTMLElement} that\n     * contains the navigable elements.\n     */\n    private readonly container: HTMLElement,\n    /**\n     * Comma separated focusable selectors to look up.\n     */\n    private readonly focusableSelectors = FOCUSABLE_SELECTORS\n  ) {}\n\n  /**\n   * Get the element that would be the next one to be navigated to based on the direction of the\n   * arrow key pressed. If there are no possible candidates the element to focus would be the one on\n   * currently on focus or the first one in the container.\n   *\n   * @param arrowKey - The arrow key that was pressed.\n   *\n   * @returns The element to navigate to.\n   */\n  navigateTo(arrowKey: ArrowKey): HTMLElement {\n    const rawCandidates = this.getFocusableElements();\n    this.direction = arrowKey;\n    this.updateOrigin();\n\n    return this.getBestCandidate(rawCandidates);\n  }\n\n  /**\n   * Gets focusable elements within the container.\n   *\n   * @returns List of focusable elements.\n   * @internal\n   */\n  private getFocusableElements(): HTMLElement[] {\n    return Array.from(this.container.querySelectorAll(this.focusableSelectors));\n  }\n\n  /**\n   * Updates the origin with the current document active element.\n   *\n   * @remarks\n   * This also covers cases when the user might have iterated through the DOM using the TAB or\n   * SHIFT+TAB keys.\n   */\n  private updateOrigin(): void {\n    const newOrigin = document.activeElement as HTMLElement;\n    this.origin = newOrigin;\n    this.originRect = newOrigin.getBoundingClientRect();\n  }\n\n  /**\n   * Finds the closest candidate to the origin from a list of candidates.\n   *\n   * @remarks\n   * If there are no candidates the origin will be retrieved as best candidate.\n   *\n   * @param rawCandidates - List of all candidates.\n   *\n   * @returns The closest candidate to the origin or origin if there's none.\n   * @internal\n   */\n  private getBestCandidate(rawCandidates: HTMLElement[]): HTMLElement {\n    const candidates = this.filterCandidates(rawCandidates);\n    let bestCandidate = this.origin;\n\n    candidates.reduce((bestCurrentScore: number, candidate) => {\n      const bestScore = Math.min(bestCurrentScore, this.getDistanceScore(candidate));\n      if (bestScore !== bestCurrentScore) {\n        bestCandidate = candidate;\n      }\n      return bestScore;\n    }, Number.MAX_SAFE_INTEGER);\n\n    return bestCandidate;\n  }\n\n  /**\n   * Filters out candidates that can't be candidates based on the direction of the navigation and\n   * if they are visible and enabled.\n   *\n   * @param rawCandidates - List of all candidates.\n   *\n   * @returns List of filtered candidates.\n   * @internal\n   */\n  private filterCandidates(rawCandidates: HTMLElement[]): HTMLElement[] {\n    return rawCandidates.filter(candidate => this.isValidCandidate(candidate));\n  }\n\n  /**\n   * Checks if the provided candidate is not the origin, is visible, enabled  and in the correct\n   * direction to be a valid candidate.\n   *\n   * @param candidate - The candidate element.\n   * @returns If the candidate is valid for the navigation.\n   * @internal\n   */\n  private isValidCandidate(candidate: HTMLElement): boolean {\n    return (\n      candidate !== this.origin &&\n      this.isCandidateVisible(candidate) &&\n      this.hasFocusCompatibleAttributes(candidate) &&\n      this.isInNavigateDirection(candidate)\n    );\n  }\n\n  /**\n   * Checks if the provided candidate is visible.\n   *\n   * @param candidate - The candidate element.\n   * @returns If the candidate is visible.\n   * @internal\n   */\n  private isCandidateVisible(candidate: HTMLElement): boolean {\n    const candidateStyle = window.getComputedStyle(candidate, null);\n\n    return !!(\n      candidate.offsetWidth &&\n      candidate.offsetHeight &&\n      candidateStyle.visibility === 'visible'\n    );\n  }\n\n  /**\n   * Checks if the provided candidate is disabled and if the tabindex allows the element to be\n   * focused.\n   *\n   * @param candidate - The candidate element.\n   * @returns If candidate's attributes allow it to be focused.\n   * @internal\n   */\n  private hasFocusCompatibleAttributes(candidate: HTMLElement): boolean {\n    return !candidate.getAttribute('disabled') && candidate.getAttribute('tabindex') !== '-1';\n  }\n\n  /**\n   * Checks if the provided candidate is in the direction the navigation is going.\n   *\n   * @param candidate - The candidate element.\n   * @returns If the candidate is in the correct direction.\n   * @internal\n   */\n  private isInNavigateDirection(candidate: HTMLElement): boolean {\n    return this.filterFunction[this.direction](candidate.getBoundingClientRect());\n  }\n\n  /**\n   * Calculates the candidate's score for it to be the next element to navigateTo to based on a\n   * formula that takes into account euclidean distance, displacement, alignment and\n   * intersection area relative to the origin element.\n   *\n   * @param candidate - The candidate element.\n   *\n   * @returns The candidate score for best candidate.\n   * @internal\n   */\n  private getDistanceScore(candidate: HTMLElement): number {\n    const candidateRect = candidate.getBoundingClientRect();\n    const { 0: candidatePoint, 1: originPoint } = this.getComparisionPoints(candidateRect);\n    const absoluteDistances: AbsoluteDistances = {\n      x: Math.abs(candidatePoint.x - originPoint.x),\n      y: Math.abs(candidatePoint.y - originPoint.y)\n    };\n    const euclideanDistance = Math.sqrt(\n      Math.pow(absoluteDistances.x, 2) + Math.pow(absoluteDistances.y, 2)\n    );\n    const intersection = this.getIntersection(this.originRect, candidateRect);\n    const { displacement, alignment } = this.getDisplacementAndAlignment(\n      candidateRect,\n      intersection,\n      absoluteDistances\n    );\n    const projectedArea = Math.sqrt(intersection.area) / this.intersectionAreaWeight;\n\n    return euclideanDistance + displacement - alignment - projectedArea;\n  }\n\n  /**\n   * Gets the closest point to origin within the candidate and to the candidate within the origin\n   * based on the navigation direction.\n   *\n   * @param candidateRect - The DOMRect of the candidate.\n   *\n   * @returns The candidate's closest Points to the origin.\n   * @internal\n   */\n  private getComparisionPoints(candidateRect: DOMRect): Points {\n    const points: Points = [\n      { x: 0, y: 0 },\n      { x: 0, y: 0 }\n    ];\n\n    return {\n      ...this.setParallelPointValues(points, candidateRect),\n      ...this.setOrthogonalPointValues(points, candidateRect)\n    };\n  }\n\n  /**\n   * Set parallel values between candidate and origin based on the navigation direction and\n   * returns them.\n   *\n   * @param points - Current values for the candidate and origin's points.\n   * @param candidateRect - The DOMRect of the candidate.\n   *\n   * @returns Candidate and origin points with parallel values set.\n   * @internal\n   */\n  private setParallelPointValues(\n    { 0: candidatePoint, 1: originPoint }: Points,\n    candidateRect: DOMRect\n  ): Points {\n    switch (this.direction) {\n      case 'ArrowUp':\n        candidatePoint.y = Math.min(candidateRect.bottom, this.originRect.top);\n        originPoint.y = this.originRect.top;\n        break;\n      case 'ArrowDown':\n        candidatePoint.y = Math.max(candidateRect.top, this.originRect.bottom);\n        originPoint.y = this.originRect.bottom;\n        break;\n      case 'ArrowRight':\n        candidatePoint.x = Math.max(candidateRect.left, this.originRect.right);\n        originPoint.x = this.originRect.right;\n        break;\n      case 'ArrowLeft':\n        candidatePoint.x = Math.min(candidateRect.right, this.originRect.left);\n        originPoint.x = this.originRect.left;\n        break;\n    }\n\n    return [candidatePoint, originPoint];\n  }\n\n  /**\n   * Set orthogonal values between candidate and origin based on the navigation direction and\n   * returns them.\n   *\n   * @param points - Current values for the candidate and origin's points.\n   * @param candidateRect - The DOMRect of the candidate.\n   *\n   * @returns Candidate and origin points with orthogonal values set.\n   * @internal\n   */\n  private setOrthogonalPointValues(\n    { 0: candidatePoint, 1: originPoint }: Points,\n    candidateRect: DOMRect\n  ): Points {\n    switch (this.direction) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n        if (this.isRightSide(this.originRect, candidateRect)) {\n          candidatePoint.x = Math.min(candidateRect.right, this.originRect.left);\n          originPoint.x = this.originRect.left;\n        } else if (this.isRightSide(candidateRect, this.originRect)) {\n          candidatePoint.x = Math.max(candidateRect.left, this.originRect.right);\n          originPoint.x = this.originRect.right;\n        } else {\n          candidatePoint.x = Math.max(this.originRect.left, candidateRect.left);\n          originPoint.x = candidatePoint.x;\n        }\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        if (this.isBelow(this.originRect, candidateRect)) {\n          candidatePoint.y = Math.min(candidateRect.bottom, this.originRect.top);\n          originPoint.y = this.originRect.top;\n        } else if (this.isBelow(candidateRect, this.originRect)) {\n          candidatePoint.y = Math.max(candidateRect.top, this.originRect.bottom);\n          originPoint.y = this.originRect.bottom;\n        } else {\n          candidatePoint.y = Math.max(this.originRect.top, candidateRect.top);\n          originPoint.y = candidatePoint.y;\n        }\n        break;\n    }\n\n    return [candidatePoint, originPoint];\n  }\n\n  /**\n   * Calculates the displacement and alignment values for the candidate relative to the origin.\n   *\n   * @param candidateRect - The DOMRect of the candidate.\n   * @param intersection - Projected intersection between candidate and origin.\n   * @param absoluteDistances - Absolute distances between candidate and origin points.\n   *\n   * @returns Displacement and alignment values.\n   * @internal\n   */\n  private getDisplacementAndAlignment(\n    candidateRect: DOMRect,\n    intersection: Intersection,\n    absoluteDistances: AbsoluteDistances\n  ): { displacement: number; alignment: number } {\n    const areAligned = this.areAligned(this.originRect, candidateRect);\n\n    let alignBias = 0;\n    let orthogonalBias = 0;\n    let displacement = 0;\n\n    switch (this.direction) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n        if (areAligned) {\n          alignBias = Math.min(intersection.width / this.originRect.width, 1);\n        } else {\n          orthogonalBias = this.originRect.width / 2;\n        }\n\n        displacement = (absoluteDistances.x + orthogonalBias) * this.orthogonalWeightVertical;\n        break;\n\n      case 'ArrowRight':\n      case 'ArrowLeft':\n        if (areAligned) {\n          alignBias = Math.min(intersection.height / this.originRect.height, 1);\n        } else {\n          orthogonalBias = this.originRect.height / 2;\n        }\n\n        displacement = (absoluteDistances.y + orthogonalBias) * this.orthogonalWeightHorizontal;\n        break;\n    }\n\n    return { displacement, alignment: alignBias * this.alignWeight };\n  }\n\n  /**\n   * Calculates the projected intersection between two\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMRect | rects}.\n   *\n   * @param rect1 - First {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMRect | rect}.\n   * @param rect2 - Second {@link https://developer.mozilla.org/en-US/docs/Web/API/DOMRect | rect}.\n   *\n   * @returns The intersection.\n   * @internal\n   */\n  private getIntersection(rect1: DOMRect, rect2: DOMRect): Intersection {\n    const intersection: Intersection = { width: 0, height: 0, area: 0 };\n\n    const topLeftPoint: Point = {\n      x: Math.max(rect1.left, rect2.left),\n      y: Math.max(rect1.top, rect2.top)\n    };\n    const bottomRightPoint: Point = {\n      x: Math.min(rect1.right, rect2.right),\n      y: Math.min(rect1.bottom, rect2.bottom)\n    };\n\n    intersection.width = Math.abs(topLeftPoint.x - bottomRightPoint.x);\n    intersection.height = Math.abs(topLeftPoint.y - bottomRightPoint.y);\n\n    if (topLeftPoint.x < bottomRightPoint.x || topLeftPoint.y < bottomRightPoint.y) {\n      intersection.area = intersection.width * intersection.height;\n    }\n\n    return intersection;\n  }\n\n  /**\n   * Checks that both DOMRect are aligned based on the provided direction.\n   *\n   * @param rect1 - The first DOMRect.\n   * @param rect2 - The DOMRect that the first one will be compared to.\n   *\n   * @returns If the DOMRect are aligned.\n   * @internal\n   */\n  private areAligned(rect1: DOMRect, rect2: DOMRect): boolean {\n    return this.direction === 'ArrowLeft' || this.direction === 'ArrowRight'\n      ? rect1.bottom > rect2.top && rect1.top < rect2.bottom\n      : rect1.right > rect2.left && rect1.left < rect2.right;\n  }\n\n  /**\n   * Checks that the first DOMRect is below the second one.\n   *\n   * @param rect1 - The first DOMRect.\n   * @param rect2 - The DOMRect that the first one will be compared to.\n   *\n   * @returns If it's below.\n   * @internal\n   */\n  private isBelow(rect1: DOMRect, rect2: DOMRect): boolean {\n    return (\n      rect1.top >= rect2.bottom ||\n      (rect1.top >= rect2.top &&\n        rect1.bottom > rect2.bottom &&\n        rect1.left < rect2.right &&\n        rect1.right > rect2.left)\n    );\n  }\n\n  /**\n   * Checks that the first DOMRect is to the right side of the second one.\n   *\n   * @param rect1 - The first DOMRect.\n   * @param rect2 - The DOMRect that the first one will be compared to.\n   *\n   * @returns If it's to the right side.\n   * @internal\n   */\n  private isRightSide(rect1: DOMRect, rect2: DOMRect): boolean {\n    return (\n      rect1.left >= rect2.right ||\n      (rect1.left >= rect2.left &&\n        rect1.right > rect2.right &&\n        rect1.bottom > rect2.top &&\n        rect1.top < rect2.bottom)\n    );\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  // eslint-disable-next-line max-len\n  import { DirectionalFocusNavigationService } from '../services/directional-focus-navigation.service';\n  import { SpatialNavigation } from '../services/services.types';\n  import { ArrowKey, EventsForDirectionLimit, TakeNavigationControl } from '../utils/types';\n  import { XEventsOf } from '../wiring/events.types';\n  import { WireMetadata } from '../wiring/wiring.types';\n  import { XOn } from './decorators/bus.decorators';\n\n  /**\n   * Base component to handle keyboard navigation for elements inside it. It has a required slot to\n   * include the navigable elements.\n   *\n   * @remarks\n   * The component can be customized through props: an array of navigationHijacker objects, which\n   * contains: the xEvent to listen to, the moduleName in charge of emitting the event and to which\n   * direction it should react to; to take control of the navigation and eventsForDirectionLimit, to\n   * emit an xEvent when reaching the navigation limit in any direction.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseKeyboardNavigation extends Vue {\n    /**\n     * An array of {@link TakeNavigationControl | navigation hijacker} objects defining when to\n     * take control of the keyboard navigation.\n     */\n    @Prop({\n      default: () => [\n        { xEvent: 'UserPressedArrowKey', moduleName: 'searchBox', direction: 'ArrowDown' }\n      ]\n    })\n    protected navigationHijacker!: TakeNavigationControl[];\n\n    /**\n     * An {@link EventsForDirectionLimit} to emit when the user is already at the furthest element\n     * in a direction and tries to keep going on the same direction.\n     */\n    @Prop({ default: () => ({ ArrowUp: 'UserReachedEmpathizeTop' }) })\n    protected eventsForDirectionLimit!: Partial<EventsForDirectionLimit>;\n\n    /**\n     * The {@link SpatialNavigation | navigation service} to use.\n     */\n    protected navigationService!: SpatialNavigation;\n\n    /**\n     * The element to focus.\n     */\n    protected elementToFocus: HTMLElement | undefined;\n\n    mounted(): void {\n      // TODO Replace this with injection\n      this.navigationService = new DirectionalFocusNavigationService(this.$el as HTMLElement);\n    }\n\n    /**\n     * Get the navigation hijacker events.\n     *\n     * @remarks\n     * If the same {@link XEvent} is defined multiple times it is only inserted once.\n     *\n     * @returns The events to hijack the navigation.\n     */\n    protected get navigationHijackerEvents(): XEventsOf<ArrowKey>[] {\n      const eventsSet = this.navigationHijacker.map(({ xEvent }) => xEvent);\n      return Array.from(new Set(eventsSet));\n    }\n\n    /**\n     * Trigger navigation if this component is in control of it.\n     *\n     * @param eventPayload - The {@link @empathyco/x-bus#SubjectPayload.eventPayload}.\n     * @param metadata - The {@link @empathyco/x-bus#SubjectPayload.metadata}.\n     * @public\n     */\n    @XOn(component => (component as BaseKeyboardNavigation).navigationHijackerEvents)\n    triggerNavigation(eventPayload: ArrowKey, metadata: WireMetadata): void {\n      if (this.hasToTakeNavigationControl(eventPayload, metadata)) {\n        this.focusNextNavigableElement(eventPayload);\n      }\n    }\n\n    /**\n     * Checks if the component has to take control of the keyboard navigation.\n     *\n     * @param eventPayload - The {@link ArrowKey}.\n     * @param metadata - The {@link WireMetadata}.\n     *\n     * @returns Whether the component needs to take control of the keyboard navigation or not.\n     * @internal\n     */\n    private hasToTakeNavigationControl(eventPayload: ArrowKey, metadata: WireMetadata): boolean {\n      return this.navigationHijacker.some(\n        ({ moduleName, direction }) =>\n          moduleName === metadata.moduleName && direction === eventPayload\n      );\n    }\n\n    /**\n     * Focus the next navigable element returned by the navigation service.\n     *\n     * @param direction - The navigation direction.\n     * @internal\n     */\n    protected focusNextNavigableElement(direction: ArrowKey | KeyboardEvent): void {\n      const dir = typeof direction === 'object' ? (direction.key as ArrowKey) : direction;\n      const nextElementToFocus = this.navigationService?.navigateTo(dir);\n\n      if (this.elementToFocus !== nextElementToFocus) {\n        this.elementToFocus = nextElementToFocus;\n        this.elementToFocus.focus();\n      } else {\n        this.emitDirectionalLimitReached(dir);\n        this.elementToFocus = undefined;\n      }\n    }\n\n    /**\n     * Emit the {@link XEvent} associated to the navigation's direction when reaching its limit.\n     *\n     * @param direction - The navigation direction.\n     * @internal\n     */\n    private emitDirectionalLimitReached(direction: ArrowKey): void {\n      const xEvent = this.eventsForDirectionLimit?.[direction];\n      if (xEvent) {\n        this.$x.emit(xEvent, undefined, { target: this.elementToFocus });\n      }\n    }\n  }\n","<template>\n  <div\n    @keydown.up.down.right.left.prevent=\"focusNextNavigableElement\"\n    class=\"x-keyboard-navigation\"\n    data-test=\"keyboard-navigation\"\n  >\n    <!-- @slot (Required) Container content -->\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  // eslint-disable-next-line max-len\n  import { DirectionalFocusNavigationService } from '../services/directional-focus-navigation.service';\n  import { SpatialNavigation } from '../services/services.types';\n  import { ArrowKey, EventsForDirectionLimit, TakeNavigationControl } from '../utils/types';\n  import { XEventsOf } from '../wiring/events.types';\n  import { WireMetadata } from '../wiring/wiring.types';\n  import { XOn } from './decorators/bus.decorators';\n\n  /**\n   * Base component to handle keyboard navigation for elements inside it. It has a required slot to\n   * include the navigable elements.\n   *\n   * @remarks\n   * The component can be customized through props: an array of navigationHijacker objects, which\n   * contains: the xEvent to listen to, the moduleName in charge of emitting the event and to which\n   * direction it should react to; to take control of the navigation and eventsForDirectionLimit, to\n   * emit an xEvent when reaching the navigation limit in any direction.\n   *\n   * @public\n   */\n  @Component\n  export default class BaseKeyboardNavigation extends Vue {\n    /**\n     * An array of {@link TakeNavigationControl | navigation hijacker} objects defining when to\n     * take control of the keyboard navigation.\n     */\n    @Prop({\n      default: () => [\n        { xEvent: 'UserPressedArrowKey', moduleName: 'searchBox', direction: 'ArrowDown' }\n      ]\n    })\n    protected navigationHijacker!: TakeNavigationControl[];\n\n    /**\n     * An {@link EventsForDirectionLimit} to emit when the user is already at the furthest element\n     * in a direction and tries to keep going on the same direction.\n     */\n    @Prop({ default: () => ({ ArrowUp: 'UserReachedEmpathizeTop' }) })\n    protected eventsForDirectionLimit!: Partial<EventsForDirectionLimit>;\n\n    /**\n     * The {@link SpatialNavigation | navigation service} to use.\n     */\n    protected navigationService!: SpatialNavigation;\n\n    /**\n     * The element to focus.\n     */\n    protected elementToFocus: HTMLElement | undefined;\n\n    mounted(): void {\n      // TODO Replace this with injection\n      this.navigationService = new DirectionalFocusNavigationService(this.$el as HTMLElement);\n    }\n\n    /**\n     * Get the navigation hijacker events.\n     *\n     * @remarks\n     * If the same {@link XEvent} is defined multiple times it is only inserted once.\n     *\n     * @returns The events to hijack the navigation.\n     */\n    protected get navigationHijackerEvents(): XEventsOf<ArrowKey>[] {\n      const eventsSet = this.navigationHijacker.map(({ xEvent }) => xEvent);\n      return Array.from(new Set(eventsSet));\n    }\n\n    /**\n     * Trigger navigation if this component is in control of it.\n     *\n     * @param eventPayload - The {@link @empathyco/x-bus#SubjectPayload.eventPayload}.\n     * @param metadata - The {@link @empathyco/x-bus#SubjectPayload.metadata}.\n     * @public\n     */\n    @XOn(component => (component as BaseKeyboardNavigation).navigationHijackerEvents)\n    triggerNavigation(eventPayload: ArrowKey, metadata: WireMetadata): void {\n      if (this.hasToTakeNavigationControl(eventPayload, metadata)) {\n        this.focusNextNavigableElement(eventPayload);\n      }\n    }\n\n    /**\n     * Checks if the component has to take control of the keyboard navigation.\n     *\n     * @param eventPayload - The {@link ArrowKey}.\n     * @param metadata - The {@link WireMetadata}.\n     *\n     * @returns Whether the component needs to take control of the keyboard navigation or not.\n     * @internal\n     */\n    private hasToTakeNavigationControl(eventPayload: ArrowKey, metadata: WireMetadata): boolean {\n      return this.navigationHijacker.some(\n        ({ moduleName, direction }) =>\n          moduleName === metadata.moduleName && direction === eventPayload\n      );\n    }\n\n    /**\n     * Focus the next navigable element returned by the navigation service.\n     *\n     * @param direction - The navigation direction.\n     * @internal\n     */\n    protected focusNextNavigableElement(direction: ArrowKey | KeyboardEvent): void {\n      const dir = typeof direction === 'object' ? (direction.key as ArrowKey) : direction;\n      const nextElementToFocus = this.navigationService?.navigateTo(dir);\n\n      if (this.elementToFocus !== nextElementToFocus) {\n        this.elementToFocus = nextElementToFocus;\n        this.elementToFocus.focus();\n      } else {\n        this.emitDirectionalLimitReached(dir);\n        this.elementToFocus = undefined;\n      }\n    }\n\n    /**\n     * Emit the {@link XEvent} associated to the navigation's direction when reaching its limit.\n     *\n     * @param direction - The navigation direction.\n     * @internal\n     */\n    private emitDirectionalLimitReached(direction: ArrowKey): void {\n      const xEvent = this.eventsForDirectionLimit?.[direction];\n      if (xEvent) {\n        this.$x.emit(xEvent, undefined, { target: this.elementToFocus });\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component has a slot to inject other components inside it. The component expects a required\nprop, navigationHijacker, which is an array of objects containing: the xEvent to listen to, the\nmoduleName in charge of emitting the event and to which direction it should react to; to take\ncontrol of the navigation. It has another prop, optional in this case, to emit an xEvent when\nreaching the navigation limit in any direction.\n\n### Basic Usage\n\n```vue\n<KeyboardNavigation>\n  <QuerySuggestions/>\n</KeyboardNavigation>\n```\n\n### Defining multiple conditions to take navigation's control\n\n```vue\n<KeyboardNavigation\n  :navigationHijacker=\"[\n    {\n      xEvent: 'UserPressedArrowKey',\n      moduleName: 'searchBox',\n      direction: 'ArrowDown'\n    },\n    {\n      xEvent: 'UserPressedArrowKey',\n      moduleName: 'facets',\n      direction: 'ArrowRight'\n    }\n  ]\"\n>\n  <QuerySuggestions/>\n</KeyboardNavigation>\n```\n\n### Defining events to emit when reaching a navigation limit\n\n```vue\n<KeyboardNavigation\n  :navigationHijacker=\"[\n    {\n      xEvent: 'UserPressedArrowKey',\n      moduleName: 'searchBox',\n      direction: 'ArrowDown'\n    }\n  ]\"\n  :eventsForDirectionLimit=\"{\n    ArrowUp: 'UserReachedEmpathizeTop'\n  }\"\n>\n  <QuerySuggestions/>\n</KeyboardNavigation>\n```\n\n## Events\n\nAn event that the component will emit:\n\n- `UserReachedEmpathizeTop`: the event emitted by default when the container reaches its top\n  navigation, but more events can be emitted for each direction using the `eventsForDirectionLimit`\n  prop.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../utils/types';\n\n  /**\n   * Basic switch component to handle boolean values. This component receives\n   * its selected state using a prop, and emits a Vue event whenever the user\n   * clicks it.\n   *\n   * @public\n   */\n  @Component({\n    model: {\n      event: 'change'\n    }\n  })\n  export default class BaseSwitch extends Vue {\n    /**\n     * The selected value of the switch.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public value!: boolean;\n\n    /**\n     * Dynamic CSS classes to add to the switch component\n     * depending on its internal state.\n     *\n     * @returns A boolean dictionary with dynamic CSS classes.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-switch--is-selected x-selected': this.value\n      };\n    }\n\n    /**\n     * Emits a change event with the desired value of the switch.\n     *\n     * @internal\n     */\n    protected toggle(): void {\n      this.$emit('change', !this.value);\n    }\n  }\n","<template>\n  <button\n    @click=\"toggle\"\n    :aria-checked=\"value.toString()\"\n    :class=\"cssClasses\"\n    class=\"x-switch\"\n    role=\"switch\"\n  >\n    <div class=\"x-switch__handle\" />\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../utils/types';\n\n  /**\n   * Basic switch component to handle boolean values. This component receives\n   * its selected state using a prop, and emits a Vue event whenever the user\n   * clicks it.\n   *\n   * @public\n   */\n  @Component({\n    model: {\n      event: 'change'\n    }\n  })\n  export default class BaseSwitch extends Vue {\n    /**\n     * The selected value of the switch.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public value!: boolean;\n\n    /**\n     * Dynamic CSS classes to add to the switch component\n     * depending on its internal state.\n     *\n     * @returns A boolean dictionary with dynamic CSS classes.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-switch--is-selected x-selected': this.value\n      };\n    }\n\n    /**\n     * Emits a change event with the desired value of the switch.\n     *\n     * @internal\n     */\n    protected toggle(): void {\n      this.$emit('change', !this.value);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-switch {\n    --x-switch-height: 16px;\n    --x-switch-width: calc(2 * (var(--x-switch-height)) + 2 * var(--x-switch-padding));\n    --x-switch-background: #b3b3b3;\n    --x-switch-padding: 2px;\n    --x-switch-handle-size: var(--x-switch-height);\n    box-sizing: content-box;\n    height: var(--x-switch-height);\n    padding: var(--x-switch-padding);\n    border-radius: 99999px;\n    background: var(--x-switch-background);\n    width: var(--x-switch-width);\n    border: none;\n    transition: 0.25s ease-out background-color;\n    cursor: pointer;\n\n    &__handle {\n      background: #ffffff;\n      border-radius: 50%;\n      height: var(--x-switch-handle-size);\n      width: var(--x-switch-handle-size);\n      transition: 0.25s ease-out transform;\n      transform: translateX(var(--x-switch-translate-x, 0%));\n    }\n\n    &--is-selected {\n      --x-switch-translate-x: calc(var(--x-switch-padding) + var(--x-switch-width) / 2);\n      --x-switch-background: #1a1a1a;\n    }\n\n    &--sm {\n      --x-switch-height: 12px;\n    }\n\n    &--lg {\n      --x-switch-height: 24px;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits no events.\n\n## See it in action\n\nHere you have a basic example of how the switch is rendered.\n\n_Try clicking it to see how it changes its state_\n\n```vue live\n<template>\n  <BaseSwitch @change=\"value = !value\" :value=\"value\" />\n</template>\n\n<script>\n  import { BaseSwitch } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSwitchDemo',\n    components: {\n      BaseSwitch\n    },\n    data() {\n      return {\n        value: false\n      };\n    }\n  };\n</script>\n```\n\nThe switch component also supports using the `v-model` directive, to automatically handle its state\nchange:\n\n```vue live\n<template>\n  <BaseSwitch v-model=\"value\" />\n</template>\n\n<script>\n  import { BaseSwitch } from '@empathyco/x-components';\n\n  export default {\n    name: 'BaseSwitchDemo',\n    components: {\n      BaseSwitch\n    },\n    data() {\n      return {\n        value: false\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { ListItem } from '../utils/types';\n  import BaseGrid from './base-grid.vue';\n  import { XOn } from './decorators/bus.decorators';\n\n  /**\n   * The `BaseVariableColumnGrid` component is a wrapper of the `BaseGrid` component that listens to\n   * the `UserClickedColumnPicker` and the `ColumnsNumberProvided` events and passes the\n   * selected number of columns to the grid. It also allows to customize the grid items using the\n   * available `scopedSlots`.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      BaseGrid\n    }\n  })\n  export default class BaseVariableColumnGrid extends Vue {\n    /**\n     * Animation component that will be used to animate the grid.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The list of items to be rendered.\n     *\n     * @remarks The items must have an id property.\n     *\n     * @public\n     */\n    @Prop()\n    protected items?: ListItem[];\n\n    /**\n     * The columns to render by default in the grid. This property is used when the user has not\n     * selected any value in the column picker.\n     *\n     * @internal\n     */\n    @Prop({ default: 0 })\n    protected columns!: number;\n\n    /**\n     * The number of columns provided by a user interaction.\n     *\n     * @internal\n     */\n    protected providedColumns: number | null = null;\n\n    /**\n     * The number of columns to render in the grid.\n     *\n     * @returns The number of columns.\n     *\n     * @internal\n     */\n    protected get columnsToRender(): number {\n      return this.providedColumns === null ? this.columns : this.providedColumns;\n    }\n\n    /**\n     * Handler to update the number of columns when the user selects a new value.\n     *\n     * @param newColumns - The new columns value.\n     *\n     * @internal\n     */\n    @XOn(['ColumnsNumberProvided'])\n    setColumns(newColumns: number): void {\n      this.providedColumns = newColumns;\n    }\n  }\n","<template>\n  <BaseGrid :animation=\"animation\" :columns=\"columnsToRender\" :items=\"items\">\n    <template v-for=\"(_, name) in $scopedSlots\" v-slot:[name]=\"{ item }\">\n      <!--\n        @slot Customized item rendering. The slot name can either be default or the item's model\n         name.\n            @binding {GridItem} item - Item to render.\n      -->\n      <slot :name=\"name\" v-bind=\"{ item }\" />\n    </template>\n  </BaseGrid>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { ListItem } from '../utils/types';\n  import BaseGrid from './base-grid.vue';\n  import { XOn } from './decorators/bus.decorators';\n\n  /**\n   * The `BaseVariableColumnGrid` component is a wrapper of the `BaseGrid` component that listens to\n   * the `UserClickedColumnPicker` and the `ColumnsNumberProvided` events and passes the\n   * selected number of columns to the grid. It also allows to customize the grid items using the\n   * available `scopedSlots`.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      BaseGrid\n    }\n  })\n  export default class BaseVariableColumnGrid extends Vue {\n    /**\n     * Animation component that will be used to animate the grid.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The list of items to be rendered.\n     *\n     * @remarks The items must have an id property.\n     *\n     * @public\n     */\n    @Prop()\n    protected items?: ListItem[];\n\n    /**\n     * The columns to render by default in the grid. This property is used when the user has not\n     * selected any value in the column picker.\n     *\n     * @internal\n     */\n    @Prop({ default: 0 })\n    protected columns!: number;\n\n    /**\n     * The number of columns provided by a user interaction.\n     *\n     * @internal\n     */\n    protected providedColumns: number | null = null;\n\n    /**\n     * The number of columns to render in the grid.\n     *\n     * @returns The number of columns.\n     *\n     * @internal\n     */\n    protected get columnsToRender(): number {\n      return this.providedColumns === null ? this.columns : this.providedColumns;\n    }\n\n    /**\n     * Handler to update the number of columns when the user selects a new value.\n     *\n     * @param newColumns - The new columns value.\n     *\n     * @internal\n     */\n    @XOn(['ColumnsNumberProvided'])\n    setColumns(newColumns: number): void {\n      this.providedColumns = newColumns;\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nThe `BaseVariableColumnGrid` component is a wrapper of the `BaseGrid` component that listens to the\n`ColumnsNumberProvided` events and passes the selected amount of columns to the grid. It also allows\nyou to customize the grid items using the available `scopedSlots`.\n\n```vue\n<template>\n  <section class=\"results\">\n    <button @click=\"setColumns(4)\" class=\"column-picker-selector\">\n      <span class=\"column-picker-selector__text\">4 columns</span>\n    </button>\n    <BaseVariableColumnGrid :animation=\"animation\" :items=\"items\">\n      <template #default=\"{ item }\">\n        <span data-test=\"default-slot\">{{ item.id }}</span>\n      </template>\n      <template #result=\"{ item }\">\n        <span data-test=\"result-slot\">{{ 'Result ' + item.id }}</span>\n      </template>\n    </BaseVariableColumnGrid>\n  </section>\n</template>\n\n<script>\n  import { BaseVariableColumnGrid, StaggeredFadeAndSlide } from '@empathyco/x-components';\n\n  export default {\n    name: 'ResultsSection',\n    components: {\n      BaseVariableColumnGrid\n    },\n    data() {\n      return {\n        animation: StaggeredFadeAndSlide,\n        items: [\n          {\n            id: 'res-1',\n            modelName: 'Result',\n            name: 'Product 1'\n          },\n          {\n            id: 'res-2',\n            modelName: 'Result',\n            name: 'Product 2'\n          }\n        ]\n      };\n    },\n    methods: {\n      setColumns(columns) {\n        this.$x.emit('UserClickedColumnPicker', columns);\n      }\n    }\n  };\n</script>\n```\n\n### Playing with props\n\nConfiguring the default columns to be rendered. These columns will be the default value until the\n`ColumnsNumberProvided` is emitted and changes the value.\n\n```vue\n<template>\n  <section class=\"results\">\n    <button @click=\"setColumns(5)\" class=\"column-picker-selector\">\n      <span class=\"column-picker-selector__text\">5 columns</span>\n    </button>\n    <BaseVariableColumnGrid :animation=\"animation\" :items=\"items\" :columns=\"3\">\n      <template #default=\"{ item }\">\n        <span data-test=\"default-slot\">{{ item.id }}</span>\n      </template>\n      <template #result=\"{ item }\">\n        <span data-test=\"result-slot\">{{ 'Result ' + item.id }}</span>\n      </template>\n    </BaseVariableColumnGrid>\n  </section>\n</template>\n\n<script>\n  import { BaseVariableColumnGrid, StaggeredFadeAndSlide } from '@empathyco/x-components';\n\n  export default {\n    name: 'ResultsSection',\n    components: {\n      BaseVariableColumnGrid\n    },\n    data() {\n      return {\n        animation: StaggeredFadeAndSlide,\n        items: [\n          {\n            id: 'res-1',\n            modelName: 'Result',\n            name: 'Product 1'\n          },\n          {\n            id: 'res-2',\n            modelName: 'Result',\n            name: 'Product 2'\n          }\n        ]\n      };\n    },\n    methods: {\n      setColumns(columns) {\n        this.$x.emit('UserClickedColumnPicker', columns);\n      }\n    }\n  };\n</script>\n```\n\n### Customizing the items width\n\nThe `--x-size-min-width-grid-item` variable can be used to customize the min width of the grid\nitems.\n\n```vue\n<template>\n  <BaseVariableColumnGrid\n    :animation=\"animation\"\n    :items=\"items\"\n    style=\"--x-size-min-width-grid-item: 150px\"\n  >\n    <template #default=\"{ item }\">\n      {{ `Default slot content: ${item.id}` }}\n    </template>\n  </BaseVariableColumnGrid>\n</template>\n\n<script>\n  import { BaseVariableColumnGrid, StaggeredFadeAndSlide } from '@empathyco/x-components';\n\n  export default {\n    name: 'ResultsSection',\n    components: {\n      BaseVariableColumnGrid\n    },\n    data() {\n      return {\n        animation: StaggeredFadeAndSlide,\n        items: [\n          {\n            id: 'res-1',\n            modelName: 'Result',\n            name: 'Product 1'\n          },\n          {\n            id: 'res-2',\n            modelName: 'Result',\n            name: 'Product 2'\n          }\n        ]\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { ListItem } from '../utils/types';\n  import { toKebabCase } from '../utils/string';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * It renders a list of {@link ListItem} providing a slot for each `slotName` which depends on\n   * the `modelName`of the item.\n   *\n   * @public\n   */\n  @Component\n  export default class ItemsList extends Mixins(dynamicPropsMixin(['itemClass'])) {\n    /**\n     * Animation component that will be used to animate the list.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * List of items.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected items!: ListItem[];\n\n    /**\n     * The list of the items with additional properties.\n     *\n     * @returns A list of items with `dataTest`, `class` and the `slotName` for each item.\n     *\n     * @internal\n     */\n    protected get computedItems(): {\n      dataTest: string;\n      class: Array<string | undefined>;\n    }[] {\n      return this.items.map(item => {\n        const modelName = toKebabCase(item.modelName);\n        return {\n          ...item,\n          dataTest: `${modelName}s-list-item`,\n          class: [`x-${modelName}s-list-item`, this.itemClass],\n          slotName: modelName\n        };\n      });\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    v-if=\"items.length\"\n    tag=\"ul\"\n    class=\"x-items-list\"\n    data-test=\"items-list\"\n  >\n    <li\n      v-for=\"item in computedItems\"\n      :key=\"item.id\"\n      class=\"x-items-list__item\"\n      :class=\"item.class\"\n      :data-test=\"item.dataTest\"\n    >\n      <!--\n        @slot Custom item to render.\n          @binding {ListItem} item - Item data.\n      -->\n      <slot :item=\"item\" :name=\"item.slotName\">{{ item.id }}</slot>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { ListItem } from '../utils/types';\n  import { toKebabCase } from '../utils/string';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * It renders a list of {@link ListItem} providing a slot for each `slotName` which depends on\n   * the `modelName`of the item.\n   *\n   * @public\n   */\n  @Component\n  export default class ItemsList extends Mixins(dynamicPropsMixin(['itemClass'])) {\n    /**\n     * Animation component that will be used to animate the list.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * List of items.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected items!: ListItem[];\n\n    /**\n     * The list of the items with additional properties.\n     *\n     * @returns A list of items with `dataTest`, `class` and the `slotName` for each item.\n     *\n     * @internal\n     */\n    protected get computedItems(): {\n      dataTest: string;\n      class: Array<string | undefined>;\n    }[] {\n      return this.items.map(item => {\n        const modelName = toKebabCase(item.modelName);\n        return {\n          ...item,\n          dataTest: `${modelName}s-list-item`,\n          class: [`x-${modelName}s-list-item`, this.itemClass],\n          slotName: modelName\n        };\n      });\n    }\n  }\n</script>\n","\n  import { Prop, Provide, Component } from 'vue-property-decorator';\n  import { NoElement } from '../components/no-element';\n  import { FeatureLocation } from '../types';\n\n  /**\n   * Location Provider component.\n   * This component injects the location with value passed as prop.\n   *\n   * @public\n   */\n  @Component\n  export default class LocationProvider extends NoElement {\n    /**\n     * The {@link FeatureLocation} to provide.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    @Provide()\n    protected location!: FeatureLocation;\n  }\n","<script lang=\"ts\">\n  import { Prop, Provide, Component } from 'vue-property-decorator';\n  import { NoElement } from '../components/no-element';\n  import { FeatureLocation } from '../types';\n\n  /**\n   * Location Provider component.\n   * This component injects the location with value passed as prop.\n   *\n   * @public\n   */\n  @Component\n  export default class LocationProvider extends NoElement {\n    /**\n     * The {@link FeatureLocation} to provide.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    @Provide()\n    protected location!: FeatureLocation;\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events. However, events emitted by child components, will include the\n`location` prop value in its metadata.\n\n## See it in action\n\nIn this example, the `LocationProvider` component receives the `location` prop with the\n`predictive_layer` value. This value will then be combined with the `NextQueries` feature name,\n`next_query` to create a `QueryOrigin` string, which is used for tracking the performance of the\ndifferent tools that generate the query.\n\n```vue\n<template>\n  <LocationProvider location=\"predictive_layer\">\n    <NextQueries />\n  </LocationProvider>\n</template>\n<script>\n  import { LocationProvider } from '@empathyco/x-components';\n  import { NextQueries } from '@empathyco/x-components/next-queries';\n  export default {\n    name: 'LocationProviderDemo',\n    components: {\n      LocationProvider,\n      NextQueries\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../utils/types';\n  import { Debounce } from './decorators/debounce.decorators';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * This component allows for any other component or element inside it to be horizontally\n   * navigable. It also implements customizable buttons as well as other minor customizations to its\n   * general behavior.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `buttonClass`.\n   *\n   * @public\n   */\n  @Component\n  export default class SlidingPanel extends Mixins(\n    dynamicPropsMixin(['buttonClass', 'scrollContainerClass'])\n  ) {\n    /**\n     * Scroll factor that will dictate how much the scroll moves when pressing a navigation button.\n     *\n     * @public\n     */\n    @Prop({ default: 0.7 })\n    public scrollFactor!: number;\n\n    /**\n     * Would make the navigation buttons visible when they're needed or always hide them.\n     *\n     * @public\n     */\n    @Prop({ default: true })\n    public showButtons!: boolean;\n\n    /**\n     * When true, whenever the DOM content in the sliding panel slot changes, it will reset\n     * the scroll position to 0.\n     *\n     * @public\n     */\n    @Prop({ default: true })\n    public resetOnContentChange!: boolean;\n\n    /**\n     * Indicates if the scroll is at the start of the sliding panel.\n     *\n     * @internal\n     */\n    protected isScrollAtStart = true;\n\n    /**\n     * Indicates if the scroll is at the end of the sliding panel.\n     *\n     * @internal\n     */\n    protected isScrollAtEnd = true;\n\n    /**\n     * HTMLElement referencing the scroll of the component.\n     *\n     * @internal\n     */\n    public $refs!: {\n      scrollContainer: HTMLElement;\n    };\n\n    /**\n     * CSS classes to apply based on the scroll position.\n     *\n     * @returns The CSS classes to apply.\n     *\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-sliding-panel-at-start': this.isScrollAtStart,\n        'x-sliding-panel-at-end': this.isScrollAtEnd\n      };\n    }\n\n    /**\n     * Initialises browser platform code:\n     * - Creates a mutation observer to detect content changes and reset scroll position.\n     * - Stores initial size and scroll position values.\n     *\n     * @internal\n     */\n    mounted(): void {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.debouncedUpdateScrollPosition);\n      resizeObserver.observe(this.$el);\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const contentChangedObserver = new MutationObserver(this.restoreAndUpdateScroll);\n      this.$watch(\n        () => this.resetOnContentChange,\n        shouldReset => {\n          if (shouldReset) {\n            contentChangedObserver.observe(this.$refs.scrollContainer, {\n              attributes: false,\n              childList: true,\n              subtree: true,\n              characterData: false\n            });\n          } else {\n            contentChangedObserver.disconnect();\n          }\n        },\n        { immediate: true }\n      );\n      this.$on('hook:beforeDestroy', () => {\n        contentChangedObserver.disconnect();\n        resizeObserver.disconnect();\n      });\n\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Resets the scroll and updates the values of the scroll for the buttons to react.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    restoreAndUpdateScroll(): void {\n      this.$refs.scrollContainer.scroll({ left: 0, behavior: 'smooth' });\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Updates the values of the scroll positions to show or hide the buttons depending on it.\n     *\n     * @internal\n     */\n    protected updateScrollPosition(): void {\n      if (this.$refs.scrollContainer !== undefined) {\n        const { scrollLeft, clientWidth, scrollWidth } = this.$refs.scrollContainer;\n        this.isScrollAtStart = !scrollLeft;\n        /* The 2 px extra is to fix some cases in some resolutions where the scroll + client size is\n         *  less than the scroll width even when the scroll is at the end */\n        this.isScrollAtEnd = scrollLeft + clientWidth + 2 >= scrollWidth;\n      }\n    }\n\n    /**\n     * Debounced version of the {@link SlidingPanel.updateScrollPosition | updateScrollPosition}\n     * method.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    debouncedUpdateScrollPosition(): void {\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Scrolls the wrapper element to the left.\n     *\n     * @internal\n     */\n    protected scrollLeft(): void {\n      this.scrollTo(-this.$refs.scrollContainer.clientWidth);\n    }\n\n    /**\n     * Scrolls the wrapper element to the right.\n     *\n     * @internal\n     */\n    protected scrollRight(): void {\n      this.scrollTo(this.$refs.scrollContainer.clientWidth);\n    }\n\n    /**\n     * Scrolls the wrapper element towards the provided scroll value.\n     *\n     * @param scrollValue - The value the scroll will go towards.\n     *\n     * @internal\n     */\n    protected scrollTo(scrollValue: number): void {\n      this.$refs.scrollContainer.scrollBy({\n        left: scrollValue * this.scrollFactor,\n        behavior: 'smooth'\n      });\n    }\n  }\n","<template>\n  <div v-if=\"$slots.default\" class=\"x-sliding-panel\" :class=\"cssClasses\" data-test=\"sliding-panel\">\n    <button\n      v-if=\"showButtons\"\n      @click=\"scrollLeft\"\n      class=\"x-sliding-panel__button x-button x-sliding-panel-button-left\"\n      :class=\"buttonClass\"\n      data-test=\"sliding-panel-left-button\"\n    >\n      <!-- @slot Left button content -->\n      <slot name=\"sliding-panel-left-button\">ᐸ</slot>\n    </button>\n    <div\n      ref=\"scrollContainer\"\n      @scroll=\"debouncedUpdateScrollPosition\"\n      @transitionend=\"debouncedUpdateScrollPosition\"\n      @animationend=\"debouncedUpdateScrollPosition\"\n      :class=\"scrollContainerClass\"\n      class=\"x-sliding-panel__scroll\"\n      data-test=\"sliding-panel-scroll\"\n    >\n      <!-- @slot (Required) Sliding panel content -->\n      <slot />\n    </div>\n    <button\n      v-if=\"showButtons\"\n      @click=\"scrollRight\"\n      class=\"x-sliding-panel__button x-button x-sliding-panel-button-right\"\n      :class=\"buttonClass\"\n      data-test=\"sliding-panel-right-button\"\n    >\n      <!-- @slot Right button content -->\n      <slot name=\"sliding-panel-right-button\">ᐳ</slot>\n    </button>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { VueCSSClasses } from '../utils/types';\n  import { Debounce } from './decorators/debounce.decorators';\n  import { dynamicPropsMixin } from './dynamic-props.mixin';\n\n  /**\n   * This component allows for any other component or element inside it to be horizontally\n   * navigable. It also implements customizable buttons as well as other minor customizations to its\n   * general behavior.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `buttonClass`.\n   *\n   * @public\n   */\n  @Component\n  export default class SlidingPanel extends Mixins(\n    dynamicPropsMixin(['buttonClass', 'scrollContainerClass'])\n  ) {\n    /**\n     * Scroll factor that will dictate how much the scroll moves when pressing a navigation button.\n     *\n     * @public\n     */\n    @Prop({ default: 0.7 })\n    public scrollFactor!: number;\n\n    /**\n     * Would make the navigation buttons visible when they're needed or always hide them.\n     *\n     * @public\n     */\n    @Prop({ default: true })\n    public showButtons!: boolean;\n\n    /**\n     * When true, whenever the DOM content in the sliding panel slot changes, it will reset\n     * the scroll position to 0.\n     *\n     * @public\n     */\n    @Prop({ default: true })\n    public resetOnContentChange!: boolean;\n\n    /**\n     * Indicates if the scroll is at the start of the sliding panel.\n     *\n     * @internal\n     */\n    protected isScrollAtStart = true;\n\n    /**\n     * Indicates if the scroll is at the end of the sliding panel.\n     *\n     * @internal\n     */\n    protected isScrollAtEnd = true;\n\n    /**\n     * HTMLElement referencing the scroll of the component.\n     *\n     * @internal\n     */\n    public $refs!: {\n      scrollContainer: HTMLElement;\n    };\n\n    /**\n     * CSS classes to apply based on the scroll position.\n     *\n     * @returns The CSS classes to apply.\n     *\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-sliding-panel-at-start': this.isScrollAtStart,\n        'x-sliding-panel-at-end': this.isScrollAtEnd\n      };\n    }\n\n    /**\n     * Initialises browser platform code:\n     * - Creates a mutation observer to detect content changes and reset scroll position.\n     * - Stores initial size and scroll position values.\n     *\n     * @internal\n     */\n    mounted(): void {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const resizeObserver = new ResizeObserver(this.debouncedUpdateScrollPosition);\n      resizeObserver.observe(this.$el);\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const contentChangedObserver = new MutationObserver(this.restoreAndUpdateScroll);\n      this.$watch(\n        () => this.resetOnContentChange,\n        shouldReset => {\n          if (shouldReset) {\n            contentChangedObserver.observe(this.$refs.scrollContainer, {\n              attributes: false,\n              childList: true,\n              subtree: true,\n              characterData: false\n            });\n          } else {\n            contentChangedObserver.disconnect();\n          }\n        },\n        { immediate: true }\n      );\n      this.$on('hook:beforeDestroy', () => {\n        contentChangedObserver.disconnect();\n        resizeObserver.disconnect();\n      });\n\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Resets the scroll and updates the values of the scroll for the buttons to react.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    restoreAndUpdateScroll(): void {\n      this.$refs.scrollContainer.scroll({ left: 0, behavior: 'smooth' });\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Updates the values of the scroll positions to show or hide the buttons depending on it.\n     *\n     * @internal\n     */\n    protected updateScrollPosition(): void {\n      if (this.$refs.scrollContainer !== undefined) {\n        const { scrollLeft, clientWidth, scrollWidth } = this.$refs.scrollContainer;\n        this.isScrollAtStart = !scrollLeft;\n        /* The 2 px extra is to fix some cases in some resolutions where the scroll + client size is\n         *  less than the scroll width even when the scroll is at the end */\n        this.isScrollAtEnd = scrollLeft + clientWidth + 2 >= scrollWidth;\n      }\n    }\n\n    /**\n     * Debounced version of the {@link SlidingPanel.updateScrollPosition | updateScrollPosition}\n     * method.\n     *\n     * @internal\n     */\n    @Debounce(100, { leading: true })\n    debouncedUpdateScrollPosition(): void {\n      this.updateScrollPosition();\n    }\n\n    /**\n     * Scrolls the wrapper element to the left.\n     *\n     * @internal\n     */\n    protected scrollLeft(): void {\n      this.scrollTo(-this.$refs.scrollContainer.clientWidth);\n    }\n\n    /**\n     * Scrolls the wrapper element to the right.\n     *\n     * @internal\n     */\n    protected scrollRight(): void {\n      this.scrollTo(this.$refs.scrollContainer.clientWidth);\n    }\n\n    /**\n     * Scrolls the wrapper element towards the provided scroll value.\n     *\n     * @param scrollValue - The value the scroll will go towards.\n     *\n     * @internal\n     */\n    protected scrollTo(scrollValue: number): void {\n      this.$refs.scrollContainer.scrollBy({\n        left: scrollValue * this.scrollFactor,\n        behavior: 'smooth'\n      });\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-sliding-panel {\n    align-items: center;\n    display: flex;\n    flex-flow: row nowrap;\n    position: relative;\n\n    &__button {\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      transition: all ease-out 0.2s;\n      z-index: 2; /* To overlay the design system gradient with z-index:1 */\n    }\n    .x-sliding-panel-button-left {\n      left: 0;\n    }\n\n    .x-sliding-panel-button-right {\n      right: 0;\n    }\n\n    &__scroll {\n      display: flex;\n      flex: 100%;\n      flex-flow: row nowrap;\n      overflow-x: auto;\n      overflow-y: hidden;\n      scrollbar-width: none; // Firefox\n      -ms-overflow-style: none; // IE\n\n      // Chrome, Edge & Safari\n      &::-webkit-scrollbar {\n        display: none;\n      }\n\n      > * {\n        flex: 0 0 auto;\n      }\n    }\n\n    &:not(.x-sliding-panel-show-buttons-on-hover):not(.x-sliding-panel-at-start) {\n      .x-sliding-panel-button-left {\n        opacity: 1;\n        pointer-events: all;\n      }\n    }\n\n    &:not(.x-sliding-panel-show-buttons-on-hover):not(.x-sliding-panel-at-end) {\n      .x-sliding-panel-button-right {\n        opacity: 1;\n        pointer-events: all;\n      }\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits no events.\n\n## See it in action\n\nSimplest implementation of the component, just a list-based component inside its slot.\n\n```vue\n<template>\n  <SlidingPanel>\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n    <div class=\"item\">Item 4</div>\n  </SlidingPanel>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n\n### Play with props\n\n#### Modifying scroll buttons travel distance\n\nEdit how much the scroll travels when navigating with the buttons by changing the `scrollFactor`\nprop.\n\n```vue\n<template>\n  <SlidingPanel :scrollFactor=\"1.5\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n    <div class=\"item\">Item 4</div>\n  </SlidingPanel>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n\n#### Hiding scroll buttons\n\nHide the navigational buttons completely by setting the `showButtons` prop to `false`. This is\nintended to be used when other scrolling options are available, like in mobile, where you can scroll\njust by swiping.\n\n```vue\n<template>\n  <SlidingPanel :showButtons=\"false\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n    <div class=\"item\">Item 4</div>\n  </SlidingPanel>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n\n#### Customizing the content with classes\n\nThe `buttonClass` prop can be used to add classes to the buttons.\n\nThe `scrollContainerClass` prop can be used to add classes to the scroll content.\n\n```vue\n<template>\n  <SlidingPanel buttonClass=\"x-button--round\" scrollContainerClass=\"x-sliding-panel-fade\">\n    <div class=\"item\">Item 1</div>\n    <div class=\"item\">Item 2</div>\n    <div class=\"item\">Item 3</div>\n    <div class=\"item\">Item 4</div>\n  </SlidingPanel>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n\n#### Disabling reset the scroll when content changes\n\nBy default, whenever the content of the sliding panel changes, it auto resets its scroll position.\nYou can disable this behavior setting the `resetOnContentChange` prop to `false`.\n\n```vue\n<template>\n  <div>\n    <button @click=\"items++\">Add item</button>\n    <label>\n      <input type=\"checkbox\" v-model=\"resetOnContentChange\" />\n      Reset content onchange\n    </label>\n    <SlidingPanel :resetOnContentChange=\"resetOnContentChange\">\n      <div class=\"item\" v-for=\"item in items\" :key=\"item\">Item {{ item }}</div>\n    </SlidingPanel>\n  </div>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    },\n    data() {\n      return {\n        items: 4,\n        resetOnContentChange: false\n      };\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n\n## Extending the component\n\n### Overriding Button content\n\nBy default the buttons show an arrow depicting the direction the scroll would go to when clicked,\nbut this content can be customized with anything, from characters to SVG and images.\n\n```vue\n<template>\n  <SlidingPanel>\n    <template #sliding-panel-left-button>Left</template>\n    <template #default>\n      <div class=\"item\">Item 1</div>\n      <div class=\"item\">Item 2</div>\n      <div class=\"item\">Item 3</div>\n      <div class=\"item\">Item 4</div>\n    </template>\n    <template #sliding-panel-right-button>Right</template>\n  </SlidingPanel>\n</template>\n\n<script>\n  import { SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'SlidingPanelDemo',\n    components: {\n      SlidingPanel\n    }\n  };\n</script>\n\n<style>\n  .x-sliding-panel {\n    width: 200px;\n  }\n\n  .item {\n    display: inline-block;\n    width: 100px;\n  }\n</style>\n```\n</docs>\n","import Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { ListItem } from '../utils/types';\nimport { XInject, XProvide } from './decorators/injection.decorators';\nimport { LIST_ITEMS_KEY } from './decorators/injection.consts';\n\n/**\n * Mixin to facilitate providing and injecting a list of list items. Injected list is\n * available at `injectedListItems`, and the provided list should be stored in `items`.\n *\n * @public\n */\n@Component\nexport class ItemsListInjectionMixin extends Vue {\n  /**\n   * The list items of the entity that uses the mixin from the state.\n   *\n   * @remarks It should be defined in the component that uses the mixin and it's intended to be\n   * filled with items from the state. Vue doesn't allow mixins as abstract classes.\n   *\n   * @internal\n   */\n  protected stateItems!: ListItem[];\n\n  /**\n   * The computed list items of the entity that uses the mixin.\n   *\n   * @remarks It should be overridden in the component that uses the mixin and it's intended to be\n   * filled with items from the state. Vue doesn't allow mixins as abstract classes.\n   * @returns An empty array as fallback in case it is not overridden.\n   * @internal\n   */\n  @XProvide(LIST_ITEMS_KEY)\n  public get items(): ListItem[] {\n    return [];\n  }\n\n  /**\n   * It injects {@link ListItem} provided by an ancestor as injectedListItems.\n   *\n   * @internal\n   */\n  @XInject(LIST_ITEMS_KEY)\n  public injectedListItems: ListItem[] | undefined;\n}\n","import { DirectiveOptions } from 'vue';\nimport { Vue } from 'vue/types/vue';\nimport { InfiniteScroll, ObserverOptions } from './infinite-scroll.types';\n\nconst VIEWPORT_ID = 'viewport';\n\n/**\n * A record which contains {@link IntersectionObserver} objects indexed by the id of the scrollable\n * container.\n */\nconst state: Record<string, IntersectionObserver> = {};\n\n/**\n * Custom Vue directive for infinite scroll.\n *\n * This directive uses the IntersectionObserver API to handle the intersection between the\n * children and the scrollable container. The content of the children moves up on scroll and when it\n * reaches the end, the IntersectionObserver triggers that both elements are intersecting.\n *\n * How it works.\n *\n * As a summary, if the scroll reaches the end, the `vNode.context.onInfiniteScrollEnd` function\n * implemented by the component which imports the directive, is executed. If you provide a margin in\n * the directive options, this function is triggered when the scroll reaches the end minus that\n * amount of pixels. A default margin of 200px is set.\n *\n * Usage.\n *\n * The directive has to be set in the target element. It can receive an argument which will be used\n * to determine the scrollable container. Possible values:\n * `html`: will set the <html> as the scrollable container.\n * `body`: will set the <body> as the scrollable container.\n * ID: will set the DOM element with the provided id as the scrollable container.\n *\n * If no argument is provided the scrollable container fallbacks to the viewport.\n *\n * @example How to use it.\n *\n * ```html\n *  <ResultsList v-infinite-scroll:html>\n * ```\n *\n * ```html\n *  <ResultsList v-infinite-scroll:body>\n * ```\n *\n * ```html\n *  <BaseScroll id='scroll-test'>\n *    <ResultsList v-infinite-scroll:scroll-test>\n *  </BaseScroll>\n * ```\n *\n * ```html\n *  <ResultsList v-infinite-scroll=\"{ margin: 40 }\">\n * ```\n *\n * @public\n */\nexport const infiniteScroll: DirectiveOptions = {\n  inserted(element, { arg: id = VIEWPORT_ID, value: { margin = 200 } = {} }, vNode) {\n    const root = getRoot(element, id);\n\n    state[id] = createIntersectionObserver({\n      root,\n      margin,\n      vNode\n    });\n\n    state[id].observe(element);\n  },\n\n  unbind(_element, { arg: id = VIEWPORT_ID }) {\n    if (state[id]) {\n      state[id].disconnect();\n      delete state[id];\n    }\n  }\n};\n\n/**\n * Retrieves the root element for the provided id.\n *\n * @param element - Target element where directive is set.\n * @param id - String identifier.\n * @returns HTMLElement or null.\n */\nfunction getRoot(element: HTMLElement, id: string): HTMLElement | null {\n  switch (id) {\n    case 'html':\n      return null;\n    case 'body':\n      return document.body;\n    case VIEWPORT_ID:\n      return null;\n    default:\n      return element.closest(`#${id}`)!;\n  }\n}\n\n/**\n * Creates an IntersectionObserver.\n *\n * When the observer is fired, it will execute the {@link InfiniteScroll.onInfiniteScrollEnd}\n * function implemented in the provided vNode component instance.\n *\n * @param options - ObserverOptions.\n * @returns IntersectionObserver.\n */\nfunction createIntersectionObserver({\n  root,\n  margin,\n  vNode\n}: ObserverOptions): IntersectionObserver {\n  // This hack allows the root element to always contain the observed element.\n  // Not overpass the top margin more than 1700000 because it doesn't work in Android chrome\n  const rootMargin = `1000000% 0px ${margin}px 0px`;\n\n  return new IntersectionObserver(\n    ([entry]) => {\n      if (entry.isIntersecting) {\n        (vNode.componentInstance as Vue & InfiniteScroll)?.onInfiniteScrollEnd();\n      }\n    },\n    {\n      threshold: 0.99,\n      rootMargin,\n      root\n    }\n  );\n}\n","import { noOp } from './function';\n/**\n * Symbol used to know if a promise is cancelled.\n *\n * @internal\n */\nexport const CancelSymbol = Symbol('cancelled-promise');\n/**\n * The type returned by the {@link cancellablePromise} function.\n *\n * @internal\n */\nexport interface CancellablePromiseFunction<T, K = unknown> {\n  /**\n   * The resultant promise that groups the original promise, passed as the first parameter, and the\n   * promise created in cancellablePromise, which rejects the resultant promise if called.\n   */\n  promise: Promise<T>;\n  /**\n   * Function to cancel the resultant promise. This function triggers the reject of the second\n   * promise of the promise race. The first parameter is the resultant promise rejection value.\n   */\n  cancel: (payload?: K) => void;\n}\n\n/**\n * Util function that returns an object which contains a promise, result of Promise.race call\n * between the original one passed as parameter and another one, created within the function, used\n * for reject in the resultant promise manually. If the cancel method is triggered, the\n * resultant promise is rejected.\n *\n * @remarks The promise function passed as first param executes its own async code ALWAYS although\n * it's cancelled or not. The payload of the resultant promise is the returned by the function that\n * ends first. So, the promise is not cancelled exactly. The parameter first passed to cancel is the\n * resultant promise rejection value.\n *\n * If you need to check if the promise is not being rejected with CancelSymbol (on purpose).\n * You should check the error type in the cancellable catch using the payload.\n *\n * @param promise - Original promise.\n * @param cancelCallback - Optional callback to be called on cancel.\n * @returns CancellablePromiseFunction {@link CancellablePromiseFunction}.\n *\n * @internal\n */\nexport function cancellablePromise<T, K = unknown>(\n  promise: Promise<T>,\n  cancelCallback?: (payload?: K) => void\n): CancellablePromiseFunction<T, K> {\n  let cancel: (payload?: K) => void = noOp;\n\n  const cancelPromise = new Promise<never>((_, reject) => {\n    cancel = payload => {\n      reject(CancelSymbol);\n      cancelCallback?.(payload);\n    };\n  });\n\n  return {\n    promise: Promise.race([promise, cancelPromise]),\n    cancel\n  };\n}\n","import { cancellablePromise, CancelSymbol } from '../../utils/cancellable-promise';\nimport { XActionContext } from '../actions.types';\nimport { StatusMutations, StatusState } from './status-store.utils';\n\n/**\n * Utility to create an action that requests and save some data asynchronously, with the\n * option to cancel the request at any moment. This factory provides with the standard flow\n * for requesting, cancelling, handling errors for a module, while also taking care of its status.\n *\n * @param hooks - The {@link FetchAndSaveHooks} hooks to create the action.\n *\n * @public\n * @returns An action to fetch and save some data, and an action to cancel the last request.\n */\nexport function createFetchAndSaveActions<\n  // Using `object` type to ensure no actions/getters can be used.\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\n  Request,\n  Response\n>({\n  fetch,\n  onSuccess,\n  // TODO add logger\n  // eslint-disable-next-line no-console\n  onError = console.error,\n  onCancel\n}: FetchAndSaveHooks<Context, Request, Response>): FetchAndSaveActions<Context, Request> {\n  let cancelPreviousRequest: undefined | (() => void);\n\n  /**\n   * Called asynchronously after a response has been received.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @param response - The fetch response.\n   * @returns A Promise that resolves after handling the response.\n   */\n  function handleResponse(context: Context, response: Response): Promise<void> {\n    return Promise.resolve(onSuccess(context, response)).then(() => {\n      context.commit('setStatus', 'success');\n    });\n  }\n\n  /**\n   * Called immediately after a request has been cancelled.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   */\n  function handleCancel(context: Context): void {\n    cancelPreviousRequest = undefined;\n    context.commit('setStatus', 'success');\n    onCancel?.();\n  }\n\n  /**\n   * Called asynchronously whenever an error happens in the fetch and save flow.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @param error - The error information.\n   */\n  function handleError(context: Context, error: unknown): void {\n    if (error !== CancelSymbol) {\n      context.commit('setStatus', 'error');\n      onError(error);\n    }\n  }\n\n  // eslint-disable-next-line\n  /** @see FetchAndSaveActions.fetchAndSave */\n  function fetchAndSave(context: Context, request: Request): Promise<void> {\n    cancelPrevious();\n    context.commit('setStatus', 'loading');\n    const { promise, cancel } = cancellablePromise(fetch(context, request), () => {\n      handleCancel(context);\n    });\n\n    cancelPreviousRequest = cancel;\n    return promise\n      .then(response => handleResponse(context, response))\n      .catch(error => handleError(context, error));\n  }\n\n  // eslint-disable-next-line\n  /** @see FetchAndSaveActions.cancelPrevious */\n  function cancelPrevious(): void {\n    cancelPreviousRequest?.();\n  }\n\n  return {\n    fetchAndSave,\n    cancelPrevious\n  };\n}\n\n/**\n * Options to use with the {@link createFetchAndSaveActions} factory.\n *\n * @public\n */\nexport interface FetchAndSaveHooks<\n  // Using `object` type to ensure no actions/getters can be used.\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\n  Request,\n  Response\n> {\n  /**\n   * Retrieves and returns asynchronously some data.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @param request - The request object used for fetching.\n   * @returns A Promise resolved with the response of the fetch request.\n   */\n  fetch(context: Context, request: Request): Promise<Response>;\n  /**\n   * Asynchronous callback executed when the {@link FetchAndSaveHooks.fetch} is\n   * performed successfully.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @param response - The data returned by {@link FetchAndSaveHooks.fetch}.\n   */\n  onSuccess(context: Context, response: Response): void;\n  /**\n   * Asynchronous callback executed when either the {@link FetchAndSaveHooks.fetch}\n   * or {@link FetchAndSaveHooks.onSuccess} methods fail.\n   *\n   * @param error - The error that triggered this callback.\n   */\n  onError?(error: unknown): void;\n  /**\n   * Synchronous callback executed when the request is cancelled. This can happen mainly for two\n   * reasons:\n   * - The {@link FetchAndSaveActions.cancelPrevious} action is dispatched.\n   * - A new {@link FetchAndSaveActions.fetchAndSave} is dispatched before the previous one was\n   * resolved.\n   */\n  onCancel?(): void;\n}\n\n/**\n * Actions returned from the {@link createFetchAndSaveActions}.\n *\n * @public\n */\nexport interface FetchAndSaveActions<\n  // Using `object` type to ensure no actions/getters can be used.\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  Context extends XActionContext<StatusState, object, StatusMutations, object>,\n  Request\n> {\n  /**\n   * Action that requests and saves the response.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @returns A promise that resolves after saving the response.\n   */\n  fetchAndSave: (context: Context, request: Request) => void | Promise<void>;\n  /**\n   * Action that cancels the previous request call if it stills in progress.\n   */\n  cancelPrevious: () => void;\n}\n","/**\n * Status state type, containing a property to hold the status property.\n *\n * @public\n */\nexport interface StatusState {\n  /** The request status. Useful for changing the displayed component depending on whether the\n   * request has succeeded, has not been fulfilled or has failed. */\n  status: RequestStatus;\n}\n\n/**\n * Status mutations, containing a method to change the current status.\n *\n * @public\n */\nexport interface StatusMutations {\n  /**\n   * Sets the request status.\n   *\n   * @param status - The new request status.\n   */\n  setStatus(status: RequestStatus): void;\n}\n\n/**\n * The possible status of a request:\n * - Success: The request has resolved successfully.\n * - Loading: The request is in process, waiting for a response.\n * - Error: The request has failed.\n *\n * @public\n */\nexport type RequestStatus = 'success' | 'loading' | 'error' | 'initial';\n\n/**\n * Sets the request status. Can be used as a mutation.\n *\n * @param state - The {@link https://vuex.vuejs.org/guide/state.html | state} provided by Vuex.\n * @param status - The new request status.\n * @public\n */\nexport function setStatus(state: StatusState, status: RequestStatus): void {\n  state.status = status;\n}\n","import { Filter, RawFilter } from '@empathyco/x-types';\n\n/**\n * Compares if two lists contains the same filters.\n *\n * @param someFilters - A list of filters to compare.\n * @param anotherFilters - Another list of filters to compare.\n *\n * @returns True if the two lists of filters are equal, which means that they have the same\n * filters. The position of the filter does not matter for this check.\n *\n * @public\n */\nexport function areFiltersDifferent(someFilters: Filter[], anotherFilters: Filter[]): boolean {\n  return (\n    someFilters.length !== anotherFilters.length ||\n    someFilters.some(filter => !anotherFilters.find(otherFilter => otherFilter.id === filter.id))\n  );\n}\n\n/**\n * Helper method which creates the filter entity from the filter ir of the url.\n *\n * @param filterIds - List of filter ids from the url.\n *\n * @returns A list of  filters.\n *\n * @public\n */\nexport function createRawFilters(filterIds: Array<Filter['id']>): RawFilter[] {\n  return filterIds.map(filterId => {\n    return {\n      id: filterId as string,\n      modelName: 'RawFilter',\n      selected: true\n    };\n  });\n}\n","import { isStringEmpty } from './string';\n\n/**\n * Regex for splitting a query into its words.\n *\n * @public\n */\nexport const SPLIT_WORDS_REGEX = /[\\s-]/;\n\n/**\n * Compares two queries to know if the new one is a refined query from the previous one or a new\n * one.\n *\n * A refined query is a query which has the previous query or part of it.\n * Example:\n * - previousQuery = 'lego star'.\n * - newQuery = 'lego star wars'.\n *\n * Example:\n * - previousQuery = 'lego star wars'.\n * - newQuery = 'lego star'.\n *\n * A new query is a query which has not the previous query.\n * Example:\n * - previousQuery = 'lego star'.\n * - newQuery = 'lego wars'.\n *\n * In this case, it is changing the word set, because a word is changed by another one, so\n * this is changing the search intention.\n *\n * @param newQuery - The new query.\n * @param previousQuery - The previous query.\n *\n * @returns A boolean which flags if the query is refined or not.\n *\n * @public\n */\nexport function isNewQuery(newQuery: string, previousQuery: string): boolean {\n  const isNewQueryEmpty = isStringEmpty(newQuery);\n  const isPreviousQueryEmpty = isStringEmpty(previousQuery);\n  const previousQueryWords = previousQuery.split(SPLIT_WORDS_REGEX);\n  const newQueryWords = newQuery.split(SPLIT_WORDS_REGEX);\n  return (\n    !previousQueryWords.every(previousQueryWord =>\n      newQueryWords.some(\n        newQueryWord =>\n          newQueryWord.includes(previousQueryWord) || previousQueryWord.includes(newQueryWord)\n      )\n    ) ||\n    (isNewQueryEmpty && !isPreviousQueryEmpty) ||\n    (!isNewQueryEmpty && isPreviousQueryEmpty)\n  );\n}\n","/**\r\n * Const to use in the {@link BooleanFilterModelName} Type definition and also in Type Guards.\r\n *\r\n * @public\r\n */\r\nvar BooleanFilterModelNames = [\r\n    'SimpleFilter',\r\n    'HierarchicalFilter',\r\n    'NumberRangeFilter'\r\n];\n\nexport { BooleanFilterModelNames };\n","/**\r\n * Type guard to check if a filter is a {@link FacetFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns  True if the filter is a {@link FacetFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isFacetFilter(filter) {\r\n    return 'facetId' in filter;\r\n}\n\nexport { isFacetFilter };\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Dictionary } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State, xComponentMixin } from '../../../components';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { NoElement } from '../../../components/no-element';\n  import { XEventsTypes } from '../../../wiring';\n  import { ScrollComponentState } from '../store';\n  import { scrollXModule } from '../x-module';\n  import { MainScrollId } from './scroll.const';\n\n  /**\n   * The `ScrollToTop` component is a button that the user can click to make a container scroll\n   * up to its initial position.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)],\n    components: { BaseEventButton }\n  })\n  export default class ScrollToTop extends Vue {\n    /**\n     * Animation to use for showing/hiding the button.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    public animation!: Vue | string;\n\n    /**\n     * Threshold in pixels from the top to show the button.\n     *\n     * @public\n     */\n    @Prop()\n    public thresholdPx?: number;\n\n    /**\n     * Id of the target scroll component.\n     *\n     * @public\n     */\n    @Prop({ default: MainScrollId })\n    public scrollId!: string;\n\n    /**\n     * State of all the scroll components in this module.\n     *\n     * @internal\n     */\n    // TODO: Directly retrieve the needed data in this computed property\n    @State('scroll', 'data')\n    public scrollPositionsMap!: Dictionary<ScrollComponentState>;\n\n    /**\n     * The scroll data retrieved for this component.\n     *\n     * @returns The scroll data for this component if a valid {@link ScrollToTop.scrollId} has been\n     * passed. Otherwise it returns `null`.\n     * @internal\n     */\n    protected get scrollData(): ScrollComponentState {\n      return this.scrollId && this.scrollPositionsMap[this.scrollId]\n        ? this.scrollPositionsMap[this.scrollId]\n        : {\n            position: 0,\n            direction: 'UP',\n            hasReachedStart: false,\n            hasAlmostReachedEnd: false,\n            hasReachedEnd: false\n          };\n    }\n\n    /**\n     * Event that will be emitted when the scroll to top is clicked.\n     *\n     * @returns The event to be emitted when the scroll to top is clicked. The id as a payload.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return { UserClickedScrollToTop: this.scrollId };\n    }\n\n    /**\n     * Checks if the thresholdPx prop has been provided and if it is a number.\n     *\n     * @returns If the thresholdPx is a number or not.\n     * @internal\n     */\n    protected get useThresholdStrategy(): boolean {\n      return typeof this.thresholdPx === 'number';\n    }\n\n    /**\n     * Checks if the threshold has been reached in case the threshold strategy is in use.\n     *\n     * @returns If the scrollTop is bigger than the thresholdPx.\n     * @internal\n     */\n    protected get isThresholdReached(): boolean {\n      return this.useThresholdStrategy && this.scrollData.position > this.thresholdPx!;\n    }\n\n    /**\n     * Whether if the button is visible or not depending on the strategy being used.\n     *\n     * @returns If the button should be visible or not.\n     * @internal\n     */\n    protected get isVisible(): boolean {\n      return this.useThresholdStrategy ? this.isThresholdReached : this.hasAlmostReachedScrollEnd;\n    }\n\n    /**\n     * Returns if the scroll has almost reached its end or not.\n     *\n     * @returns True if the scroll has almost reached the end and the user is still scrolling down.\n     * @internal\n     */\n    protected get hasAlmostReachedScrollEnd(): boolean {\n      return this.scrollData.hasAlmostReachedEnd && this.scrollData.direction === 'DOWN';\n    }\n  }\n","<template>\n  <component :is=\"animation\">\n    <BaseEventButton\n      v-if=\"isVisible\"\n      v-on=\"$listeners\"\n      class=\"x-scroll-to-top x-button\"\n      data-test=\"scroll-to-top\"\n      aria-label=\"Scroll to top\"\n      :events=\"events\"\n    >\n      <!-- @slot (Required) Button content with a text, an icon or both -->\n      <slot />\n    </BaseEventButton>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { Dictionary } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State, xComponentMixin } from '../../../components';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { NoElement } from '../../../components/no-element';\n  import { XEventsTypes } from '../../../wiring';\n  import { ScrollComponentState } from '../store';\n  import { scrollXModule } from '../x-module';\n  import { MainScrollId } from './scroll.const';\n\n  /**\n   * The `ScrollToTop` component is a button that the user can click to make a container scroll\n   * up to its initial position.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)],\n    components: { BaseEventButton }\n  })\n  export default class ScrollToTop extends Vue {\n    /**\n     * Animation to use for showing/hiding the button.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    public animation!: Vue | string;\n\n    /**\n     * Threshold in pixels from the top to show the button.\n     *\n     * @public\n     */\n    @Prop()\n    public thresholdPx?: number;\n\n    /**\n     * Id of the target scroll component.\n     *\n     * @public\n     */\n    @Prop({ default: MainScrollId })\n    public scrollId!: string;\n\n    /**\n     * State of all the scroll components in this module.\n     *\n     * @internal\n     */\n    // TODO: Directly retrieve the needed data in this computed property\n    @State('scroll', 'data')\n    public scrollPositionsMap!: Dictionary<ScrollComponentState>;\n\n    /**\n     * The scroll data retrieved for this component.\n     *\n     * @returns The scroll data for this component if a valid {@link ScrollToTop.scrollId} has been\n     * passed. Otherwise it returns `null`.\n     * @internal\n     */\n    protected get scrollData(): ScrollComponentState {\n      return this.scrollId && this.scrollPositionsMap[this.scrollId]\n        ? this.scrollPositionsMap[this.scrollId]\n        : {\n            position: 0,\n            direction: 'UP',\n            hasReachedStart: false,\n            hasAlmostReachedEnd: false,\n            hasReachedEnd: false\n          };\n    }\n\n    /**\n     * Event that will be emitted when the scroll to top is clicked.\n     *\n     * @returns The event to be emitted when the scroll to top is clicked. The id as a payload.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return { UserClickedScrollToTop: this.scrollId };\n    }\n\n    /**\n     * Checks if the thresholdPx prop has been provided and if it is a number.\n     *\n     * @returns If the thresholdPx is a number or not.\n     * @internal\n     */\n    protected get useThresholdStrategy(): boolean {\n      return typeof this.thresholdPx === 'number';\n    }\n\n    /**\n     * Checks if the threshold has been reached in case the threshold strategy is in use.\n     *\n     * @returns If the scrollTop is bigger than the thresholdPx.\n     * @internal\n     */\n    protected get isThresholdReached(): boolean {\n      return this.useThresholdStrategy && this.scrollData.position > this.thresholdPx!;\n    }\n\n    /**\n     * Whether if the button is visible or not depending on the strategy being used.\n     *\n     * @returns If the button should be visible or not.\n     * @internal\n     */\n    protected get isVisible(): boolean {\n      return this.useThresholdStrategy ? this.isThresholdReached : this.hasAlmostReachedScrollEnd;\n    }\n\n    /**\n     * Returns if the scroll has almost reached its end or not.\n     *\n     * @returns True if the scroll has almost reached the end and the user is still scrolling down.\n     * @internal\n     */\n    protected get hasAlmostReachedScrollEnd(): boolean {\n      return this.scrollData.hasAlmostReachedEnd && this.scrollData.direction === 'DOWN';\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThe component renders whatever is passed to it in the default slot and scrolls to top the scroll\nwith an id `scrollId`.\n\nIt also receives an optional threshold in pixels. When the threshold is reached from the top, the\ncomponent will be shown once the user scrolls `UP`.\n\nIf this parameter is not provided the button will be visible when the user almost reaches the end of\nthe scroll.\n\n```vue\n<template>\n  <div>\n    <ScrollToTop scroll-id=\"scrollId\" :threshold-px=\"1000\">\n      <span>Scroll to top</span>\n    </ScrollToTop>\n  </div>\n</template>\n\n<script>\n  import { ScrollToTop } from '@empathyco/x-components/scroll';\n\n  export default {\n    name: 'ScrollToTopTest',\n    components: {\n      ScrollToTop\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedScrollToTop`: the event is emitted after the user clicks the button. The event payload\n  is the id of the scroll that it going to be scrolled.\n</docs>\n","\n\n\n\n\n\n  import { Identifiable } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NoElement, State, xComponentMixin } from '../../../components';\n  import { XInject } from '../../../components/decorators/injection.decorators';\n  import { scrollXModule } from '../x-module';\n  import { ScrollObserverKey } from './scroll.const';\n  import { ScrollVisibilityObserver } from './scroll.types';\n\n  /**\n   * Wrapper for elements contained in the {@link MainScroll} that should store/restore its\n   * position.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)]\n  })\n  export default class MainScrollItem extends Vue {\n    /**\n     * Rendered HTML node.\n     *\n     * @public\n     */\n    public $el!: HTMLElement;\n\n    /**\n     * The item data. Used to set the scroll identifier.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public item!: Identifiable;\n\n    /**\n     * The tag to render.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    public tag!: string | typeof Vue;\n\n    /**\n     * Pending identifier scroll position to restore. If it matches the {@link MainScrollItem.item}\n     * `id` property, this component should be scrolled into view.\n     *\n     * @internal\n     */\n    @State('scroll', 'pendingScrollTo')\n    public pendingScrollTo!: string;\n\n    /**\n     * Observer to detect the first visible element.\n     *\n     * @internal\n     */\n    @XInject(ScrollObserverKey)\n    public firstVisibleItemObserver!: ScrollVisibilityObserver | null;\n\n    /**\n     * Initialise scroll behavior.\n     * - Observes the rendered element to detect if it is the first visible item.\n     * - If the rendered element matches the {@link MainScrollItem.pendingScrollTo}, scrolls the\n     * element into the first position of the view.\n     *\n     * @internal\n     */\n    async mounted(): Promise<void> {\n      await this.$nextTick(); // Mounted does not guarantee that child components are mounted too\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.$watch('firstVisibleItemObserver', this.observeItem, { immediate: true });\n    }\n\n    /**\n     * Detaches the observer from the rendered element to prevent memory leaks.\n     *\n     * @internal\n     */\n    beforeDestroy(): void {\n      this.firstVisibleItemObserver?.unobserve(this.$el);\n    }\n\n    /**\n     * Initialises the element visibility observation, stopping the previous one if it has.\n     *\n     * @param newObserver - The new observer for the HTML element.\n     * @param oldObserver - The old observer for the HTML element.\n     */\n    observeItem(\n      newObserver: ScrollVisibilityObserver | null,\n      oldObserver: ScrollVisibilityObserver | null\n    ): void {\n      oldObserver?.unobserve(this.$el);\n      newObserver?.observe(this.$el);\n      if (this.pendingScrollTo === this.item.id) {\n        this.$el.scrollIntoView();\n        this.$x.emit('ScrollRestoreSucceeded');\n      }\n    }\n  }\n","<template>\n  <component :is=\"tag\" v-on=\"$listeners\" :data-scroll=\"item.id\">\n    <slot />\n  </component>\n</template>\n<script lang=\"ts\">\n  import { Identifiable } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NoElement, State, xComponentMixin } from '../../../components';\n  import { XInject } from '../../../components/decorators/injection.decorators';\n  import { scrollXModule } from '../x-module';\n  import { ScrollObserverKey } from './scroll.const';\n  import { ScrollVisibilityObserver } from './scroll.types';\n\n  /**\n   * Wrapper for elements contained in the {@link MainScroll} that should store/restore its\n   * position.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(scrollXModule)]\n  })\n  export default class MainScrollItem extends Vue {\n    /**\n     * Rendered HTML node.\n     *\n     * @public\n     */\n    public $el!: HTMLElement;\n\n    /**\n     * The item data. Used to set the scroll identifier.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public item!: Identifiable;\n\n    /**\n     * The tag to render.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    public tag!: string | typeof Vue;\n\n    /**\n     * Pending identifier scroll position to restore. If it matches the {@link MainScrollItem.item}\n     * `id` property, this component should be scrolled into view.\n     *\n     * @internal\n     */\n    @State('scroll', 'pendingScrollTo')\n    public pendingScrollTo!: string;\n\n    /**\n     * Observer to detect the first visible element.\n     *\n     * @internal\n     */\n    @XInject(ScrollObserverKey)\n    public firstVisibleItemObserver!: ScrollVisibilityObserver | null;\n\n    /**\n     * Initialise scroll behavior.\n     * - Observes the rendered element to detect if it is the first visible item.\n     * - If the rendered element matches the {@link MainScrollItem.pendingScrollTo}, scrolls the\n     * element into the first position of the view.\n     *\n     * @internal\n     */\n    async mounted(): Promise<void> {\n      await this.$nextTick(); // Mounted does not guarantee that child components are mounted too\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      this.$watch('firstVisibleItemObserver', this.observeItem, { immediate: true });\n    }\n\n    /**\n     * Detaches the observer from the rendered element to prevent memory leaks.\n     *\n     * @internal\n     */\n    beforeDestroy(): void {\n      this.firstVisibleItemObserver?.unobserve(this.$el);\n    }\n\n    /**\n     * Initialises the element visibility observation, stopping the previous one if it has.\n     *\n     * @param newObserver - The new observer for the HTML element.\n     * @param oldObserver - The old observer for the HTML element.\n     */\n    observeItem(\n      newObserver: ScrollVisibilityObserver | null,\n      oldObserver: ScrollVisibilityObserver | null\n    ): void {\n      oldObserver?.unobserve(this.$el);\n      newObserver?.observe(this.$el);\n      if (this.pendingScrollTo === this.item.id) {\n        this.$el.scrollIntoView();\n        this.$x.emit('ScrollRestoreSucceeded');\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis components emits the following events:\n\n- [`ScrollRestoreSucceeded`](./../../api/x-components.scrollxevents.md)\n\n## See it in action\n\nThis component has no predefined template. It renders whatever you decide using the `tag` prop. It's\nmain purpose is to help storing and restoring the scroll position so URLs can be shared, and also to\nallow users to smoothly navigate back and forth.\n\nTo do so, it must be wrapped with the `MainScroll` component. In the following example we make use\nof all of these components. The URL is modified as the user scrolls.\n\n```vue\n<template>\n  <div>\n    <UrlHandler />\n    <SearchInput />\n\n    <MainScroll>\n      <Scroll>\n        <ResultsList #result=\"{ item }\">\n          <MainScrollItem :item=\"item\" tag=\"article\">\n            <BaseResultLink :item=\"item\">\n              <img :src=\"item.images[0]\" />\n              <p>{{ item.title }}</p>\n            </BaseResultLink>\n          </MainScrollItem>\n        </ResultsList>\n      </Scroll>\n    </MainScroll>\n  </div>\n</template>\n\n<script>\n  import { MainScroll, Scroll, MainScrollItem } from '@empathyco/x-components/scroll';\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { UrlHandler } from '@empathyco/x-components/url';\n\n  export default {\n    name: 'ScrollItemDemo',\n    components: {\n      Scroll,\n      ResultsList,\n      MainScroll,\n      MainScrollItem,\n      SearchInput,\n      UrlHandler\n    }\n  };\n</script>\n```\n</docs>\n","import { Result, RecommendationsRequest } from '@empathyco/x-types';\n// eslint-disable-next-line max-len\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { RecommendationsActionContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  RecommendationsActionContext,\n  RecommendationsRequest | null,\n  Result[]\n>({\n  fetch({ dispatch }, request) {\n    return dispatch('fetchRecommendations', request);\n  },\n  onSuccess({ commit }, recommendations) {\n    commit('setRecommendations', recommendations);\n  }\n});\n\n/**\n * Default implementation for {@link RecommendationsActions.fetchAndSaveRecommendations}\n * action.\n *\n * @public\n */\nexport const fetchAndSaveRecommendations = fetchAndSave;\n\n/**\n * Default implementation for {@link RecommendationsActions.cancelFetchAndSaveRecommendations}\n * action.\n *\n * @public\n */\nexport const cancelFetchAndSaveRecommendations = cancelPrevious;\n","import { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveRecommendations,\n  fetchAndSaveRecommendations\n} from './actions/fetch-and-save-recommendations.action';\nimport { fetchRecommendations } from './actions/fetch-recommendations.action';\nimport { RECOMMENDATIONS_ORIGIN } from './constants';\nimport { request } from './getters/request.getter';\nimport { RecommendationsXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the recommendations module.\n *\n * @internal\n */\nexport const recommendationsXStoreModule: RecommendationsXStoreModule = {\n  state: () => ({\n    config: {\n      maxItemsToRequest: 24\n    },\n    origin: RECOMMENDATIONS_ORIGIN,\n    status: 'initial',\n    recommendations: [],\n    params: {}\n  }),\n  getters: {\n    request\n  },\n  mutations: {\n    setRecommendations(state, recommendations) {\n      state.recommendations = recommendations;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    },\n    updateRecommendation(state, recommendation) {\n      const stateRecommendation = state.recommendations.find(\n        stateRecommendation => recommendation.id === stateRecommendation.id\n      );\n      if (stateRecommendation) {\n        Object.assign(stateRecommendation, recommendation);\n      }\n    }\n  },\n  actions: {\n    cancelFetchAndSaveRecommendations,\n    fetchRecommendations,\n    fetchAndSaveRecommendations\n  }\n};\n","/**\n * Constant for the recommendations request.\n *\n * @public\n */\nexport const RECOMMENDATIONS_ORIGIN = 'default';\n","import { RecommendationsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link RecommendationsGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the query\n * suggestions module.\n * @returns The recommendations request to fetch data from the API.\n *\n * @public\n */\nexport const request: RecommendationsXStoreModule['getters']['request'] = ({\n  origin,\n  config,\n  params\n}) => {\n  return {\n    rows: config.maxItemsToRequest,\n    start: 0,\n    origin,\n    extraParams: params\n  };\n};\n","import { XPlugin } from '../../../../plugins';\nimport { RecommendationsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link RecommendationsActions.fetchRecommendations}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The recommendations request to make.\n * @returns A `void` promise that resolves when it fetches recommendations.\n *\n * @public\n */\nexport const fetchRecommendations: RecommendationsXStoreModule['actions']['fetchRecommendations'] =\n  (_context, request) => {\n    return request ? XPlugin.adapter.recommendations(request).then(({ results }) => results) : [];\n  };\n","import { createStoreEmitters } from '../../../store';\nimport { recommendationsXStoreModule } from './module';\n/**\n * {@link StoreEmitters} For the recommendations module.\n *\n * @internal\n */\nexport const recommendationsEmitters = createStoreEmitters(recommendationsXStoreModule, {\n  RecommendationsChanged: state => state.recommendations,\n  RecommendationsRequestUpdated: {\n    selector: (_, getters) => getters.request\n  }\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch\n} from '../../wiring/namespaced-wires.factory';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `recommendations` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'recommendations';\n/**\n * WireDispatch for {@link RecommendationsXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n/**\n * WireCommit for {@link RecommendationsXModule}.\n *\n * @internal\n */\nconst wireCommit = namespacedWireCommit(moduleName);\n\n/**\n * Requests and stores the recommendations.\n *\n * @public\n */\nconst fetchAndSaveRecommendations = wireDispatch('fetchAndSaveRecommendations');\n\n/**\n * Sets the recommendations state `params`.\n *\n * @public\n */\nexport const setRecommendationsExtraParams = wireCommit('setParams');\n\n/**\n * Wiring configuration for the {@link RecommendationsXModule | recommendations module}.\n *\n * @internal\n */\nexport const recommendationsWiring = createWiring({\n  RecommendationsRequestUpdated: {\n    fetchAndSaveRecommendations\n  },\n  UserClickedColumnPicker: {},\n  ExtraParamsChanged: {\n    setRecommendationsExtraParams\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { recommendationsEmitters } from './store/emitters';\nimport { recommendationsXStoreModule } from './store/module';\nimport { RecommendationsXStoreModule } from './store/types';\nimport { recommendationsWiring } from './wiring';\n\n/**\n * Recommendations {@link XModule} alias.\n *\n * @public\n */\n\nexport type RecommendationsXModule = XModule<RecommendationsXStoreModule>;\n/**\n * Recommendations {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `recommendations` entry point.\n *\n * @public\n */\n\nexport const recommendationsXModule: RecommendationsXModule = {\n  name: 'recommendations',\n  storeModule: recommendationsXStoreModule,\n  storeEmitters: recommendationsEmitters,\n  wiring: recommendationsWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Prop, Provide } from 'vue-property-decorator';\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { PropsWithType } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { recommendationsXModule } from '../x-module';\n\n  /**\n   * It renders a list of recommendations from the\n   * {@link RecommendationsState.recommendations | Recommendations} state by default.\n   * The component provides the slot layout which wraps the whole component with the\n   * recommendations bounded. It also provides the default slot to customize the item, which is\n   * within the layout slot, with the recommendation bounded. Each recommendation should be\n   * represented by a {@link BaseResultLink | result link component} besides any other component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(recommendationsXModule)],\n    components: {\n      NoElement\n    }\n  })\n  export default class Recommendations extends Vue {\n    /**\n     * The module's list of recommendations.\n     *\n     * @public\n     */\n    @State('recommendations', 'recommendations')\n    public storedRecommendations!: Result[];\n\n    /**\n     * Animation component that will be used to animate the recommendations.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of recommendations to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\n     *\n     * @public\n     */\n    @Provide()\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\n      'UserClickedARecommendation'\n    ];\n\n    /**\n     * Slices the recommendations from the state.\n     *\n     * @returns - The list of recommendations slice by the number of items to render.\n     *\n     * @internal\n     */\n    protected get recommendations(): Result[] {\n      return this.storedRecommendations.slice(0, this.maxItemsToRender);\n    }\n  }\n","<template>\n  <NoElement v-if=\"recommendations.length\">\n    <!--\n      @slot Customized Recommendations layout.\n          @binding {Result[]} recommendations - Recommendations to render.\n          @binding {Vue} animation - Animation to animate the elements.\n    -->\n    <slot name=\"layout\" v-bind=\"{ animation, recommendations }\">\n      <component :is=\"animation\" tag=\"ul\" data-test=\"recommendations\" class=\"x-recommendations\">\n        <li\n          v-for=\"recommendation in recommendations\"\n          :key=\"recommendation.id\"\n          class=\"x-recommendations__item\"\n          data-test=\"recommendation-item\"\n        >\n          <!--\n            @slot (Required) Recommendation content.\n            @binding {recommendation} recommendation - Recommendation data.\n          -->\n          <slot :recommendation=\"recommendation\" />\n        </li>\n      </component>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Prop, Provide } from 'vue-property-decorator';\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { PropsWithType } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { recommendationsXModule } from '../x-module';\n\n  /**\n   * It renders a list of recommendations from the\n   * {@link RecommendationsState.recommendations | Recommendations} state by default.\n   * The component provides the slot layout which wraps the whole component with the\n   * recommendations bounded. It also provides the default slot to customize the item, which is\n   * within the layout slot, with the recommendation bounded. Each recommendation should be\n   * represented by a {@link BaseResultLink | result link component} besides any other component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(recommendationsXModule)],\n    components: {\n      NoElement\n    }\n  })\n  export default class Recommendations extends Vue {\n    /**\n     * The module's list of recommendations.\n     *\n     * @public\n     */\n    @State('recommendations', 'recommendations')\n    public storedRecommendations!: Result[];\n\n    /**\n     * Animation component that will be used to animate the recommendations.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of recommendations to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\n     *\n     * @public\n     */\n    @Provide()\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\n      'UserClickedARecommendation'\n    ];\n\n    /**\n     * Slices the recommendations from the state.\n     *\n     * @returns - The list of recommendations slice by the number of items to render.\n     *\n     * @internal\n     */\n    protected get recommendations(): Result[] {\n      return this.storedRecommendations.slice(0, this.maxItemsToRender);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-recommendations {\n    display: flex;\n    list-style-type: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits no events, but it makes components such as `BaseResultLink` emit additional\nevents:\n\n- `UserClickedARecommendation`: the event is emitted after the user clicks the link of a\n  recommendation.\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nTo use this component, the Topclicked service must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you have a basic example on how the recommendations are rendered. You can customize how each\nresult is rendered by using the `default` slot. It is highly recommended to use base components such\nas the `BaseResultLink` or the `BaseResultAddToCart`, as they provides integration with other\nmodules such like the `tagging` one.\n\n```vue live\n<template>\n  <Recommendations #default=\"{ recommendation }\">\n    <BaseResultLink :result=\"recommendation\" class=\"x-recommendations__link\">\n      <img :src=\"recommendation.images[0]\" class=\"x-recommendations__image\" />\n      <span class=\"x-recommendations__title\">{{ recommendation.name }}</span>\n    </BaseResultLink>\n    <BaseResultAddToCart>Add to cart</BaseResultAddToCart>\n  </Recommendations>\n</template>\n<script>\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { BaseResultLink, BaseResultAddToCart } from '@empathyco/x-components';\n\n  export default {\n    name: 'RecommendationsDemo',\n    components: {\n      Recommendations,\n      BaseResultLink,\n      BaseResultAddToCart\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the component will render a maximum of 4 result recommendations, and will use the\n`StaggeredFadeAndSlide` animation for the results, smoothing the entrance.\n\n```vue live\n<template>\n  <Recommendations\n    #default=\"{ recommendation }\"\n    :maxItemsToRender=\"4\"\n    animation=\"StaggeredFadeAndSlide\"\n  >\n    <BaseResultLink :result=\"recommendation\" class=\"x-recommendations__link\">\n      <img :src=\"recommendation.images[0]\" class=\"x-recommendations__image\" />\n      <span class=\"x-recommendations__title\">{{ recommendation.name }}</span>\n    </BaseResultLink>\n    <BaseResultAddToCart>Add to cart</BaseResultAddToCart>\n  </Recommendations>\n</template>\n<script>\n  import Vue from 'vue';\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { BaseResultLink, BaseResultAddToCart } from '@empathyco/x-components';\n\n  Vue.component('StaggeredFadeAndSlide', StaggeredFadeAndSlide);\n  export default {\n    name: 'RecommendationsDemo',\n    components: {\n      Recommendations,\n      BaseResultLink,\n      BaseResultAddToCart\n    }\n  };\n</script>\n```\n\n### Play with the layout\n\nIn this example you can build your own layout, and the `Recommendations` component will just act as\na provider of the result recommendations data. Using the component this way, and due to Vue 2\nlimitations you will only be allowed to render a single element inside the `layout` slot.\n\n```vue live\n<template>\n  <Recommendations #layout=\"{ recommendations }\">\n    <div class=\"x-recommendations\">\n      <article\n        class=\"x-recommendations-list\"\n        v-for=\"recommendation in recommendations\"\n        :key=\"recommendation.id\"\n      >\n        <BaseResultLink :result=\"recommendation\" class=\"x-recommendations__link\">\n          <img :src=\"recommendation.images[0]\" class=\"x-recommendations__image\" />\n          <span class=\"x-recommendations__title\">{{ recommendation.name }}</span>\n        </BaseResultLink>\n        <BaseResultAddToCart>Add to cart</BaseResultAddToCart>\n      </article>\n    </div>\n  </Recommendations>\n</template>\n<script>\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { BaseResultLink, BaseResultAddToCart } from '@empathyco/x-components';\n\n  export default {\n    name: 'RecommendationsDemo',\n    components: {\n      Recommendations,\n      BaseResultLink,\n      BaseResultAddToCart\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <NoElement>\n    <slot />\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { DisplayWireMetadata, NoElement, ResultFeature, use$x } from '@empathyco/x-components';\n  import { computed, defineComponent, PropType, provide } from 'vue';\n\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      resultFeature: {\n        type: String as PropType<ResultFeature>,\n        required: true\n      },\n      ignoreResultClickEvent: {\n        type: Boolean,\n        default: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      const displayClickMetadata = computed<Partial<DisplayWireMetadata>>(() => ({\n        displayOriginalQuery: $x.query.search,\n        feature: props.resultFeature\n      }));\n\n      provide('resultClickExtraEvents', ['UserClickedADisplayResult']);\n      provide('resultLinkMetadataPerEvent', {\n        UserClickedADisplayResult: displayClickMetadata.value,\n        ...(props.ignoreResultClickEvent && {\n          UserClickedAResult: {\n            ignoreInModules: ['tagging']\n          }\n        })\n      });\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n  import { DisplayWireMetadata, NoElement, ResultFeature, use$x } from '@empathyco/x-components';\n  import { computed, defineComponent, PropType, provide } from 'vue';\n\n  export default defineComponent({\n    components: {\n      NoElement\n    },\n    props: {\n      resultFeature: {\n        type: String as PropType<ResultFeature>,\n        required: true\n      },\n      ignoreResultClickEvent: {\n        type: Boolean,\n        default: true\n      }\n    },\n    setup(props) {\n      const $x = use$x();\n\n      const displayClickMetadata = computed<Partial<DisplayWireMetadata>>(() => ({\n        displayOriginalQuery: $x.query.search,\n        feature: props.resultFeature\n      }));\n\n      provide('resultClickExtraEvents', ['UserClickedADisplayResult']);\n      provide('resultLinkMetadataPerEvent', {\n        UserClickedADisplayResult: displayClickMetadata.value,\n        ...(props.ignoreResultClickEvent && {\n          UserClickedAResult: {\n            ignoreInModules: ['tagging']\n          }\n        })\n      });\n    }\n  });\n","<template>\n  <MainScrollItem\n    :item=\"result\"\n    tag=\"article\"\n    class=\"x-result x-group/result x-flex x-flex-col x-gap-4\"\n  >\n    <div class=\"x-relative\">\n      <BaseResultLink class=\"x-result__picture\" :result=\"result\">\n        <BaseResultImage :result=\"result\" :loadAnimation=\"imageAnimation\" showNextImageOnHover>\n          <template #placeholder>\n            <BasePlaceholderImage />\n          </template>\n          <template #fallback>\n            <BaseFallbackImage />\n          </template>\n        </BaseResultImage>\n      </BaseResultLink>\n\n      <div\n        v-if=\"isDesktopOrGreater && showAddToCart\"\n        class=\"x-result__overlay x-invisible x-absolute x-bottom-0 x-flex x-w-full group-hover/result:x-visible\"\n      >\n        <BaseAddToCart :result=\"result\" class=\"x-button-lead x-m-16 x-flex-auto x-rounded-full\">\n          {{ $t('result.addToCart') }}\n        </BaseAddToCart>\n      </div>\n    </div>\n\n    <BaseResultLink\n      class=\"x-result__description x-flex x-flex-col x-gap-2 desktop:x-gap-4\"\n      :result=\"result\"\n    >\n      <h2 class=\"x-title4 x-truncate x-uppercase\" data-test=\"result-title\">\n        {{ result.description }}\n      </h2>\n      <template v-if=\"showDescription\">\n        <span class=\"x-text2\">{{ result.collection }}</span>\n        <span class=\"x-text2 x-text-lead-50\">{{ result.brand }}</span>\n      </template>\n      <div class=\"x-flex x-flex-wrap x-gap-8\">\n        <BaseResultCurrentPrice :result=\"result\" class=\"x-text2 x-text2-lg x-font-bold\" />\n        <BaseResultPreviousPrice\n          :result=\"result\"\n          class=\"x-text2 x-leading-[1.7] x-text-neutral-75 x-line-through\"\n        />\n      </div>\n    </BaseResultLink>\n  </MainScrollItem>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseAddToCart,\n    BaseFallbackImage,\n    BasePlaceholderImage,\n    BaseResultCurrentPrice,\n    BaseResultImage,\n    BaseResultLink,\n    BaseResultPreviousPrice,\n    CrossFade\n  } from '@empathyco/x-components';\n  import { MainScrollItem } from '@empathyco/x-components/scroll';\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, PropType } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseAddToCart,\n      BaseFallbackImage,\n      BasePlaceholderImage,\n      BaseResultCurrentPrice,\n      BaseResultPreviousPrice,\n      BaseResultImage,\n      BaseResultLink,\n      MainScrollItem\n    },\n    props: {\n      result: { type: Object as PropType<Result>, required: true },\n      showDescription: { type: Boolean, default: true },\n      showAddToCart: { type: Boolean, default: true }\n    },\n    setup() {\n      const { isDesktopOrGreater } = useDevice();\n      return {\n        isDesktopOrGreater,\n        imageAnimation: CrossFade\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseAddToCart,\n    BaseFallbackImage,\n    BasePlaceholderImage,\n    BaseResultCurrentPrice,\n    BaseResultImage,\n    BaseResultLink,\n    BaseResultPreviousPrice,\n    CrossFade\n  } from '@empathyco/x-components';\n  import { MainScrollItem } from '@empathyco/x-components/scroll';\n  import { Result } from '@empathyco/x-types';\n  import { defineComponent, PropType } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseAddToCart,\n      BaseFallbackImage,\n      BasePlaceholderImage,\n      BaseResultCurrentPrice,\n      BaseResultPreviousPrice,\n      BaseResultImage,\n      BaseResultLink,\n      MainScrollItem\n    },\n    props: {\n      result: { type: Object as PropType<Result>, required: true },\n      showDescription: { type: Boolean, default: true },\n      showAddToCart: { type: Boolean, default: true }\n    },\n    setup() {\n      const { isDesktopOrGreater } = useDevice();\n      return {\n        isDesktopOrGreater,\n        imageAnimation: CrossFade\n      };\n    }\n  });\n","<template>\n  <div\n    v-if=\"$x.recommendations.length > 0\"\n    class=\"x-flex x-flex-col x-items-start x-gap-24 x-pb-32 desktop:x-items-center\"\n  >\n    <h1 class=\"x-title1 x-title1-sm desktop:x-title1-md\">\n      {{ $t('recommendations.title') }}\n    </h1>\n    <Recommendations v-if=\"!$x.totalResults\">\n      <template #layout=\"{ recommendations }\">\n        <DisplayClickProvider resultFeature=\"recommendations\">\n          <BaseGrid\n            #default=\"{ item: result }\"\n            :animation=\"staggeredFadeAndSlide\"\n            :columns=\"columns\"\n            :items=\"recommendations\"\n            class=\"x-gap-y-32 x-gap-x-16\"\n          >\n            <Result :result=\"result\" data-test=\"recommendation-item\" />\n          </BaseGrid>\n        </DisplayClickProvider>\n      </template>\n    </Recommendations>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { BaseGrid, StaggeredFadeAndSlide } from '@empathyco/x-components';\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { computed, defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n  import Result from './result.vue';\n\n  export default defineComponent({\n    components: {\n      BaseGrid,\n      DisplayClickProvider,\n      Recommendations,\n      Result\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return {\n        staggeredFadeAndSlide: StaggeredFadeAndSlide,\n        columns: computed(() => (isMobile.value ? 2 : 4))\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BaseGrid, StaggeredFadeAndSlide } from '@empathyco/x-components';\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { computed, defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n  import Result from './result.vue';\n\n  export default defineComponent({\n    components: {\n      BaseGrid,\n      DisplayClickProvider,\n      Recommendations,\n      Result\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return {\n        staggeredFadeAndSlide: StaggeredFadeAndSlide,\n        columns: computed(() => (isMobile.value ? 2 : 4))\n      };\n    }\n  });\n","import { isStringEmpty, UrlParams, XOn } from '@empathyco/x-components';\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\n\n@Component\nexport default class HasSearchedMixin extends Vue {\n  protected hasSearched = false;\n\n  @XOn(['UserAcceptedAQuery', 'ParamsLoadedFromUrl'])\n  open(payload: string | UrlParams): void {\n    if (typeof payload === 'string' || !isStringEmpty(payload.query)) {\n      this.hasSearched = true;\n    }\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { LocationProvider } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import CustomRecommendations from './results/custom-recommendations.vue';\n  import HasSearchedMixin from './has-searched.mixin';\n\n  @Component({\n    components: {\n      LocationProvider,\n      CustomRecommendations,\n      PartialResults: () => import('./search').then(m => m.PartialResults),\n      Results: () => import('./search').then(m => m.Results),\n      Redirection: () => import('./search').then(m => m.Redirection)\n    }\n  })\n  export default class Main extends HasSearchedMixin {}\n","<template>\n  <div v-if=\"hasSearched\" class=\"x-flex x-flex-col\">\n    <Redirection />\n\n    <template>\n      <LocationProvider location=\"results\">\n        <Results />\n      </LocationProvider>\n\n      <LocationProvider location=\"results\">\n        <PartialResults />\n      </LocationProvider>\n      <LocationProvider v-if=\"$x.noResults && !$x.partialResults.length\" location=\"no_results\">\n        <CustomRecommendations />\n      </LocationProvider>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { LocationProvider } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import CustomRecommendations from './results/custom-recommendations.vue';\n  import HasSearchedMixin from './has-searched.mixin';\n\n  @Component({\n    components: {\n      LocationProvider,\n      CustomRecommendations,\n      PartialResults: () => import('./search').then(m => m.PartialResults),\n      Results: () => import('./search').then(m => m.Results),\n      Redirection: () => import('./search').then(m => m.Redirection)\n    }\n  })\n  export default class Main extends HasSearchedMixin {}\n</script>\n","import Vue from 'vue';\nimport { QueriesPreviewXStoreModule } from './types';\nimport { fetchQueryPreview } from './actions/fetch-query-preview.action';\nimport { fetchAndSaveQueryPreview } from './actions/fetch-and-save-query-preview.action';\nimport { loadedQueriesPreview } from './getters/loaded-queries-preview.getter';\n\n/**\n * {@link XStoreModule} For the `queries-preview` module.\n *\n * @internal\n */\nexport const queriesPreviewXStoreModule: QueriesPreviewXStoreModule = {\n  state: () => ({\n    config: {\n      maxItemsToRequest: 24\n    },\n    queriesPreview: {},\n    params: {}\n  }),\n  getters: { loadedQueriesPreview },\n  mutations: {\n    clearQueryPreview(state, query) {\n      Vue.delete(state.queriesPreview, query);\n    },\n    setParams(state, params) {\n      state.params = params;\n    },\n    setQueryPreview(state, queryPreview) {\n      Vue.set(state.queriesPreview, queryPreview.request.query, queryPreview);\n    },\n    setStatus(state, { query, status }) {\n      state.queriesPreview[query].status = status;\n    }\n  },\n  actions: {\n    fetchQueryPreview,\n    fetchAndSaveQueryPreview\n  }\n};\n","import { objectFilter } from '@empathyco/x-utils';\nimport { QueriesPreviewXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QueriesPreviewGetters.loadedQueriesPreview} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of\n * the queries preview module.\n *\n * @returns The loaded previews from the state.\n */\nexport const loadedQueriesPreview: QueriesPreviewXStoreModule['getters']['loadedQueriesPreview'] =\n  ({ queriesPreview }) => {\n    return objectFilter(queriesPreview, (_, preview) => {\n      return preview.status === 'success' && preview.totalResults > 0;\n    });\n  };\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { QueriesPreviewXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QueriesPreviewActions.fetchQueryPreview}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The query preview request to make.\n * @returns A Promise of a SearchResponse when it fetches the results.\n *\n * @public\n */\nexport const fetchQueryPreview: QueriesPreviewXStoreModule['actions']['fetchQueryPreview'] = (\n  _context,\n  request\n) => {\n  const { query } = request;\n  if (!query) {\n    return null;\n  }\n  return XPlugin.adapter.search(request, {\n    id: `fetchQueryPreview-${query}`\n  });\n};\n","import { QueriesPreviewXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QueriesPreviewActions.fetchAndSaveQueryPreview}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The query preview request to make.\n * @returns A Promise of a SearchResponse when it fetches the results.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const fetchAndSaveQueryPreview: QueriesPreviewXStoreModule['actions']['fetchAndSaveQueryPreview'] =\n  ({ dispatch, commit }, request) => {\n    const { query } = request;\n    if (!query) {\n      return;\n    }\n    commit('setQueryPreview', {\n      request,\n      results: [],\n      status: 'loading',\n      totalResults: 0\n    });\n    return dispatch('fetchQueryPreview', request)\n      .then(response => {\n        commit('setQueryPreview', {\n          request,\n          results: response?.results ?? [],\n          status: 'success',\n          totalResults: response?.totalResults ?? 0\n        });\n      })\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.error(error);\n        commit('setStatus', { query, status: 'error' });\n      });\n  };\n","import { createStoreEmitters } from '../../../store';\nimport { queriesPreviewXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the queries-preview module.\n *\n * @internal\n */\nexport const queriesPreviewEmitters = createStoreEmitters(queriesPreviewXStoreModule, {});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch\n} from '../../wiring/namespaced-wires.factory';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `queriesPreview` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'queriesPreview';\n\n/**\n * WireCommit for {@link QueriesPreviewXModule}.\n *\n * @internal\n */\nconst wireCommit = namespacedWireCommit(moduleName);\n\n/**\n * WireDispatch for {@link QueriesPreviewXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n\n/**\n * Requests and stores the query preview results.\n *\n * @public\n */\nexport const fetchAndSaveQueryPreviewWire = wireDispatch('fetchAndSaveQueryPreview');\n\n/**\n * Clears a query preview from queries preview module.\n *\n * @public\n */\n\nexport const clearQueryPreviewWire = wireCommit('clearQueryPreview');\n\n/**\n * Sets the queries preview state `params`.\n *\n * @public\n */\nexport const setQueriesPreviewExtraParamsWire = wireCommit('setParams');\n\n/**\n * Wiring configuration for the {@link QueriesPreviewXModule | queriesPreview module}.\n *\n * @internal\n */\nexport const queriesPreviewWiring = createWiring({\n  QueryPreviewRequestUpdated: {\n    fetchAndSaveQueryPreviewWire\n  },\n  QueryPreviewUnmountedHook: {\n    clearQueryPreviewWire\n  },\n  ExtraParamsChanged: {\n    setQueriesPreviewExtraParamsWire\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { queriesPreviewEmitters } from './store/emitters';\nimport { queriesPreviewXStoreModule } from './store/module';\nimport { QueriesPreviewXStoreModule } from './store/types';\nimport { queriesPreviewWiring } from './wiring';\n\n/**\n * QueriesPreview {@link XModule} alias.\n *\n * @public\n */\nexport type QueriesPreviewXModule = XModule<QueriesPreviewXStoreModule>;\n\n/**\n * QueriesPreview {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `queries-preview` entry point.\n *\n * @public\n */\nexport const queriesPreviewXModule: QueriesPreviewXModule = {\n  name: 'queriesPreview',\n  storeModule: queriesPreviewXStoreModule,\n  storeEmitters: queriesPreviewEmitters,\n  wiring: queriesPreviewWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop, Inject, Watch } from 'vue-property-decorator';\n  import { Dictionary } from '@empathyco/x-utils';\n  import { SearchRequest, Result } from '@empathyco/x-types';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { LIST_ITEMS_KEY } from '../../../components/decorators/injection.consts';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { NoElement } from '../../../components/no-element';\n  import { RequestStatus } from '../../../store';\n  import { QueryFeature, FeatureLocation } from '../../../types/origin';\n  import { QueryPreviewItem } from '../store/types';\n  import { QueriesPreviewConfig } from '../config.types';\n  import { queriesPreviewXModule } from '../x-module';\n  import { createOrigin } from '../../../utils/origin';\n  import { debounce } from '../../../utils/debounce';\n  import { DebouncedFunction } from '../../../utils';\n\n  /**\n   * Retrieves a preview of the results of a query and exposes them in the default slot,\n   * along with the query preview and the totalResults of the search request.\n   * By default, it renders the names of the results.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement\n    },\n    mixins: [xComponentMixin(queriesPreviewXModule)]\n  })\n  export default class QueryPreview extends Vue {\n    /**\n     * The query to retrieve the results preview.\n     *\n     * @public\n     */\n    @Prop({\n      required: true\n    })\n    protected query!: string;\n\n    /**\n     * The origin property for the request.\n     *\n     * @public\n     */\n    @Prop()\n    protected queryFeature?: QueryFeature;\n\n    /**\n     * Number of query preview results to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Debounce time in milliseconds for triggering the search requests.\n     * It will default to 0 to fit the most common use case (pre-search),\n     * and it would work properly with a 250 value inside empathize.\n     */\n    @Prop({ default: 0 })\n    public debounceTimeMs!: number;\n\n    /**\n     * The results preview of the queries preview mounted.\n     * It is a dictionary, indexed by the query preview query.\n     */\n    @State('queriesPreview', 'queriesPreview')\n    public previewResults!: Dictionary<QueryPreviewItem>;\n\n    /**\n     * As the request is handled in this component, we need\n     * the extra params that will be used in the request.\n     */\n    @State('queriesPreview', 'params')\n    public params!: Dictionary<unknown>;\n\n    /**\n     * As the request is handled in this component, we need\n     * the config that will be used in the request.\n     */\n    @State('queriesPreview', 'config')\n    public config!: QueriesPreviewConfig;\n\n    /**\n     * The results to render from the state.\n     *\n     * @remarks The results list are provided with `items` key. It can be\n     * concatenated with list items from components such as `BannersList`, `PromotedsList`,\n     * `BaseGrid` or any component that injects the list.\n     *\n     * @returns A list of results.\n     * @public\n     */\n    @XProvide(LIST_ITEMS_KEY)\n    public get results(): Result[] | undefined {\n      return this.queryPreviewResults?.results;\n    }\n\n    /**\n     * It injects the provided {@link FeatureLocation} of the selected query in the search request.\n     *\n     * @internal\n     */\n    @Inject({ default: undefined })\n    protected location?: FeatureLocation;\n\n    /**\n     * The computed request object to be used to retrieve the query preview results.\n     *\n     * @returns The search request object.\n     * @internal\n     */\n    protected get queryPreviewRequest(): SearchRequest {\n      const origin = createOrigin({\n        feature: this.queryFeature,\n        location: this.location\n      });\n\n      return {\n        query: this.query,\n        rows: this.config.maxItemsToRequest,\n        extraParams: this.params,\n        ...(origin && { origin })\n      };\n    }\n\n    /**\n     * Gets from the state the results preview of the query preview.\n     *\n     * @returns The results preview of the actual query preview.\n     */\n    public get queryPreviewResults(): Partial<QueryPreviewItem> | undefined {\n      const previewResults = this.previewResults[this.query];\n      return previewResults?.results\n        ? {\n            ...previewResults,\n            results: previewResults.results.slice(0, this.maxItemsToRender)\n          }\n        : undefined;\n    }\n\n    /**\n     * The debounce method to trigger the request after the debounceTimeMs defined.\n     *\n     * @returns The search request object.\n     * @internal\n     */\n    protected get emitQueryPreviewRequestUpdated(): DebouncedFunction<[SearchRequest]> {\n      return debounce(request => {\n        this.$x.emit('QueryPreviewRequestUpdated', request, { priority: 0, replaceable: false });\n      }, this.debounceTimeMs);\n    }\n\n    /**\n     * Initialises watcher to emit debounced requests, and first value for the requests.\n     *\n     * @internal\n     */\n    protected created(): void {\n      this.$watch(\n        () => this.queryPreviewRequest,\n        request => this.emitQueryPreviewRequestUpdated(request)\n      );\n      this.emitQueryPreviewRequestUpdated(this.queryPreviewRequest);\n    }\n\n    /**\n     * Cancels the (remaining) requests when the component is destroyed\n     * via the `debounce.cancel()` method.\n     *\n     * @internal\n     */\n    protected beforeDestroy(): void {\n      this.emitQueryPreviewRequestUpdated.cancel();\n    }\n\n    /**\n     * Cancels the previous request when the debounced function changes (e.g: the debounceTimeMs\n     * prop changes or there is a request in progress that cancels it).\n     *\n     * @param _new - The new debounced function.\n     * @param old - The previous debounced function.\n     * @internal\n     */\n    @Watch('emitQueryPreviewRequestUpdated')\n    protected cancelEmitPreviewRequestUpdated(\n      _new: DebouncedFunction<[SearchRequest]>,\n      old: DebouncedFunction<[SearchRequest]>\n    ): void {\n      old.cancel();\n    }\n\n    /**\n     * Emits an event when the query results are loaded or fail to load.\n     *\n     * @param status - The status of the query preview request.\n     * @internal\n     */\n    @Watch('queryPreviewResults.status')\n    emitLoad(status: RequestStatus | undefined): void {\n      if (status === 'success') {\n        this.$emit(this.results?.length ? 'load' : 'error', this.query);\n      } else if (status === 'error') {\n        this.$emit('error', this.query);\n      }\n    }\n  }\n","<template>\n  <NoElement v-if=\"queryPreviewResults && queryPreviewResults.totalResults\">\n    <!--\n      @slot Query Preview default slot.\n          @binding {string} query - query\n          @binding {Result[]} results - The results preview of the query preview\n          @binding {number} totalResults - The total results of the search request\n    -->\n    <slot\n      :query=\"query\"\n      :results=\"queryPreviewResults.results\"\n      :totalResults=\"queryPreviewResults.totalResults\"\n    >\n      <ul data-test=\"query-preview\" class=\"x-query-preview\">\n        <li\n          v-for=\"result in queryPreviewResults.results\"\n          :key=\"result.id\"\n          class=\"x-query-preview__item\"\n          data-test=\"query-preview-item\"\n        >\n          <!--\n          @slot Query Preview result slot.\n              @binding {Result} result - A Query Preview result\n          -->\n          <slot name=\"result\" :result=\"result\">\n            <span data-test=\"result-name\">{{ result.name }}</span>\n          </slot>\n        </li>\n      </ul>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop, Inject, Watch } from 'vue-property-decorator';\n  import { Dictionary } from '@empathyco/x-utils';\n  import { SearchRequest, Result } from '@empathyco/x-types';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { LIST_ITEMS_KEY } from '../../../components/decorators/injection.consts';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { NoElement } from '../../../components/no-element';\n  import { RequestStatus } from '../../../store';\n  import { QueryFeature, FeatureLocation } from '../../../types/origin';\n  import { QueryPreviewItem } from '../store/types';\n  import { QueriesPreviewConfig } from '../config.types';\n  import { queriesPreviewXModule } from '../x-module';\n  import { createOrigin } from '../../../utils/origin';\n  import { debounce } from '../../../utils/debounce';\n  import { DebouncedFunction } from '../../../utils';\n\n  /**\n   * Retrieves a preview of the results of a query and exposes them in the default slot,\n   * along with the query preview and the totalResults of the search request.\n   * By default, it renders the names of the results.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement\n    },\n    mixins: [xComponentMixin(queriesPreviewXModule)]\n  })\n  export default class QueryPreview extends Vue {\n    /**\n     * The query to retrieve the results preview.\n     *\n     * @public\n     */\n    @Prop({\n      required: true\n    })\n    protected query!: string;\n\n    /**\n     * The origin property for the request.\n     *\n     * @public\n     */\n    @Prop()\n    protected queryFeature?: QueryFeature;\n\n    /**\n     * Number of query preview results to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Debounce time in milliseconds for triggering the search requests.\n     * It will default to 0 to fit the most common use case (pre-search),\n     * and it would work properly with a 250 value inside empathize.\n     */\n    @Prop({ default: 0 })\n    public debounceTimeMs!: number;\n\n    /**\n     * The results preview of the queries preview mounted.\n     * It is a dictionary, indexed by the query preview query.\n     */\n    @State('queriesPreview', 'queriesPreview')\n    public previewResults!: Dictionary<QueryPreviewItem>;\n\n    /**\n     * As the request is handled in this component, we need\n     * the extra params that will be used in the request.\n     */\n    @State('queriesPreview', 'params')\n    public params!: Dictionary<unknown>;\n\n    /**\n     * As the request is handled in this component, we need\n     * the config that will be used in the request.\n     */\n    @State('queriesPreview', 'config')\n    public config!: QueriesPreviewConfig;\n\n    /**\n     * The results to render from the state.\n     *\n     * @remarks The results list are provided with `items` key. It can be\n     * concatenated with list items from components such as `BannersList`, `PromotedsList`,\n     * `BaseGrid` or any component that injects the list.\n     *\n     * @returns A list of results.\n     * @public\n     */\n    @XProvide(LIST_ITEMS_KEY)\n    public get results(): Result[] | undefined {\n      return this.queryPreviewResults?.results;\n    }\n\n    /**\n     * It injects the provided {@link FeatureLocation} of the selected query in the search request.\n     *\n     * @internal\n     */\n    @Inject({ default: undefined })\n    protected location?: FeatureLocation;\n\n    /**\n     * The computed request object to be used to retrieve the query preview results.\n     *\n     * @returns The search request object.\n     * @internal\n     */\n    protected get queryPreviewRequest(): SearchRequest {\n      const origin = createOrigin({\n        feature: this.queryFeature,\n        location: this.location\n      });\n\n      return {\n        query: this.query,\n        rows: this.config.maxItemsToRequest,\n        extraParams: this.params,\n        ...(origin && { origin })\n      };\n    }\n\n    /**\n     * Gets from the state the results preview of the query preview.\n     *\n     * @returns The results preview of the actual query preview.\n     */\n    public get queryPreviewResults(): Partial<QueryPreviewItem> | undefined {\n      const previewResults = this.previewResults[this.query];\n      return previewResults?.results\n        ? {\n            ...previewResults,\n            results: previewResults.results.slice(0, this.maxItemsToRender)\n          }\n        : undefined;\n    }\n\n    /**\n     * The debounce method to trigger the request after the debounceTimeMs defined.\n     *\n     * @returns The search request object.\n     * @internal\n     */\n    protected get emitQueryPreviewRequestUpdated(): DebouncedFunction<[SearchRequest]> {\n      return debounce(request => {\n        this.$x.emit('QueryPreviewRequestUpdated', request, { priority: 0, replaceable: false });\n      }, this.debounceTimeMs);\n    }\n\n    /**\n     * Initialises watcher to emit debounced requests, and first value for the requests.\n     *\n     * @internal\n     */\n    protected created(): void {\n      this.$watch(\n        () => this.queryPreviewRequest,\n        request => this.emitQueryPreviewRequestUpdated(request)\n      );\n      this.emitQueryPreviewRequestUpdated(this.queryPreviewRequest);\n    }\n\n    /**\n     * Cancels the (remaining) requests when the component is destroyed\n     * via the `debounce.cancel()` method.\n     *\n     * @internal\n     */\n    protected beforeDestroy(): void {\n      this.emitQueryPreviewRequestUpdated.cancel();\n    }\n\n    /**\n     * Cancels the previous request when the debounced function changes (e.g: the debounceTimeMs\n     * prop changes or there is a request in progress that cancels it).\n     *\n     * @param _new - The new debounced function.\n     * @param old - The previous debounced function.\n     * @internal\n     */\n    @Watch('emitQueryPreviewRequestUpdated')\n    protected cancelEmitPreviewRequestUpdated(\n      _new: DebouncedFunction<[SearchRequest]>,\n      old: DebouncedFunction<[SearchRequest]>\n    ): void {\n      old.cancel();\n    }\n\n    /**\n     * Emits an event when the query results are loaded or fail to load.\n     *\n     * @param status - The status of the query preview request.\n     * @internal\n     */\n    @Watch('queryPreviewResults.status')\n    emitLoad(status: RequestStatus | undefined): void {\n      if (status === 'success') {\n        this.$emit(this.results?.length ? 'load' : 'error', this.query);\n      } else if (status === 'error') {\n        this.$emit('error', this.query);\n      }\n    }\n  }\n</script>\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- `QueryPreviewRequestUpdated`: the event is emitted when the component is mounted and when the\n  properties of the request object changes. The event payload is the `queryPreviewRequest` object.\n\n## Vue Events\n\nA list of vue events that the component will emit:\n\n- `load`: the event is emitted when the query results have been loaded.\n- `error`: the event is emitted if there is some error when retrieving the query results.\n\n## See it in action\n\nHere you have a basic example of how the QueryPreview is rendered. Keep in mind that this component\nis intended to be used overriding its default slot. By default it will only render the names of the\nresults.\n\n```vue live\n<template>\n  <QueryPreview :query=\"query\" />\n</template>\n\n<script>\n  import { QueryPreview } from '@empathyco/x-components/queries-preview';\n\n  export default {\n    name: 'QueryPreviewDemo',\n    components: {\n      QueryPreview\n    },\n    data() {\n      return {\n        query: 'sandals'\n      };\n    }\n  };\n</script>\n```\n\n### Play with the default slot\n\nIn this example, the results will be rendered inside a sliding panel.\n\n```vue live\n<template>\n  <QueryPreview :query=\"query\" #default=\"{ totalResults, results }\">\n    <section>\n      <p>Total results: {{ totalResults }}</p>\n      <SlidingPanel :resetOnContentChange=\"false\">\n        <article\n          v-for=\"result in results\"\n          :key=\"result.id\"\n          class=\"x-result\"\n          style=\"max-width: 300px; overflow: hidden\"\n        >\n          <BaseResultLink :result=\"result\">\n            <BaseResultImage :result=\"result\" class=\"x-result__picture\" />\n          </BaseResultLink>\n          <div class=\"x-result__description\">\n            <BaseResultLink :result=\"result\">\n              <h1 class=\"x-title3\">{{ result.name }}</h1>\n            </BaseResultLink>\n          </div>\n        </article>\n      </SlidingPanel>\n    </section>\n  </QueryPreview>\n</template>\n\n<script>\n  import { QueryPreview } from '@empathyco/x-components/queries-preview';\n  import { BaseResultImage, BaseResultLink, SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'QueryPreviewDemoOverridingSlot',\n    components: {\n      BaseResultImage,\n      BaseResultLink,\n      QueryPreview,\n      SlidingPanel\n    },\n    data() {\n      return {\n        query: 'flip-flops'\n      };\n    }\n  };\n</script>\n```\n\n### Play with the result slot\n\nThe component exposes a slot to override the result content, without modifying the list.\n\nIn this example, the ID of the results will be rendered along with the name.\n\n```vue\n<template>\n  <QueryPreview :query=\"query\" #result=\"{ result }\">\n    <span>{{ result.id }}</span>\n    <span>{{ result.name }}</span>\n  </QueryPreview>\n</template>\n\n<script>\n  import { QueryPreview } from '@empathyco/x-components/queries-preview';\n\n  export default {\n    name: 'QueryPreviewDemoOverridingResultSlot',\n    components: {\n      QueryPreview\n    },\n    data() {\n      return {\n        query: 'flips-flops'\n      };\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the query preview has been limited to render a maximum of 4 results.\n\n```vue\n<template>\n  <QueryPreview :maxItemsToRender=\"maxItemsToRender\" :query=\"query\" #default=\"{ results }\">\n    <BaseGrid #default=\"{ item }\" :items=\"results\">\n      <BaseResultLink :result=\"item\">\n        <BaseResultImage :result=\"item\" />\n      </BaseResultLink>\n    </BaseGrid>\n  </QueryPreview>\n</template>\n\n<script>\n  import { BaseGrid, BaseResultImage, BaseResultLink } from '@empathyco/x-components';\n  import { QueryPreview } from '@empathyco/x-components/queries-preview';\n\n  export default {\n    name: 'QueryPreviewDemo',\n    components: {\n      BaseGrid,\n      BaseResultImage,\n      BaseResultLink,\n      QueryPreview\n    },\n    data() {\n      return {\n        maxItemsToRender: 4,\n        query: 'flips-flops'\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import StaggeredFadeAndSlide from '../../../components/animations/staggered-fade-and-slide.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { RequestStatus } from '../../../store';\n  import { queriesPreviewXModule } from '../x-module';\n  import QueryPreview from './query-preview.vue';\n\n  interface QueryPreviewStatusRecord {\n    [query: string]: RequestStatus;\n  }\n\n  /**\n   * Renders the results previews of a list of queries, and exposes the {@link QueryPreview} slots\n   * to modify the content.\n   * The requests are made in sequential order.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: {\n      QueryPreview,\n      StaggeredFadeAndSlide\n    },\n    mixins: [xComponentMixin(queriesPreviewXModule)]\n  })\n  export default class QueryPreviewList extends Vue {\n    /**\n     * Animation component that will be used to animate the elements.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    public animation!: Vue | string;\n\n    /**\n     * List of queries to preview.\n     */\n    @Prop({ required: true })\n    public queries!: string[];\n\n    /**\n     * Contains the status of the preview requests, indexed by query.\n     */\n    public queriesStatus: QueryPreviewStatusRecord = {};\n\n    /**\n     * Gets all the queries to render, that are those that don't have an `error` status.\n     *\n     * @returns A list of queries.\n     * @internal\n     */\n    protected get renderedQueries(): string[] {\n      return this.queries.filter(\n        query => this.queriesStatus[query] === 'success' || this.queriesStatus[query] === 'loading'\n      );\n    }\n\n    /**\n     * Resets the status of all queries if they change.\n     *\n     * @internal\n     */\n    @Watch('queries', { immediate: true })\n    protected resetStatusRecord(): void {\n      this.queriesStatus = {};\n      this.loadNext();\n    }\n\n    /**\n     * Sets the status of a given query to `success`.\n     *\n     * @param loadedQuery - The query to flag as loaded.\n     * @internal\n     */\n    protected flagAsLoaded(loadedQuery: string): void {\n      this.queriesStatus[loadedQuery] = 'success';\n      this.loadNext();\n    }\n\n    /**\n     * Sets the status of a given query to `error`.\n     *\n     * @param failedQuery - The query to flag as failed.\n     * @internal\n     */\n    protected flagAsFailed(failedQuery: string): void {\n      this.queriesStatus[failedQuery] = 'error';\n      this.loadNext();\n    }\n\n    /**\n     * Tries to load the next query.\n     *\n     * @internal\n     */\n    protected loadNext(): void {\n      const queryToLoad = this.queries.find(query => !(query in this.queriesStatus));\n      if (queryToLoad) {\n        this.$set(this.queriesStatus, queryToLoad, 'loading');\n      }\n    }\n  }\n","<template>\n  <component :is=\"animation\" class=\"x-query-preview-list\" tag=\"ul\">\n    <li v-for=\"query in renderedQueries\" :key=\"query\" data-test=\"query-preview-item\">\n      <QueryPreview @load=\"flagAsLoaded\" @error=\"flagAsFailed\" v-bind=\"$attrs\" :query=\"query\">\n        <template v-for=\"(_, slotName) in $scopedSlots\" v-slot:[slotName]=\"scope\">\n          <slot :name=\"slotName\" v-bind=\"scope\" />\n        </template>\n      </QueryPreview>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import StaggeredFadeAndSlide from '../../../components/animations/staggered-fade-and-slide.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { RequestStatus } from '../../../store';\n  import { queriesPreviewXModule } from '../x-module';\n  import QueryPreview from './query-preview.vue';\n\n  interface QueryPreviewStatusRecord {\n    [query: string]: RequestStatus;\n  }\n\n  /**\n   * Renders the results previews of a list of queries, and exposes the {@link QueryPreview} slots\n   * to modify the content.\n   * The requests are made in sequential order.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: {\n      QueryPreview,\n      StaggeredFadeAndSlide\n    },\n    mixins: [xComponentMixin(queriesPreviewXModule)]\n  })\n  export default class QueryPreviewList extends Vue {\n    /**\n     * Animation component that will be used to animate the elements.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    public animation!: Vue | string;\n\n    /**\n     * List of queries to preview.\n     */\n    @Prop({ required: true })\n    public queries!: string[];\n\n    /**\n     * Contains the status of the preview requests, indexed by query.\n     */\n    public queriesStatus: QueryPreviewStatusRecord = {};\n\n    /**\n     * Gets all the queries to render, that are those that don't have an `error` status.\n     *\n     * @returns A list of queries.\n     * @internal\n     */\n    protected get renderedQueries(): string[] {\n      return this.queries.filter(\n        query => this.queriesStatus[query] === 'success' || this.queriesStatus[query] === 'loading'\n      );\n    }\n\n    /**\n     * Resets the status of all queries if they change.\n     *\n     * @internal\n     */\n    @Watch('queries', { immediate: true })\n    protected resetStatusRecord(): void {\n      this.queriesStatus = {};\n      this.loadNext();\n    }\n\n    /**\n     * Sets the status of a given query to `success`.\n     *\n     * @param loadedQuery - The query to flag as loaded.\n     * @internal\n     */\n    protected flagAsLoaded(loadedQuery: string): void {\n      this.queriesStatus[loadedQuery] = 'success';\n      this.loadNext();\n    }\n\n    /**\n     * Sets the status of a given query to `error`.\n     *\n     * @param failedQuery - The query to flag as failed.\n     * @internal\n     */\n    protected flagAsFailed(failedQuery: string): void {\n      this.queriesStatus[failedQuery] = 'error';\n      this.loadNext();\n    }\n\n    /**\n     * Tries to load the next query.\n     *\n     * @internal\n     */\n    protected loadNext(): void {\n      const queryToLoad = this.queries.find(query => !(query in this.queriesStatus));\n      if (queryToLoad) {\n        this.$set(this.queriesStatus, queryToLoad, 'loading');\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## See it in action\n\nHere you have a basic example of how the QueryPreviewList is rendered. Keep in mind that this\ncomponent is intended to be used overriding its default slot. By default it will only render the\nnames of the results.\n\n```vue live\n<template>\n  <QueryPreviewList :queries=\"queries\" />\n</template>\n\n<script>\n  import { QueryPreviewList } from '@empathyco/x-components/queries-preview';\n\n  export default {\n    name: 'QueryPreviewListDemo',\n    components: {\n      QueryPreviewList\n    },\n    data() {\n      return {\n        queries: ['sandals', 'tshirt', 'jacket']\n      };\n    }\n  };\n</script>\n```\n\n### Play with the default slot\n\nIn this example, the results will be rendered inside a sliding panel.\n\n```vue live\n<template>\n  <QueryPreviewList :queries=\"queries\" #default=\"{ query, totalResults, results }\">\n    <div class=\"x-flex x-flex-col x-gap-8 x-mb-16\">\n      <h1 class=\"x-title2\">{{ query }} ({{ totalResults }})</h1>\n      <SlidingPanel :resetOnContentChange=\"false\">\n        <div class=\"x-flex x-gap-8\">\n          <Result\n            v-for=\"result in results\"\n            :key=\"result.id\"\n            :result=\"result\"\n            style=\"max-width: 180px\"\n          />\n        </div>\n      </SlidingPanel>\n    </div>\n  </QueryPreviewList>\n</template>\n\n<script>\n  import { QueryPreviewList } from '@empathyco/x-components/queries-preview';\n  import { BaseResultImage, BaseResultLink, SlidingPanel } from '@empathyco/x-components';\n\n  export default {\n    name: 'QueryPreviewListDemoOverridingSlot',\n    components: {\n      BaseResultImage,\n      BaseResultLink,\n      QueryPreviewList,\n      SlidingPanel\n    },\n    data() {\n      return {\n        queries: ['sandals', 'tshirt', 'jacket']\n      };\n    }\n  };\n</script>\n```\n\n### Play with the result slot\n\nThe component exposes a slot to override the result content, without modifying the list.\n\nIn this example, the ID of the results will be rendered along with the name.\n\n```vue\n<template>\n  <QueryPreviewList class=\"x-flex x-gap-8\" :queries=\"queries\" #result=\"{ result }\">\n    <span class=\"x-font-bold\">{{ result.id }}:</span>\n    <span>{{ result.name }}</span>\n  </QueryPreviewList>\n</template>\n\n<script>\n  import { QueryPreviewList } from '@empathyco/x-components/queries-preview';\n\n  export default {\n    name: 'QueryPreviewListDemoOverridingResultSlot',\n    components: {\n      QueryPreviewList\n    },\n    data() {\n      return {\n        queries: ['sandals', 'tshirt', 'jacket']\n      };\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <div>\n    <template v-if=\"$slots.header\">\n      <slot name=\"header\" />\n    </template>\n    <SlidingPanel\n      :showButtons=\"!isTouchable\"\n      :resetOnContentChange=\"false\"\n      buttonClass=\"x-button-lead x-button-circle x-button-ghost x-p-0\"\n      scrollContainerClass=\"desktop:x-sliding-panel-fade desktop:x-sliding-panel-fade-sm\"\n      class=\"x-sliding-panel-show-buttons-on-hover\"\n    >\n      <template #sliding-panel-left-button>\n        <ChevronLeftIcon class=\"x-icon-lg\" />\n      </template>\n      <template #sliding-panel-right-button>\n        <ChevronRightIcon class=\"x-icon-lg\" />\n      </template>\n      <slot />\n    </SlidingPanel>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { SlidingPanel, ChevronLeftIcon, ChevronRightIcon } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      SlidingPanel,\n      ChevronLeftIcon,\n      ChevronRightIcon\n    },\n    setup() {\n      const { isTouchable } = useDevice();\n      return { isTouchable };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { SlidingPanel, ChevronLeftIcon, ChevronRightIcon } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      SlidingPanel,\n      ChevronLeftIcon,\n      ChevronRightIcon\n    },\n    setup() {\n      const { isTouchable } = useDevice();\n      return { isTouchable };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Prop, Component, Vue } from 'vue-property-decorator';\n  import { QueryPreview, QueryPreviewList } from '@empathyco/x-components/queries-preview';\n  import {\n    BaseEventButton,\n    QueryFeature,\n    QueryPreviewInfo,\n    XEventsTypes,\n    XInject,\n    ItemsList,\n    ArrowRightIcon\n  } from '@empathyco/x-components';\n  import { default as Result } from '../results/result.vue';\n  import CustomSlidingPanel from '../custom-sliding-panel.vue';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n\n  @Component({\n    components: {\n      CustomSlidingPanel,\n      DisplayClickProvider,\n      QueryPreview,\n      Result,\n      BaseEventButton,\n      ItemsList,\n      ArrowRightIcon,\n      QueryPreviewList\n    }\n  })\n  export default class CustomQueryPreview extends Vue {\n    @Prop({ default: 'customer' })\n    protected queryFeature!: QueryFeature;\n\n    @XInject('queriesPreviewInfo')\n    public queriesPreviewInfo!: QueryPreviewInfo[];\n\n    protected get queries(): string[] {\n      return this.queriesPreviewInfo.map(item => item.query);\n    }\n\n    protected getTitle(query: string): string {\n      return this.queriesPreviewInfo.find(item => item.query === query)?.title ?? '';\n    }\n\n    protected getEvent(query: string): Partial<XEventsTypes> {\n      return {\n        UserAcceptedAQuery: query\n      };\n    }\n  }\n","<template>\n  <QueryPreviewList\n    v-if=\"!$x.query.searchBox && queriesPreviewInfo\"\n    :debounceTimeMs=\"250\"\n    :queries=\"queries\"\n    #default=\"{ query, totalResults, results }\"\n  >\n    <div class=\"x-mb-40 x-flex x-flex-col x-gap-2 desktop:x-mb-64 desktop:x-gap-16\">\n      <h1 class=\"x-title1 max-desktop:x-title1-sm max-desktop:x-px-16\">\n        {{ getTitle(query) }}\n      </h1>\n      <CustomSlidingPanel>\n        <template #header>\n          <BaseEventButton\n            :events=\"getEvent(query)\"\n            class=\"x-button-neutral x-button-tight x-button max-desktop:x-px-16\"\n          >\n            {{ query }}\n            ({{ totalResults }})\n            <ArrowRightIcon class=\"x-icon-lg\" />\n          </BaseEventButton>\n        </template>\n        <DisplayClickProvider resultFeature=\"brand_recommendations\">\n          <div class=\"x-flex x-gap-16 x-pt-16 max-desktop:x-px-16\">\n            <Result\n              v-for=\"result in results\"\n              :key=\"result.id\"\n              :result=\"result\"\n              class=\"x-w-[calc(38vw-16px)] desktop:x-w-[216px]\"\n            />\n          </div>\n        </DisplayClickProvider>\n      </CustomSlidingPanel>\n    </div>\n  </QueryPreviewList>\n</template>\n\n<script lang=\"ts\">\n  import { Prop, Component, Vue } from 'vue-property-decorator';\n  import { QueryPreview, QueryPreviewList } from '@empathyco/x-components/queries-preview';\n  import {\n    BaseEventButton,\n    QueryFeature,\n    QueryPreviewInfo,\n    XEventsTypes,\n    XInject,\n    ItemsList,\n    ArrowRightIcon\n  } from '@empathyco/x-components';\n  import { default as Result } from '../results/result.vue';\n  import CustomSlidingPanel from '../custom-sliding-panel.vue';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n\n  @Component({\n    components: {\n      CustomSlidingPanel,\n      DisplayClickProvider,\n      QueryPreview,\n      Result,\n      BaseEventButton,\n      ItemsList,\n      ArrowRightIcon,\n      QueryPreviewList\n    }\n  })\n  export default class CustomQueryPreview extends Vue {\n    @Prop({ default: 'customer' })\n    protected queryFeature!: QueryFeature;\n\n    @XInject('queriesPreviewInfo')\n    public queriesPreviewInfo!: QueryPreviewInfo[];\n\n    protected get queries(): string[] {\n      return this.queriesPreviewInfo.map(item => item.query);\n    }\n\n    protected getTitle(query: string): string {\n      return this.queriesPreviewInfo.find(item => item.query === query)?.title ?? '';\n    }\n\n    protected getEvent(query: string): Partial<XEventsTypes> {\n      return {\n        UserAcceptedAQuery: query\n      };\n    }\n  }\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n  import { ChevronUpIcon, Fade } from '@empathyco/x-components';\n  import { ScrollToTop } from '@empathyco/x-components/scroll';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      ScrollToTop,\n      ChevronUpIcon\n    }\n  })\n  export default class ScrollToTopComponent extends Vue {\n    private animation = Fade;\n  }\n","<template>\n  <ScrollToTop\n    class=\"x-button-lead x-button-circle x-layout-on-margin-right x-justify-self-end desktop:x-mb-16 desktop:x-mr-16\"\n    scrollId=\"main-scroll\"\n    :thresholdPx=\"100\"\n    :animation=\"animation\"\n  >\n    <ChevronUpIcon class=\"x-icon-lg desktop:x-icon-md\" />\n  </ScrollToTop>\n</template>\n\n<script lang=\"ts\">\n  import { ChevronUpIcon, Fade } from '@empathyco/x-components';\n  import { ScrollToTop } from '@empathyco/x-components/scroll';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      ScrollToTop,\n      ChevronUpIcon\n    }\n  })\n  export default class ScrollToTopComponent extends Vue {\n    private animation = Fade;\n  }\n</script>\n","import { EmpathizeXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the empathize module.\n *\n * @internal\n */\nexport const empathizeXStoreModule: EmpathizeXStoreModule = {\n  state: () => ({\n    config: {},\n    isOpen: false\n  }),\n  getters: {},\n  mutations: {\n    setIsOpen(state, isOpen) {\n      state.isOpen = isOpen;\n    }\n  },\n  actions: {}\n};\n","import { XModule } from '../x-modules.types';\nimport { empathizeEmitters } from './store/emitters';\nimport { empathizeXStoreModule } from './store/module';\nimport { EmpathizeXStoreModule } from './store/types';\nimport { empathizeWiring } from './wiring';\n\n/**\n * Empathize {@link XModule} alias.\n *\n * @public\n */\nexport type EmpathizeXModule = XModule<EmpathizeXStoreModule>;\n\n/**\n * Empathize {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `empathize` entry point.\n *\n * @public\n */\nexport const empathizeXModule: EmpathizeXModule = {\n  name: 'empathize',\n  storeModule: empathizeXStoreModule,\n  storeEmitters: empathizeEmitters,\n  wiring: empathizeWiring\n};\n","import { createStoreEmitters } from '../../../store';\nimport { empathizeXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the empathize module.\n *\n * @internal\n */\nexport const empathizeEmitters = createStoreEmitters(empathizeXStoreModule, {});\n","import { namespacedWireCommit } from '../../wiring/namespaced-wires.factory';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * Sets the empathize state `isOpen` to true.\n *\n * @public\n */\nconst setIsOpen = namespacedWireCommit('empathize')('setIsOpen', true);\n\n/**\n * Sets the empathize state `isOpen` to false.\n *\n * @public\n */\nconst setIsNotOpen = namespacedWireCommit('empathize')('setIsOpen', false);\n\n/**\n * Wiring configuration for the {@link EmpathizeXModule | empathize module}.\n *\n * @internal\n */\nexport const empathizeWiring = createWiring({\n  EmpathizeOpened: {\n    setIsOpen\n  },\n  EmpathizeClosed: {\n    setIsNotOpen\n  }\n});\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { Debounce } from '../../../components/decorators/debounce.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata, XEvent } from '../../../wiring';\n  import { empathizeXModule } from '../x-module';\n\n  /**\n   * Component containing the empathize. It has a required slot to define its content and two props\n   * to define when to open and close it: eventsToOpenEmpathize and eventsToCloseEmpathize.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(empathizeXModule)]\n  })\n  export default class Empathize extends Vue {\n    /**\n     * Animation component that will be used to animate the empathize.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    protected animation!: Vue;\n\n    /**\n     * Array of {@link XEvent | xEvents} to open the empathize.\n     *\n     * @public\n     */\n    @Prop({ default: () => ['UserFocusedSearchBox', 'UserIsTypingAQuery', 'UserClickedSearchBox'] })\n    protected eventsToOpenEmpathize!: XEvent[];\n\n    /**\n     * Array of {@link XEvent | xEvents} to close the empathize.\n     *\n     * @public\n     */\n    @Prop({\n      default: (): XEvent[] => [\n        'UserClosedEmpathize',\n        'UserSelectedASuggestion',\n        'UserPressedEnterKey',\n        'UserBlurredSearchBox'\n      ]\n    })\n    protected eventsToCloseEmpathize!: XEvent[];\n\n    /**\n     * The modal container is open.\n     *\n     * @internal\n     */\n    protected isOpen = false;\n\n    public $refs!: {\n      /** Hidden span as default slot content to check if the empathize has content or not. */\n      noContent?: HTMLSpanElement;\n      /** The empathize root element. */\n      empathize: HTMLDivElement;\n    };\n\n    /**\n     * Reflects if the empathize has content.\n     *\n     * @internal\n     */\n    protected hasContent = false;\n\n    /**\n     * The Vue lifecycle hook {@link https://vuex.vuejs.org/guide/state.html | updated} is called\n     * after a data change causes the virtual DOM to be re-rendered and patched. Using it to detect\n     * if the default slot content has been replaced.\n     *\n     * @public\n     */\n    updated(): void {\n      this.hasContent = !this.$refs.noContent;\n    }\n\n    /**\n     * Open empathize. This method will be executed on any event in\n     * {@link Empathize.eventsToOpenEmpathize} and on DOM event `focusin` on Empathize root element.\n     *\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\n     *\n     * @internal\n     */\n    @XOn(component => (component as Empathize).eventsToOpenEmpathize)\n    open(payload: unknown, metadata: WireMetadata): void {\n      if (!this.$refs.noContent) {\n        this.changeOpenState(true, metadata);\n      }\n    }\n\n    /**\n     * Close empathize. This method will be executed on any event in\n     * {@link Empathize.eventsToCloseEmpathize} and on DOM event `focusout` on Empathize root\n     * element.\n     *\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\n     *\n     * @internal\n     */\n    @XOn(component => (component as Empathize).eventsToCloseEmpathize)\n    close(payload: unknown, metadata: WireMetadata): void {\n      if (!this.$refs.empathize?.contains(document.activeElement)) {\n        this.changeOpenState(false, metadata);\n      }\n    }\n\n    /**\n     * Changes the state of {@link Empathize.isOpen} assigning to it the value of `newOpenState`\n     * parameter. Also emits the {@link XEvent | XEvents} `EmpathizeOpened` or `EmpathizeClosed` if\n     * the state really changes.\n     *\n     * @param newOpenState - The new state to assign to {@link Empathize.isOpen}.\n     * @param metadata - The {@link WireMetadata} to emit the {@link XEvent | XEvents}. If it is\n     * undefined, this component is used as source of info for the metadata.\n     *\n     * @internal\n     */\n    @Debounce(0)\n    changeOpenState(newOpenState: boolean, metadata: WireMetadata): void {\n      if (this.isOpen !== newOpenState) {\n        this.isOpen = newOpenState;\n        this.$x.emit(\n          this.isOpen ? 'EmpathizeOpened' : 'EmpathizeClosed',\n          undefined,\n          metadata ?? { moduleName: 'empathize', target: this.$el }\n        );\n      }\n    }\n  }\n","<template>\n  <component :is=\"animation\">\n    <div\n      v-show=\"isOpen && hasContent\"\n      ref=\"empathize\"\n      @mousedown.prevent\n      @focusin=\"open\"\n      @focusout=\"close\"\n      class=\"x-empathize\"\n      data-test=\"empathize\"\n      style=\"content-visibility: auto\"\n    >\n      <!-- @slot (Required) Modal container content -->\n      <slot>\n        <span ref=\"noContent\" hidden aria-hidden=\"true\" />\n      </slot>\n    </div>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import Component from 'vue-class-component';\n  import { Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { Debounce } from '../../../components/decorators/debounce.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata, XEvent } from '../../../wiring';\n  import { empathizeXModule } from '../x-module';\n\n  /**\n   * Component containing the empathize. It has a required slot to define its content and two props\n   * to define when to open and close it: eventsToOpenEmpathize and eventsToCloseEmpathize.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(empathizeXModule)]\n  })\n  export default class Empathize extends Vue {\n    /**\n     * Animation component that will be used to animate the empathize.\n     *\n     * @public\n     */\n    @Prop({ default: () => NoElement })\n    protected animation!: Vue;\n\n    /**\n     * Array of {@link XEvent | xEvents} to open the empathize.\n     *\n     * @public\n     */\n    @Prop({ default: () => ['UserFocusedSearchBox', 'UserIsTypingAQuery', 'UserClickedSearchBox'] })\n    protected eventsToOpenEmpathize!: XEvent[];\n\n    /**\n     * Array of {@link XEvent | xEvents} to close the empathize.\n     *\n     * @public\n     */\n    @Prop({\n      default: (): XEvent[] => [\n        'UserClosedEmpathize',\n        'UserSelectedASuggestion',\n        'UserPressedEnterKey',\n        'UserBlurredSearchBox'\n      ]\n    })\n    protected eventsToCloseEmpathize!: XEvent[];\n\n    /**\n     * The modal container is open.\n     *\n     * @internal\n     */\n    protected isOpen = false;\n\n    public $refs!: {\n      /** Hidden span as default slot content to check if the empathize has content or not. */\n      noContent?: HTMLSpanElement;\n      /** The empathize root element. */\n      empathize: HTMLDivElement;\n    };\n\n    /**\n     * Reflects if the empathize has content.\n     *\n     * @internal\n     */\n    protected hasContent = false;\n\n    /**\n     * The Vue lifecycle hook {@link https://vuex.vuejs.org/guide/state.html | updated} is called\n     * after a data change causes the virtual DOM to be re-rendered and patched. Using it to detect\n     * if the default slot content has been replaced.\n     *\n     * @public\n     */\n    updated(): void {\n      this.hasContent = !this.$refs.noContent;\n    }\n\n    /**\n     * Open empathize. This method will be executed on any event in\n     * {@link Empathize.eventsToOpenEmpathize} and on DOM event `focusin` on Empathize root element.\n     *\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\n     *\n     * @internal\n     */\n    @XOn(component => (component as Empathize).eventsToOpenEmpathize)\n    open(payload: unknown, metadata: WireMetadata): void {\n      if (!this.$refs.noContent) {\n        this.changeOpenState(true, metadata);\n      }\n    }\n\n    /**\n     * Close empathize. This method will be executed on any event in\n     * {@link Empathize.eventsToCloseEmpathize} and on DOM event `focusout` on Empathize root\n     * element.\n     *\n     * @param payload - The payload of the {@link XEvent}, that is unused in this case.\n     * @param metadata - The {@link WireMetadata} of the event, used to emit the Empathize XEvents.\n     *\n     * @internal\n     */\n    @XOn(component => (component as Empathize).eventsToCloseEmpathize)\n    close(payload: unknown, metadata: WireMetadata): void {\n      if (!this.$refs.empathize?.contains(document.activeElement)) {\n        this.changeOpenState(false, metadata);\n      }\n    }\n\n    /**\n     * Changes the state of {@link Empathize.isOpen} assigning to it the value of `newOpenState`\n     * parameter. Also emits the {@link XEvent | XEvents} `EmpathizeOpened` or `EmpathizeClosed` if\n     * the state really changes.\n     *\n     * @param newOpenState - The new state to assign to {@link Empathize.isOpen}.\n     * @param metadata - The {@link WireMetadata} to emit the {@link XEvent | XEvents}. If it is\n     * undefined, this component is used as source of info for the metadata.\n     *\n     * @internal\n     */\n    @Debounce(0)\n    changeOpenState(newOpenState: boolean, metadata: WireMetadata): void {\n      if (this.isOpen !== newOpenState) {\n        this.isOpen = newOpenState;\n        this.$x.emit(\n          this.isOpen ? 'EmpathizeOpened' : 'EmpathizeClosed',\n          undefined,\n          metadata ?? { moduleName: 'empathize', target: this.$el }\n        );\n      }\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component will listen to the configured events in `eventsToOpenEmpathize` and\n`eventsToCloseEmpathize` props and open/close itself accordingly. By default, those props values\nare:\n\n- Open: `UserFocusedSearchBox`, `'`UserIsTypingAQuery`, `'`UserClickedSearchBox` and\n- Close: `UserClosedEmpathize`, `UserSelectedASuggestion`, `UserPressedEnter`,\n  'UserBlurredSearchBox`\n\n### Basic examples\n\nThe component rendering the query suggestions, popular searches and history queries with keyboard\nnavigation.\n\n```vue\n<Empathize>\n  <template #default>\n    <BaseKeyboardNavigation>\n      <QuerySuggestions/>\n      <PopularSearches/>\n      <HistoryQueries/>\n    </BaseKeyboardNavigation>\n  </template>\n</Empathize>\n```\n\nDefining custom values for the events to open and close the Empathize. For example opening it when\nthe search box loses the focus and closing it when the search box receives the focus:\n\n```vue\n<Empathize\n  :eventsToOpenEmpathize=\"['UserBlurredSearchBox']\"\n  :eventsToCloseEmpathize=\"['UserFocusedSearchBox']\"\n>\n  <template #default>\n    Please, type a query in the Search Box.\n  </template>\n</Empathize>\n```\n\nAn animation can be used for the opening and closing using the `animation` prop. The animation, must\nbe a Component with a `Transition` with a slot inside:\n\n```vue\n<Empathize :animation=\"collapseFromTop\">\n  <template #default>\n    <PopularSearches/>\n  </template>\n</Empathize>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `EmpathizeOpened`: the event is emitted after receiving an event to change the state `isOpen` to\n  `true`. The event payload is undefined and can have a metadata with the module and the element\n  that emitted it.\n- `EmpathizeClosed`: the event is emitted after receiving an event to change the state `isOpen` to\n  `false`. The event payload is undefined and can have a metadata with the module and the element\n  that emitted it.\n</docs>\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { ActionsClass } from '../../../../store/actions.types';\nimport { isArrayEmpty } from '../../../../utils/array';\nimport { normalizeString } from '../../../../utils/normalize';\nimport { Pair } from '../../../../utils/types';\nimport { HistoryQueriesActionContext, HistoryQueriesXStoreModule } from '../types';\n\n/** Regex for splitting a query into its words. */\nconst SPLIT_WORDS_REGEX = /[\\s-]/;\n\n/**\n * Class implementation for the {@link HistoryQueriesActions.addQueryToHistory} action.\n *\n * @public\n */\nexport class AddQueryToHistoryAction implements ActionsClass<HistoryQueriesXStoreModule> {\n  /**\n   * Default implementation for the {@link HistoryQueriesActions.addQueryToHistory}.\n   *\n   * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the\n   * actions, provided by Vuex.\n   * @param query - The query to try to add to the history.\n   * @returns A `void` promise that resolves when the history queries finishes updating.\n   */\n  addQueryToHistory(\n    { state, dispatch }: HistoryQueriesActionContext,\n    query: string\n  ): void | Promise<void> {\n    const normalizedQuery = normalizeString(query);\n    if (!normalizedQuery) {\n      return;\n    }\n\n    if (isArrayEmpty(state.historyQueries)) {\n      return dispatch('setHistoryQueries', [this.createHistoryQuery(query)]);\n    }\n\n    const newHistory = this.createNewHistory(state.historyQueries, normalizedQuery);\n    if (newHistory) {\n      newHistory.unshift(this.createHistoryQuery(query));\n      return dispatch('setHistoryQueries', newHistory);\n    }\n  }\n\n  /**\n   * Creates a new `HistoryQuery`.\n   *\n   * @param query - The query for the new `HistoryQuery`.\n   * @returns A new `HistoryQuery`.\n   * @internal\n   */\n  protected createHistoryQuery(query: string): HistoryQuery {\n    return {\n      query: query.trim(),\n      timestamp: Date.now(),\n      modelName: 'HistoryQuery'\n    };\n  }\n\n  /**\n   * Creates a new history from the old one to store the new query. Depending on the comparison\n   * between the new query, and the last one in the history, it can return three different things:\n   * - If it the last stored query should be replaced with the new one\n   * ({@link AddQueryToHistoryAction.isReplaceAction} returns true), it returns a copy of the old\n   * history, without the new query and the first item.\n   * - If the new query should be simply added to the history\n   * ({@link AddQueryToHistoryAction.isAddAction} returns true), It returns a copy of the old\n   * history but without the new query if it was present.\n   * - In any other case, the query shouldn't be saved, so this method returns `null`.\n   *\n   * @param currentHistory - The current history of queries.\n   * @param normalizedQuery - The normalized version of the new query, to be stored on the history.\n   * @returns A subset of the current history of queries ready to add the new `HistoryQuery`, or\n   * null if the new query shouldn't be saved.\n   * @internal\n   */\n  protected createNewHistory(\n    currentHistory: HistoryQuery[],\n    normalizedQuery: string\n  ): HistoryQuery[] | null {\n    const normalizedLastQuery = normalizeString(currentHistory[0].query);\n    const queriesTuple: Pair<string> = [normalizedLastQuery, normalizedQuery];\n\n    const newWords = normalizedQuery.split(SPLIT_WORDS_REGEX);\n    const lastWords = normalizedLastQuery.split(SPLIT_WORDS_REGEX);\n    const wordsTuple: Pair<string[]> = [lastWords, newWords];\n\n    return this.isReplaceAction(wordsTuple, queriesTuple)\n      ? // TODO EX-1815 This replace does not take into account yet queries that end in numbers\n        this.removeNewQueryFromHistory(currentHistory.slice(1), normalizedQuery)\n      : this.isAddAction(wordsTuple, queriesTuple)\n      ? this.removeNewQueryFromHistory(currentHistory, normalizedQuery)\n      : null;\n  }\n\n  /**\n   * Creates a copy of the current history, but removing the new query to store from it. It uses a\n   * normalized version of the queries for comparing.\n   *\n   * @param currentHistory - The current history queries.\n   * @param normalizedQuery - The normalized version of the new query to add to the history.\n   * @returns A copy of the current history but without the new query into it.\n   * @internal\n   */\n  protected removeNewQueryFromHistory(\n    currentHistory: HistoryQuery[],\n    normalizedQuery: string\n  ): HistoryQuery[] {\n    return currentHistory.filter(\n      historyQuery => normalizeString(historyQuery.query) !== normalizedQuery\n    );\n  }\n\n  /**\n   * Calculates if the new query should be added to the history.\n   *\n   * @param wordsTuple - A tuple containing the old, and the new words arrays.\n   * @param queriesTuple - A tuple containing the old and the new queries.\n   * @returns `true` when the new query should be added. `false` otherwise.\n   * @internal\n   */\n  protected isAddAction(\n    [lastWords, newWords]: Pair<string[]>,\n    [lastQuery, newQuery]: Pair<string>\n  ): boolean {\n    return newWords.length !== lastWords.length || !lastQuery.includes(newQuery);\n  }\n\n  /**\n   * Calculates if the new query should replace the last query in the history.\n   *\n   * @param wordsTuple - A tuple containing the old, and the new words arrays.\n   * @param queriesTuple - A tuple containing the old and the new queries.\n   * @returns `true` when the new query should replace the last one. `false` otherwise.\n   * @internal\n   */\n  protected isReplaceAction(\n    [lastWords, newWords]: Pair<string[]>,\n    [lastQuery, newQuery]: Pair<string>\n  ): boolean {\n    return lastQuery === newQuery || this.isQueryBeingRefined(lastWords, newWords);\n  }\n\n  /**\n   * Returns if the new query is a refined version of the last one. A refined version means to be\n   * more specific. I.e. `shoes` is a refined query of `shoe`, `lego star wars` is a refined query\n   * of `lego st`.\n   *\n   * @param lastWords - An array containing the words of the last query.\n   * @param newWords - An array containing the words of the new query.\n   * @returns `true` if the new query is refining the old one. `false` otherwise.\n   * @internal\n   */\n  protected isQueryBeingRefined(lastWords: string[], newWords: string[]): boolean {\n    const refinedWordIndex = lastWords.length - 1;\n    const lastRefinedWord = lastWords[refinedWordIndex];\n    const newRefinedWord = newWords[refinedWordIndex];\n    return (\n      !!lastRefinedWord &&\n      !!newRefinedWord &&\n      newRefinedWord !== lastRefinedWord &&\n      newRefinedWord.includes(lastRefinedWord)\n    );\n  }\n}\n\nconst addQueryToHistoryAction = new AddQueryToHistoryAction();\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * {@inheritDoc AddQueryToHistoryAction.addQueryToHistory}\n *\n * @public\n */\nexport const addQueryToHistory =\n  addQueryToHistoryAction.addQueryToHistory.bind(addQueryToHistoryAction);\n/* eslint-enable jsdoc/require-description-complete-sentence */\n","export const HISTORY_QUERIES_STORAGE_KEY = 'history-queries';\nexport const SESSION_TIME_STAMP_STORAGE_KEY = 'session-time-stamp';\nexport const HISTORY_QUERIES_ENABLED_KEY = 'history-queries-enabled';\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { GettersClass } from '../../../../store/getters.types';\nimport { normalizeString } from '../../../../utils/normalize';\nimport { HistoryQueriesState, HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Class implementation for the {@link HistoryQueriesGetters.historyQueries} getter.\n *\n * @public\n */\nexport class HistoryQueriesGetter implements GettersClass<HistoryQueriesXStoreModule> {\n  /**\n   * Default implementation for the {@link HistoryQueriesGetters.historyQueries} getter.\n   *\n   * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history\n   * queries module.\n   * @returns The filtered subset of queries, matching with the current query.\n   */\n  historyQueries({ query, historyQueries, config }: HistoryQueriesState): HistoryQuery[] {\n    return query\n      ? historyQueries.filter(\n          this.searchInHistoryQueries(normalizeString(query), config.hideIfEqualsQuery)\n        )\n      : historyQueries;\n  }\n\n  /**\n   * Creates a function for searching in the history queries array the items that match the current\n   * query.\n   *\n   * @param normalizedQuery - The normalized query for search into the array.\n   * @param hideIfEqualsQuery - If `true`, removes items that are exactly like the current query.\n   * @returns A filter function for searching into the array of history queries with the provided\n   * params.\n   * @internal\n   */\n  protected searchInHistoryQueries(\n    normalizedQuery: string,\n    hideIfEqualsQuery: boolean\n  ): (historyQuery: HistoryQuery) => boolean {\n    return (historyQuery: HistoryQuery) => {\n      const normalizedHistoryQuery = normalizeString(historyQuery.query);\n      const matchesQuery = normalizedHistoryQuery.includes(normalizedQuery);\n      return hideIfEqualsQuery\n        ? matchesQuery && normalizedHistoryQuery !== normalizedQuery\n        : matchesQuery;\n    };\n  }\n}\n\nconst historyQueriesGetter = new HistoryQueriesGetter();\n\n// eslint-disable-next-line jsdoc/require-description-complete-sentence\n/**\n * {@inheritDoc HistoryQueriesGetter.historyQueries}\n *\n * @public\n */\nexport const historyQueries = historyQueriesGetter.historyQueries.bind(historyQueriesGetter);\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { localStorageService } from '../../../utils/storage';\nimport { addQueryToHistory } from './actions/add-query-to-history.action';\n// eslint-disable-next-line max-len\nimport { loadHistoryQueriesFromBrowserStorage } from './actions/load-history-queries-from-browser-storage.action';\nimport { refreshSession } from './actions/refresh-session.action';\nimport { removeFromHistory } from './actions/remove-query-from-history.action';\nimport { setHistoryQueries } from './actions/set-history-queries.action';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { toggleHistoryQueries } from './actions/toggle-history-queries.action';\n// eslint-disable-next-line max-len\nimport { updateHistoryQueriesWithSearchResponse } from './actions/update-history-queries-with-search-response.action';\nimport { HISTORY_QUERIES_ENABLED_KEY } from './constants';\nimport { historyQueries } from './getters/history-queries.getter';\nimport { normalizedQuery } from './getters/normalized-query.getter';\nimport { historyQueriesWithResults } from './getters/history-queries-with-results.getter';\nimport { sessionHistoryQueries } from './getters/session-history-queries.getter';\nimport { storageKey } from './getters/storage-key.getter';\nimport { HistoryQueriesXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the history-queries module.\n *\n * @internal\n */\nexport const historyQueriesXStoreModule: HistoryQueriesXStoreModule = {\n  state: () => ({\n    config: {\n      debounceInMs: 150,\n      maxItemsToStore: 50,\n      hideIfEqualsQuery: true,\n      sessionTTLInMs: 30 * 60 * 1000\n    },\n    query: '',\n    historyQueries: [],\n    sessionTimeStampInMs: Date.now(),\n    isEnabled: localStorageService.getItem<boolean>(HISTORY_QUERIES_ENABLED_KEY) ?? true\n  }),\n  getters: {\n    historyQueries,\n    normalizedQuery,\n    historyQueriesWithResults,\n    sessionHistoryQueries,\n    storageKey\n  },\n  mutations: {\n    setHistoryQueries(state, historyQueries) {\n      state.historyQueries = historyQueries;\n    },\n    setSessionTimeStamp(state, sessionTimeStamp) {\n      state.sessionTimeStampInMs = sessionTimeStamp;\n    },\n    setQuery,\n    setIsEnabled(state, isEnabled) {\n      state.isEnabled = isEnabled;\n    }\n  },\n  actions: {\n    addQueryToHistory,\n    loadHistoryQueriesFromBrowserStorage,\n    refreshSession,\n    removeFromHistory,\n    setHistoryQueries,\n    setUrlParams,\n    toggleHistoryQueries,\n    updateHistoryQueriesWithSearchResponse\n  }\n};\n","import { normalizeString } from '../../../../utils/normalize';\nimport { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesGetters.normalizedQuery} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history\n * queries module.\n *\n * @returns The normalized query.\n *\n * @public\n */\nexport const normalizedQuery: HistoryQueriesXStoreModule['getters']['normalizedQuery'] = ({\n  query\n}) => normalizeString(query);\n","import { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesGetters.historyQueriesWithResults} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history\n * queries module.\n *\n * @param getters - Current {@link https://vuex.vuejs.org/guide/getters.html | getters} of the\n * history queries module.\n *\n * @returns The history queries that have results at the moment they were requested.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const historyQueriesWithResults: HistoryQueriesXStoreModule['getters']['historyQueriesWithResults'] =\n  (state, { historyQueries }) => historyQueries.filter(({ totalResults }) => totalResults !== 0);\n","import { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesGetters.sessionHistoryQueries} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the history\n * queries module.\n * @returns The history queries that have been made in the current session.\n * @public\n */\nexport const sessionHistoryQueries: HistoryQueriesXStoreModule['getters']['sessionHistoryQueries'] =\n  ({ sessionTimeStampInMs, historyQueries }) => {\n    return historyQueries.filter(historyQuery => historyQuery.timestamp > sessionTimeStampInMs);\n  };\n","import { HISTORY_QUERIES_STORAGE_KEY } from '../constants';\nimport { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesGetters.storageKey} getter.\n *\n * @returns The key for retrieving and saving the history queries int the browser storage.\n * @public\n */\nexport const storageKey: HistoryQueriesXStoreModule['getters']['storageKey'] = () => {\n  return HISTORY_QUERIES_STORAGE_KEY;\n};\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { localStorageService } from '../../../../utils/storage';\nimport { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the\n * {@link HistoryQueriesActions.loadHistoryQueriesFromBrowserStorage} action.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @public\n */\n// eslint-disable-next-line max-len\nexport const loadHistoryQueriesFromBrowserStorage: HistoryQueriesXStoreModule['actions']['loadHistoryQueriesFromBrowserStorage'] =\n  ({ commit, getters }) => {\n    const historyQueries = localStorageService.getItem<HistoryQuery[]>(getters.storageKey) ?? [];\n    commit('setHistoryQueries', historyQueries);\n  };\n","import { localStorageService } from '../../../../utils/storage';\nimport { SESSION_TIME_STAMP_STORAGE_KEY } from '../constants';\nimport { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesActions.refreshSession}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @public\n */\nexport const refreshSession: HistoryQueriesXStoreModule['actions']['refreshSession'] = ({\n  state,\n  commit\n}) => {\n  const sessionTimeStampInMs =\n    localStorageService.getItem<number>(SESSION_TIME_STAMP_STORAGE_KEY) ?? Date.now();\n  localStorageService.setItem(\n    SESSION_TIME_STAMP_STORAGE_KEY,\n    sessionTimeStampInMs,\n    state.config.sessionTTLInMs\n  );\n  commit('setSessionTimeStamp', sessionTimeStampInMs);\n};\n","import { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesActions.removeFromHistory}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param historyQueryToRemove - The `HistoryQuery` to remove from the history.\n * @returns A `void` promise that resolves when the history queries finishes updating.\n * @public\n */\nexport const removeFromHistory: HistoryQueriesXStoreModule['actions']['removeFromHistory'] = (\n  { state, dispatch },\n  historyQueryToRemove\n) => {\n  const newHistoryQueries = state.historyQueries.filter(\n    historyQuery => historyQuery.query !== historyQueryToRemove.query\n  );\n  return dispatch('setHistoryQueries', newHistoryQueries);\n};\n","import { localStorageService } from '../../../../utils/storage';\nimport { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesActions.setHistoryQueries}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param historyQueries - The new history queries to save to the store and browser storage.\n * @public\n */\nexport const setHistoryQueries: HistoryQueriesXStoreModule['actions']['setHistoryQueries'] = (\n  { commit, state, getters },\n  historyQueries\n) => {\n  if (state.isEnabled) {\n    if (historyQueries.length > state.config.maxItemsToStore) {\n      historyQueries = historyQueries.slice(0, state.config.maxItemsToStore);\n    }\n    commit('setHistoryQueries', historyQueries);\n    localStorageService.setItem(getters.storageKey, historyQueries);\n  }\n};\n","import { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link HistoryQueriesActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param urlParams - List of params from the url.\n * @public\n */\nexport const setUrlParams: HistoryQueriesXStoreModule['actions']['setUrlParams'] = (\n  { commit },\n  { query }\n) => {\n  commit('setQuery', query);\n};\n","import { localStorageService } from '../../../../utils/storage';\nimport { HISTORY_QUERIES_ENABLED_KEY } from '../constants';\nimport { HistoryQueriesXStoreModule } from '../types';\n\nexport const toggleHistoryQueries: HistoryQueriesXStoreModule['actions']['toggleHistoryQueries'] =\n  async ({ dispatch, commit }, isEnabled) => {\n    if (!isEnabled) {\n      await dispatch('setHistoryQueries', []);\n    }\n\n    commit('setIsEnabled', isEnabled);\n    localStorageService.setItem(HISTORY_QUERIES_ENABLED_KEY, isEnabled);\n  };\n","import { HistoryQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the\n * {@link HistoryQueriesActions.updateHistoryQueriesWithSearchResponse} action.\n *\n * The matching history query will only be updated on the following scenarios:\n * 1. If it is part of a previous session, not the current one.\n * 2. If its total results count has not been registered yet.\n * 3. If its total results count registered is less than the one specified on the search response,\n * meaning that the previous update was part of a filtered request.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param searchResponse - The search response to update history queries with.\n *\n * @returns A `void` promise that resolves when the history query finishes updating.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const updateHistoryQueriesWithSearchResponse: HistoryQueriesXStoreModule['actions']['updateHistoryQueriesWithSearchResponse'] =\n  ({ state, dispatch }, searchResponse) => {\n    if (searchResponse.status === 'success') {\n      const indexOfHistoryQuery = state.historyQueries.findIndex(\n        ({ query }) => query === searchResponse.request.query\n      );\n      if (indexOfHistoryQuery >= 0) {\n        const historyQuery = state.historyQueries[indexOfHistoryQuery];\n        const isCurrentSessionHistoryQuery = historyQuery.timestamp > state.sessionTimeStampInMs;\n        if (\n          !isCurrentSessionHistoryQuery ||\n          historyQuery.totalResults == null ||\n          historyQuery.totalResults < searchResponse.totalResults\n        ) {\n          const newHistoryQueries = state.historyQueries.slice();\n          newHistoryQueries[indexOfHistoryQuery] = {\n            ...historyQuery,\n            totalResults: searchResponse.totalResults\n          };\n          return dispatch('setHistoryQueries', newHistoryQueries);\n        }\n      }\n    }\n  };\n","import { createStoreEmitters } from '../../../store';\nimport { historyQueriesXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the history-queries module.\n *\n * @internal\n */\nexport const historyQueriesEmitters = createStoreEmitters(historyQueriesXStoreModule, {\n  // Used for filtering next-queries with the session history queries\n  SessionHistoryQueriesChanged: (_state, getters) => getters.sessionHistoryQueries,\n  // Used for refreshing the session until it is extracted from the history queries module\n  HistoryQueriesQueryChanged: { immediate: true, selector: state => state.query },\n  // Used to load history-queries from the browser storage\n  HistoryQueriesStorageKeyChanged: {\n    immediate: true,\n    selector: (_state, getters) => getters.storageKey\n  }\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch,\n  namespacedWireDispatchWithoutPayload\n} from '../../wiring/namespaced-wires.factory';\nimport { namespacedDebounce } from '../../wiring/namespaced-wires.operators';\nimport { NamespacedWireCommit, NamespacedWireDispatch } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `historyQueries` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'historyQueries';\n/**\n * WireCommit for {@link HistoryQueriesXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n/**\n * WireDispatch for {@link HistoryQueriesXModule}.\n *\n * @internal\n */\nconst wireDispatch: NamespacedWireDispatch<typeof moduleName> = namespacedWireDispatch(moduleName);\n/**\n * WireDispatchWithoutPayload for {@link HistoryQueriesXModule}.\n *\n * @internal\n */\nconst wireDispatchWithoutPayload = namespacedWireDispatchWithoutPayload(moduleName);\n\n/**\n * Saves a new query into the history queries.\n *\n * @public\n */\nexport const addQueryToHistoryQueries = wireDispatch('addQueryToHistory');\n\n/**\n * Sets the query of the history queries module. Used for searching into the history queries.\n *\n * @public\n */\nexport const setHistoryQueriesQuery = wireCommit('setQuery');\n\n/**\n * Sets the history queries state `query` from url.\n *\n * @public\n */\nconst setUrlParams = wireDispatch('setUrlParams');\n\n/**\n * Sets the query of the history queries module to an empty string.\n *\n * @public\n */\nexport const clearHistoryQueriesQuery = wireCommit('setQuery', '');\n\n/**\n * Triggers a session refresh, extending its validity for the time configured in the\n * {@link HistoryQueriesConfig.sessionTTLInMs}.\n *\n * @public\n */\nexport const refreshHistoryQueriesSession = wireDispatchWithoutPayload('refreshSession');\n\n/**\n * Loads the history queries from the browser storage, saving them to the\n * {@link HistoryQueriesState.historyQueries}.\n *\n * @public\n */\nexport const loadHistoryQueriesFromBrowserStorageWire = wireDispatchWithoutPayload(\n  'loadHistoryQueriesFromBrowserStorage'\n);\n\n/**\n * Clears the history queries.\n *\n * @public\n */\nexport const clearHistoryQueries = wireDispatch('setHistoryQueries', []);\n\n/**\n * Removes a single history query from the history queries.\n *\n * @public\n */\nexport const removeHistoryQuery = wireDispatch('removeFromHistory');\n\n/**\n * Enables history queries.\n *\n * @public\n */\nexport const setHistoryQueriesEnabled = wireDispatch('toggleHistoryQueries', true);\n\n/**\n * Disables history queries.\n *\n * @public\n */\nexport const setHistoryQueriesDisabled = wireDispatch('toggleHistoryQueries', false);\n\n/**\n * Updates the history queries with the relevant info included in a search response.\n *\n * @public\n */\nexport const updateHistoryQueriesWithSearchResponse = wireDispatch(\n  'updateHistoryQueriesWithSearchResponse'\n);\n\n/**\n * Debounce function for the module.\n */\nconst moduleDebounce = namespacedDebounce(moduleName);\n\n/**\n * Default wiring for the {@link HistoryQueries} module.\n *\n * @internal\n */\nexport const historyQueriesWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams\n  },\n  HistoryQueriesQueryChanged: {\n    refreshHistoryQueriesSession\n  },\n  HistoryQueriesStorageKeyChanged: {\n    loadHistoryQueriesFromBrowserStorageWire\n  },\n  UserClearedQuery: {\n    clearHistoryQueriesQuery\n  },\n  UserAcceptedAQuery: {\n    setHistoryQueriesQuery,\n    addQueryToHistoryQueries\n  },\n  UserIsTypingAQuery: {\n    setHistoryQueriesQueryDebounce: moduleDebounce(\n      setHistoryQueriesQuery,\n      ({ state }) => state.config.debounceInMs,\n      { cancelOn: 'UserAcceptedAQuery' }\n    )\n  },\n  UserPressedClearHistoryQueries: {\n    clearHistoryQueries\n  },\n  UserPressedRemoveHistoryQuery: {\n    removeHistoryQuery\n  },\n  UserClickedEnableHistoryQueries: {\n    setHistoryQueriesEnabled\n  },\n  UserClickedConfirmDisableHistoryQueries: {\n    setHistoryQueriesDisabled\n  },\n  UserClickedCloseX: {\n    clearHistoryQueriesQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearHistoryQueriesQuery\n  },\n  SearchResponseChanged: {\n    updateHistoryQueriesWithSearchResponse\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { historyQueriesEmitters } from './store/emitters';\nimport { historyQueriesXStoreModule } from './store/module';\nimport { HistoryQueriesXStoreModule } from './store/types';\nimport { historyQueriesWiring } from './wiring';\n\n/**\n * HistoryQueries {@link XModule} alias.\n *\n * @public\n */\nexport type HistoryQueriesXModule = XModule<HistoryQueriesXStoreModule>;\n\n/**\n * HistoryQueries {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `history-queries` entry point.\n *\n * @public\n */\nexport const historyQueriesXModule: HistoryQueriesXModule = {\n  name: 'historyQueries',\n  storeModule: historyQueriesXStoreModule,\n  storeEmitters: historyQueriesEmitters,\n  wiring: historyQueriesWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { HistoryQuery } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n\n  /**\n   * A button that when is pressed, emits the\n   * {@link HistoryQueriesXEvents.UserPressedClearHistoryQueries} event, expressing the user\n   * intention to clear the whole history of queries.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class ClearHistoryQueries extends Vue {\n    /**\n     * The whole history queries.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * Returns if the array of history queries is empty.\n     *\n     * @returns `true` if the {@link historyQueries} array is empty, `false` otherwise.\n     * @internal\n     */\n    protected get isHistoryQueriesEmpty(): boolean {\n      return this.historyQueries.length === 0;\n    }\n\n    /**\n     * Dynamic CSS classes to add to the root element of this component.\n     *\n     * @returns A booleans dictionary where each key is the class name to add, and the boolean value\n     * tells if it should be added or not.\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-clear-history-queries--is-empty': this.isHistoryQueriesEmpty\n      };\n    }\n\n    /**\n     * The list of events that are going to be emitted when the button is pressed.\n     *\n     * @internal\n     */\n    protected clearHistoryQueriesEvents: Partial<XEventsTypes> = {\n      UserPressedClearHistoryQueries: undefined\n    };\n  }\n","<template>\n  <BaseEventButton\n    class=\"x-clear-history-queries x-button\"\n    :class=\"dynamicClasses\"\n    :disabled=\"isHistoryQueriesEmpty\"\n    :events=\"clearHistoryQueriesEvents\"\n    data-test=\"clear-history-queries\"\n    aria-label=\"Clear all\"\n  >\n    <!-- @slot (Required) Button content with a message, an icon or both -->\n    <slot>✕</slot>\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import { HistoryQuery } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n\n  /**\n   * A button that when is pressed, emits the\n   * {@link HistoryQueriesXEvents.UserPressedClearHistoryQueries} event, expressing the user\n   * intention to clear the whole history of queries.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class ClearHistoryQueries extends Vue {\n    /**\n     * The whole history queries.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * Returns if the array of history queries is empty.\n     *\n     * @returns `true` if the {@link historyQueries} array is empty, `false` otherwise.\n     * @internal\n     */\n    protected get isHistoryQueriesEmpty(): boolean {\n      return this.historyQueries.length === 0;\n    }\n\n    /**\n     * Dynamic CSS classes to add to the root element of this component.\n     *\n     * @returns A booleans dictionary where each key is the class name to add, and the boolean value\n     * tells if it should be added or not.\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-clear-history-queries--is-empty': this.isHistoryQueriesEmpty\n      };\n    }\n\n    /**\n     * The list of events that are going to be emitted when the button is pressed.\n     *\n     * @internal\n     */\n    protected clearHistoryQueriesEvents: Partial<XEventsTypes> = {\n      UserPressedClearHistoryQueries: undefined\n    };\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThe component exposes a single default slot, where you can add icons or text.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <ClearHistoryQueries>Clear history queries</ClearHistoryQueries>\n    <HistoryQueries :animation=\"'FadeAndSlide'\" :maxItemsToRender=\"10\" />\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries, ClearHistoryQueries } from '@empathyco/x-components/history-queries';\n  import { FadeAndSlide } from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('FadeAndSlide', FadeAndSlide);\n  export default {\n    name: 'ClearHistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries,\n      ClearHistoryQueries\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserPressedClearHistoryQueries`: the event is emitted after the user clicks the button.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n  import { HistoryQuery } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n\n  /**\n   * Button that when it is pressed emits the\n   * {@link HistoryQueriesXEvents.UserPressedRemoveHistoryQuery} event, expressing the user\n   * intention to remove a query in the history.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class RemoveHistoryQuery extends Vue {\n    /**\n     * The historyQuery that will be removed when clicking the clear button.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected historyQuery!: HistoryQuery;\n\n    /**\n     * The event handler that will be triggered when clicking on the clear history query button.\n     *\n     * @remarks\n     * {@link HistoryQueriesXEvents.UserPressedRemoveHistoryQuery}: historyQuery\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get removeHistoryQueryEvent(): Partial<XEventsTypes> {\n      return { UserPressedRemoveHistoryQuery: this.historyQuery };\n    }\n  }\n","<template>\n  <BaseEventButton\n    class=\"x-remove-history-query\"\n    :events=\"removeHistoryQueryEvent\"\n    aria-label=\"remove\"\n  >\n    <!--  @slot (Required) Button content with a text, an icon or both -->\n    <slot />\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import { HistoryQuery } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n\n  /**\n   * Button that when it is pressed emits the\n   * {@link HistoryQueriesXEvents.UserPressedRemoveHistoryQuery} event, expressing the user\n   * intention to remove a query in the history.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class RemoveHistoryQuery extends Vue {\n    /**\n     * The historyQuery that will be removed when clicking the clear button.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected historyQuery!: HistoryQuery;\n\n    /**\n     * The event handler that will be triggered when clicking on the clear history query button.\n     *\n     * @remarks\n     * {@link HistoryQueriesXEvents.UserPressedRemoveHistoryQuery}: historyQuery\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get removeHistoryQueryEvent(): Partial<XEventsTypes> {\n      return { UserPressedRemoveHistoryQuery: this.historyQuery };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic Example\n\nYou can customize the content that this component renders. To do so, simply use the default slot.\n\n```vue\n<RemoveHistoryQuery :historyQuery=\"historyQuery\">\n  <img class=\"x-history-query__icon\" src=\"./my-awesome-clear-icon.svg\"/>\n</RemoveHistoryQuery>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserPressedRemoveHistoryQuery`: the event is emitted after the user clicks the button. The event\n  payload is the history query data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { HistoryQuery as HistoryQueryModel } from '@empathyco/x-types';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import Highlight from '../../../components/highlight.vue';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import RemoveHistoryQuery from './remove-history-query.vue';\n\n  /**\n   * This component renders a history query suggestion combining two buttons: one for selecting this\n   * suggestion as the search query, and another one to remove this query suggestion from the\n   * history queries.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(historyQueriesXModule)],\n    components: { Highlight, RemoveHistoryQuery, BaseSuggestion }\n  })\n  export default class HistoryQuery extends Mixins(\n    dynamicPropsMixin(['removeButtonClass', 'suggestionClass'])\n  ) {\n    /**\n     * The history query suggestion to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: HistoryQueryModel;\n\n    /**\n     * The normalized query of the history-queries module.\n     *\n     * @internal\n     */\n    @Getter('historyQueries', 'normalizedQuery')\n    public query!: string;\n\n    /**\n     * The list of events that are going to be emitted when the suggestion button is pressed.\n     *\n     * @internal\n     * @returns The {@link XEvent | XEvents} to emit.\n     */\n    protected get suggestionSelectedEvents(): Partial<XEventsTypes> {\n      return {\n        UserSelectedAHistoryQuery: this.suggestion\n      };\n    }\n  }\n","<template>\n  <div class=\"x-history-query x-suggestion-group\">\n    <!--\n      Click on the History Query suggestion\n      @event click\n      @property {Suggestion} suggestion - History Query suggestion data\n      @property {MouseEvent} event - The original mouse event\n    -->\n    <BaseSuggestion\n      @click=\"$emit('click', suggestion, $event)\"\n      class=\"x-history-query__suggestion\"\n      :class=\"suggestionClass\"\n      v-bind=\"{ suggestion, suggestionSelectedEvents, query }\"\n      data-test=\"history-query\"\n      feature=\"history_query\"\n      #default=\"baseScope\"\n    >\n      <!-- eslint-disable max-len -->\n      <!--\n          @slot History Query content\n              @binding {Object} v-bind - `BaseSuggestion` default slot scope: **suggestion** <code>Suggestion</code> - Suggestion data<br /> **query** <code>string</code> - The query that the suggestion belongs to<br /> **filter** <code>Filter or undefined</code> - Suggestion's filter\n      -->\n      <!-- eslint-enable max-len -->\n      <slot v-bind=\"{ ...baseScope }\" />\n    </BaseSuggestion>\n    <RemoveHistoryQuery\n      class=\"x-history-query__remove x-suggestion-group-button\"\n      :class=\"removeButtonClass\"\n      :historyQuery=\"suggestion\"\n      data-test=\"remove-history-query\"\n    >\n      <!--\n          @slot History Query remove button content\n              @binding {Suggestion} suggestion - History Query suggestion data\n      -->\n      <slot name=\"remove-button-content\" v-bind=\"{ suggestion }\">✕</slot>\n    </RemoveHistoryQuery>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { HistoryQuery as HistoryQueryModel } from '@empathyco/x-types';\n  import { Component, Mixins, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import Highlight from '../../../components/highlight.vue';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { historyQueriesXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import RemoveHistoryQuery from './remove-history-query.vue';\n\n  /**\n   * This component renders a history query suggestion combining two buttons: one for selecting this\n   * suggestion as the search query, and another one to remove this query suggestion from the\n   * history queries.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(historyQueriesXModule)],\n    components: { Highlight, RemoveHistoryQuery, BaseSuggestion }\n  })\n  export default class HistoryQuery extends Mixins(\n    dynamicPropsMixin(['removeButtonClass', 'suggestionClass'])\n  ) {\n    /**\n     * The history query suggestion to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: HistoryQueryModel;\n\n    /**\n     * The normalized query of the history-queries module.\n     *\n     * @internal\n     */\n    @Getter('historyQueries', 'normalizedQuery')\n    public query!: string;\n\n    /**\n     * The list of events that are going to be emitted when the suggestion button is pressed.\n     *\n     * @internal\n     * @returns The {@link XEvent | XEvents} to emit.\n     */\n    protected get suggestionSelectedEvents(): Partial<XEventsTypes> {\n      return {\n        UserSelectedAHistoryQuery: this.suggestion\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic usage\n\nThis component only requires a prop called `suggestion`\n\n```vue live\n<template>\n  <HistoryQuery :suggestion=\"suggestion\" />\n</template>\n\n<script>\n  import { HistoryQuery } from '@empathyco/x-components/history-queries';\n  export default {\n    name: 'HistoryQueryDemo',\n    components: {\n      HistoryQuery\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'HistoryQuery',\n          query: 'trousers',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing slots content\n\nSuggestion and remove buttons contents can be customized.\n\nThe default slot allows you to replace the content of the suggestion button. It has two properties,\nthe suggestion itself, and a `string` of HTML with the matched query.\n\nThe other slot is called `remove-button-content`, and allows you to set the content of the button\nthat serves to remove this query from the history. This slot only has one property, the suggestion.\n\n```vue live\n<template>\n  <HistoryQuery :suggestion=\"suggestion\">\n    <template #default=\"{ suggestion }\">\n      <HistoryIcon />\n      <Highlight highlight=\"tro\" :text=\"suggestion.query\" />\n    </template>\n\n    <template #remove-button-content=\"{ suggestion }\">\n      <CrossIcon />\n    </template>\n  </HistoryQuery>\n</template>\n\n<script>\n  import { HistoryQuery } from '@empathyco/x-components/history-queries';\n  import { HistoryIcon, CrossIcon, Highlight } from '@empathyco/x-components';\n\n  export default {\n    name: 'HistoryQueryDemo',\n    components: {\n      HistoryQuery,\n      HistoryIcon,\n      CrossIcon,\n      Highlight\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'HistoryQuery',\n          query: 'trousers',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the content with classes\n\nThe `suggestionClass` prop can be used to add classes to the history query suggestion.\n\n```vue live\n<template>\n  <HistoryQuery :suggestion=\"suggestion\" suggestionClass=\"x-custom-class\" />\n</template>\n\n<script>\n  import { HistoryQuery } from '@empathyco/x-components/history-queries';\n  export default {\n    name: 'HistoryQueryDemo',\n    components: {\n      HistoryQuery\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'HistoryQuery',\n          query: 'trousers',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\nThe `removeButtonClass` prop can be used to add classes to the remove history query.\n\n```vue live\n<template>\n  <HistoryQuery :suggestion=\"suggestion\" removeButtonClass=\"x-custom-class\" />\n</template>\n\n<script>\n  import { HistoryQuery } from '@empathyco/x-components/history-queries';\n  export default {\n    name: 'HistoryQueryDemo',\n    components: {\n      HistoryQuery\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'HistoryQuery',\n          query: 'trousers',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserSelectedAHistoryQuery`: the event is emitted after the user clicks the button. The event\n  payload is the history query data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { HistoryQuery as HistoryQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { historyQueriesXModule } from '../x-module';\n  import HistoryQuery from './history-query.vue';\n\n  /**\n   * This component renders a list of suggestions coming from the user queries history.\n   * Allows the user to select one of them, emitting the needed events. A history query is just\n   * another type of suggestion that contains a query that the user has made in the past.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { BaseSuggestions, HistoryQuery },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class HistoryQueries extends Vue {\n    /**\n     * The filtered list of history queries.\n     *\n     * @internal\n     */\n    @Getter('historyQueries', 'historyQueriesWithResults')\n    public historyQueries!: HistoryQueryModel[];\n  }\n","<template>\n  <BaseSuggestions\n    v-bind=\"$attrs\"\n    :suggestions=\"historyQueries\"\n    class=\"x-history-queries\"\n    data-test=\"history-queries\"\n  >\n    <template #default=\"baseScope\">\n      <!-- eslint-disable max-len -->\n      <!--\n        @slot History Query item\n            @binding {Object} v-bind - History Query suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - History Query suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - History Query suggestion index\n      -->\n      <!-- eslint-enable max-len -->\n      <slot name=\"suggestion\" v-bind=\"{ ...baseScope }\">\n        <HistoryQuery\n          :suggestion=\"baseScope.suggestion\"\n          data-test=\"history-query-item\"\n          class=\"x-history-queries__item\"\n          suggestionClass=\"x-suggestion\"\n        >\n          <template #default=\"historyQueryScope\">\n            <!-- eslint-disable max-len -->\n            <!--\n              @slot History Query content\n                  @binding {Object} v-bind - History Query suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - History Query suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - History Query suggestion index\n            -->\n            <!-- eslint-enable max-len -->\n            <slot name=\"suggestion-content\" v-bind=\"{ ...baseScope, ...historyQueryScope }\" />\n          </template>\n          <template #remove-button-content=\"removeHistoryQueryScope\">\n            <!-- eslint-disable max-len -->\n            <!--\n              @slot History Query remove button content\n                  @binding {Object} v-bind - History Query suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - History Query suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - History Query suggestion index\n            -->\n            <!-- eslint-enable max-len -->\n            <slot\n              name=\"suggestion-remove-content\"\n              v-bind=\"{ ...baseScope, ...removeHistoryQueryScope }\"\n            />\n          </template>\n        </HistoryQuery>\n      </slot>\n    </template>\n  </BaseSuggestions>\n</template>\n\n<script lang=\"ts\">\n  import { HistoryQuery as HistoryQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { historyQueriesXModule } from '../x-module';\n  import HistoryQuery from './history-query.vue';\n\n  /**\n   * This component renders a list of suggestions coming from the user queries history.\n   * Allows the user to select one of them, emitting the needed events. A history query is just\n   * another type of suggestion that contains a query that the user has made in the past.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { BaseSuggestions, HistoryQuery },\n    mixins: [xComponentMixin(historyQueriesXModule)]\n  })\n  export default class HistoryQueries extends Vue {\n    /**\n     * The filtered list of history queries.\n     *\n     * @internal\n     */\n    @Getter('historyQueries', 'historyQueriesWithResults')\n    public historyQueries!: HistoryQueryModel[];\n  }\n</script>\n\n<!--eslint-disable max-len -->\n<docs lang=\"mdx\">\n## Inherited props\n\nThis component inherits the [`BaseSuggestions`](../base-components/x-components.base-suggestions.md)\nprops.\n\n| Name               | Description                                                       | Type     | Default |\n| ------------------ | ----------------------------------------------------------------- | -------- | ------- |\n| `animation`        | Animation component that will be used to animate the suggestions. | `Vue`    | `\"ul\"`  |\n| `maxItemsToRender` | Number of popular searches to be rendered.                        | `number` |         |\n\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\nHere you have a basic example of how the HistoryQueries is rendered.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries />\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the history queries have been limited to render a maximum of 10 queries (by default\nit is 5).\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries :maxItemsToRender=\"10\" />\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries\n    }\n  };\n</script>\n```\n\n### Play with the animation\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries :animation=\"'FadeAndSlide'\" />\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries } from '@empathyco/x-components/history-queries';\n  import { FadeAndSlide } from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('FadeAndSlide', FadeAndSlide);\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries\n    }\n  };\n</script>\n```\n\n### Play with suggestion slot\n\nIn this example, the [`HistoryQuery`](./x-components.history-query.md) component is passed in the\n`suggestion` slot (although any other component could potentially be passed).\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries #suggestion=\"{ suggestion }\">\n      <HistoryQuery :suggestion=\"suggestion\" />\n    </HistoryQueries>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries, HistoryQuery } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries,\n      HistoryQuery\n    }\n  };\n</script>\n```\n\n### Play with suggestion-content slot\n\nTo continue the previous example, the [`HistoryQuery`](./x-components.history-query.md) component is\npassed in the `suggestion-content` slot, but in addition, an HTML span tag for the text are also\npassed.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries #suggestion-content=\"{ suggestion }\">\n      <span>{{ suggestion.query }}</span>\n    </HistoryQueries>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries\n    }\n  };\n</script>\n```\n\n### Play with suggestion-content-remove slot\n\nTo continue the previous example, the [`HistoryQuery`](./x-components.history-query.md) component is\npassed in the `suggestion-content` slot, but in addition, a cross icon is also passed to change the\nicon to remove the history query.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <HistoryQueries #suggestion-remove-content=\"{ suggestion }\">\n      <CrossIcon />\n    </HistoryQueries>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { HistoryQueries } from '@empathyco/x-components/history-queries';\n  import { CrossIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'HistoryQueriesDemo',\n    components: {\n      SearchInput,\n      HistoryQueries,\n      CrossIcon\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { HistoryQuery } from '@empathyco/x-types';\n  import BaseSwitch from '../../../components/base-switch.vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { historyQueriesXModule } from '../x-module';\n  import { isArrayEmpty } from '../../../utils/array';\n\n  /**\n   * History Queries Switch is a component to enable or disable the history queries.\n   * This component emits events depending on the `isEnabled` value.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(historyQueriesXModule)],\n    components: { BaseSwitch }\n  })\n  export default class HistoryQueriesSwitch extends Vue {\n    /**\n     * A boolean with the isEnabled value coming from the store state.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'isEnabled')\n    public isEnabled!: boolean;\n\n    /**\n     * The history queries from the state.\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * Checks if there are history queries.\n     *\n     * @returns True if there are history queries; false otherwise.\n     */\n    protected get hasHistoryQueries(): boolean {\n      return !isArrayEmpty(this.historyQueries);\n    }\n\n    /**\n     * Emits an event based on the switch state.\n     *\n     * @internal\n     */\n    protected toggle(): void {\n      this.$x.emit(\n        this.isEnabled\n          ? this.hasHistoryQueries\n            ? 'UserClickedDisableHistoryQueries'\n            : 'UserClickedConfirmDisableHistoryQueries'\n          : 'UserClickedEnableHistoryQueries'\n      );\n    }\n  }\n","<template>\n  <BaseSwitch @change=\"toggle\" :value=\"isEnabled\" aria-label=\"Queries' history\" />\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { HistoryQuery } from '@empathyco/x-types';\n  import BaseSwitch from '../../../components/base-switch.vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { historyQueriesXModule } from '../x-module';\n  import { isArrayEmpty } from '../../../utils/array';\n\n  /**\n   * History Queries Switch is a component to enable or disable the history queries.\n   * This component emits events depending on the `isEnabled` value.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(historyQueriesXModule)],\n    components: { BaseSwitch }\n  })\n  export default class HistoryQueriesSwitch extends Vue {\n    /**\n     * A boolean with the isEnabled value coming from the store state.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'isEnabled')\n    public isEnabled!: boolean;\n\n    /**\n     * The history queries from the state.\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * Checks if there are history queries.\n     *\n     * @returns True if there are history queries; false otherwise.\n     */\n    protected get hasHistoryQueries(): boolean {\n      return !isArrayEmpty(this.historyQueries);\n    }\n\n    /**\n     * Emits an event based on the switch state.\n     *\n     * @internal\n     */\n    protected toggle(): void {\n      this.$x.emit(\n        this.isEnabled\n          ? this.hasHistoryQueries\n            ? 'UserClickedDisableHistoryQueries'\n            : 'UserClickedConfirmDisableHistoryQueries'\n          : 'UserClickedEnableHistoryQueries'\n      );\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- [`UserClickedEnableHistoryQueries`]\n  (x-components.historyqueriesxevents.userclickedenablehistoryqueries.md): the event is emitted\n  whenever the user clicks the switch and the history queries are disabled.\n- [`UserClickedDisableHistoryQueries`]\n  (x-components.historyqueriesxevents.userclickeddisablehistoryqueries.md): the event is emitted\n  whenever the user clicks the switch when the history queries are enabled and the list of history\n  queries is not empty.\n- [`UserClickedConfirmDisableHistoryQueries`]\n  (x-components.historyqueriesxevents.userclickedconfirmdisablehistoryqueries.md): the event is\n  emitted whenever the user clicks the switch when the history queries are enabled and the list of\n  history queries is empty.\n\n## See it in action\n\nHere you have a basic example of how the switch is rendered.\n\n_Try clicking it to see how it changes its state_\n\n```vue live\n<template>\n  <HistoryQueriesSwitch />\n</template>\n\n<script>\n  import { HistoryQueriesSwitch } from '@empathyco/x-components';\n\n  export default {\n    name: 'HistoryQueriesSwitchDemo',\n    components: {\n      HistoryQueriesSwitch\n    }\n  };\n</script>\n```\n\nHere you have a more complex example.\n\n```vue live\n<template>\n  <div>\n    <div>\n      <SearchInput :instant=\"false\" />\n      <SearchButton>Search</SearchButton>\n    </div>\n    <label>\n      History queries:\n      <HistoryQueriesSwitch />\n      <HistoryQueries />\n      <BaseEventsModal :eventsToOpenModal=\"eventsToOpenModal\">\n        <BaseEventButton :events=\"disableEvents\">Disable</BaseEventButton>\n        <BaseEventButton :events=\"cancelEvents\">Cancel</BaseEventButton>\n      </BaseEventsModal>\n    </label>\n  </div>\n</template>\n\n<script>\n  import { BaseEventButton, BaseEventsModal } from '@empathyco/x-components';\n  import { HistoryQueriesSwitch, HistoryQueries } from '@empathyco/x-components/history-queries';\n  import { SearchInput, SearchButton } from '@empathyco/x-components/search';\n  export default {\n    name: 'HistoryQueriesSwitchDemo',\n    components: {\n      BaseEventButton,\n      BaseEventsModal,\n      HistoryQueriesSwitch,\n      HistoryQueries,\n      SearchInput,\n      SearchButton\n    },\n    data() {\n      return {\n        eventsToOpenModal: ['UserClickedDisableHistoryQueries'],\n        disableEvents: {\n          UserClickedConfirmDisableHistoryQueries: undefined,\n          UserClickedCloseEventsModal: undefined\n        },\n        cancelEvents: {\n          UserClickedCloseEventsModal: undefined\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { HistoryQuery } from '@empathyco/x-types';\n  import { Dictionary } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Inject, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { State } from '../../../components/decorators/store.decorators';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { groupItemsBy, isArrayEmpty } from '../../../utils/array';\n  import { SnippetConfig } from '../../../x-installer/api/api.types';\n  import { historyQueriesXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import HistoryQueryComponent from './history-query.vue';\n\n  /**\n   * The component renders the full history of user searched queries grouped by the day\n   * they were performed.\n   *\n   * @remarks\n   *\n   * Allows the user to select one of them, emitting the needed events.\n   * A history query is just another type of suggestion that contains a query that the user has\n   * made in the past.\n   * @public\n   */\n  @Component({\n    components: { HistoryQuery: HistoryQueryComponent, BaseSuggestions },\n    mixins: [xComponentMixin(historyQueriesXModule), dynamicPropsMixin(['queriesListClass'])]\n  })\n  export default class MyHistory extends Vue {\n    /**\n     * Animation component that will be used to animate the suggestions.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The current locale.\n     *\n     * @public\n     */\n    @Prop({ default: 'en' })\n    protected locale!: string;\n\n    /**\n     * The list of history queries.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * The provided {@link SnippetConfig}.\n     *\n     * @internal\n     */\n    @Inject('snippetConfig')\n    public snippetConfig?: SnippetConfig;\n\n    /**\n     * Returns a record of history queries grouped by date.\n     *\n     * @example\n     * ```typescript\n     *  const historyQueriesGrouped = {\n     *    'Monday, January 10th, 2022' : [{\n     *      query: 'lego',\n     *      modelName: 'HistoryQuery',\n     *      timestamp: 121312312\n     *    }],\n     *    'Tuesday, January 11th, 2022' : [{\n     *      query: 'barbie',\n     *      modelName: 'HistoryQuery',\n     *      timestamp: 15221212\n     *    }]\n     *  }\n     * ```\n     * @returns The history queries grouped by date.\n     * @internal\n     */\n    protected get groupByDate(): Dictionary<HistoryQuery[]> {\n      return groupItemsBy(this.historyQueries, current => {\n        return new Date(current.timestamp).toLocaleDateString(this.usedLocale, {\n          day: 'numeric',\n          weekday: 'long',\n          month: 'long',\n          year: 'numeric'\n        });\n      });\n    }\n\n    /**\n     * Formats a timestamp into `hh:mm [PM/AM]` format.\n     *\n     * @example\n     * ```typescript\n     * // locale 'es'\n     * console.log(formatTime(Date.now()) // '16:54'.\n     *\n     * // locale 'en'\n     * console.log(formatTime(Date.now()) // '16:54 PM'.\n     * ```\n     * @param timestamp - The timestamp to format.\n     * @returns The formatted time.\n     * @internal\n     */\n    protected formatTime(timestamp: number): string {\n      return new Date(timestamp).toLocaleTimeString(this.usedLocale, {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    /**\n     * The `hasHistoryQueries` computed property is a flag representing if there are history queries\n     * stored.\n     *\n     * @returns True if there are history queries; false otherwise.\n     * @internal\n     */\n    protected get hasHistoryQueries(): boolean {\n      return !isArrayEmpty(this.historyQueries);\n    }\n    /**\n     * The locale that it is going to be used. It can be the one send it by the snippet config or\n     * the one pass it using the prop.\n     *\n     * @returns The locale to be used.\n     * @internal\n     */\n    protected get usedLocale(): string {\n      return this.snippetConfig?.lang ?? this.locale;\n    }\n  }\n","<template>\n  <component :is=\"animation\" v-if=\"hasHistoryQueries\" class=\"x-my-history\" tag=\"ul\">\n    <li\n      v-for=\"(historyQueries, date) in groupByDate\"\n      :key=\"date\"\n      class=\"x-my-history-item\"\n      data-test=\"my-history-item\"\n    >\n      <slot name=\"date\" :date=\"date\">\n        <span class=\"x-my-history-item__date\" data-test=\"my-history-date\">{{ date }}</span>\n      </slot>\n      <BaseSuggestions\n        :suggestions=\"historyQueries\"\n        class=\"x-my-history-queries\"\n        :class=\"queriesListClass\"\n        data-test=\"my-history-queries\"\n        :animation=\"animation\"\n      >\n        <template #default=\"{ suggestion, index }\">\n          <!--\n        @slot History Query item\n            @binding {Suggestion} suggestion - History Query suggestion data\n            @binding {number} index - History Query suggestion index\n            @binding {() => string} formatTime - Callback to format time to `hh:mm [PM/AM]`\n      -->\n          <slot name=\"suggestion\" v-bind=\"{ suggestion, index, formatTime }\">\n            <HistoryQuery\n              :suggestion=\"suggestion\"\n              data-test=\"history-query-item\"\n              class=\"x-history-queries__item x-suggestion\"\n            >\n              <template #default>\n                <!--\n              @slot History Query content\n                  @binding {Suggestion} suggestion - History Query suggestion data\n                  @binding {number} index - History Query suggestion index\n                  @binding {() => string} formatTime - Callback to format time to `hh:mm [PM/AM]`\n            -->\n                <slot name=\"suggestion-content\" v-bind=\"{ suggestion, index, formatTime }\">\n                  {{ suggestion.query }} - {{ formatTime(suggestion.timestamp) }}\n                </slot>\n              </template>\n              <template #remove-button-content>\n                <!--\n              @slot History Query remove button content\n                  @binding {Suggestion} suggestion - History Query suggestion data\n                  @binding {number} index - History Query suggestion index\n            -->\n                <slot name=\"suggestion-remove-content\" v-bind=\"{ suggestion, index }\" />\n              </template>\n            </HistoryQuery>\n          </slot>\n        </template>\n      </BaseSuggestions>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { HistoryQuery } from '@empathyco/x-types';\n  import { Dictionary } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Inject, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { State } from '../../../components/decorators/store.decorators';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { groupItemsBy, isArrayEmpty } from '../../../utils/array';\n  import { SnippetConfig } from '../../../x-installer/api/api.types';\n  import { historyQueriesXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import HistoryQueryComponent from './history-query.vue';\n\n  /**\n   * The component renders the full history of user searched queries grouped by the day\n   * they were performed.\n   *\n   * @remarks\n   *\n   * Allows the user to select one of them, emitting the needed events.\n   * A history query is just another type of suggestion that contains a query that the user has\n   * made in the past.\n   * @public\n   */\n  @Component({\n    components: { HistoryQuery: HistoryQueryComponent, BaseSuggestions },\n    mixins: [xComponentMixin(historyQueriesXModule), dynamicPropsMixin(['queriesListClass'])]\n  })\n  export default class MyHistory extends Vue {\n    /**\n     * Animation component that will be used to animate the suggestions.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The current locale.\n     *\n     * @public\n     */\n    @Prop({ default: 'en' })\n    protected locale!: string;\n\n    /**\n     * The list of history queries.\n     *\n     * @internal\n     */\n    @State('historyQueries', 'historyQueries')\n    public historyQueries!: HistoryQuery[];\n\n    /**\n     * The provided {@link SnippetConfig}.\n     *\n     * @internal\n     */\n    @Inject('snippetConfig')\n    public snippetConfig?: SnippetConfig;\n\n    /**\n     * Returns a record of history queries grouped by date.\n     *\n     * @example\n     * ```typescript\n     *  const historyQueriesGrouped = {\n     *    'Monday, January 10th, 2022' : [{\n     *      query: 'lego',\n     *      modelName: 'HistoryQuery',\n     *      timestamp: 121312312\n     *    }],\n     *    'Tuesday, January 11th, 2022' : [{\n     *      query: 'barbie',\n     *      modelName: 'HistoryQuery',\n     *      timestamp: 15221212\n     *    }]\n     *  }\n     * ```\n     * @returns The history queries grouped by date.\n     * @internal\n     */\n    protected get groupByDate(): Dictionary<HistoryQuery[]> {\n      return groupItemsBy(this.historyQueries, current => {\n        return new Date(current.timestamp).toLocaleDateString(this.usedLocale, {\n          day: 'numeric',\n          weekday: 'long',\n          month: 'long',\n          year: 'numeric'\n        });\n      });\n    }\n\n    /**\n     * Formats a timestamp into `hh:mm [PM/AM]` format.\n     *\n     * @example\n     * ```typescript\n     * // locale 'es'\n     * console.log(formatTime(Date.now()) // '16:54'.\n     *\n     * // locale 'en'\n     * console.log(formatTime(Date.now()) // '16:54 PM'.\n     * ```\n     * @param timestamp - The timestamp to format.\n     * @returns The formatted time.\n     * @internal\n     */\n    protected formatTime(timestamp: number): string {\n      return new Date(timestamp).toLocaleTimeString(this.usedLocale, {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n    /**\n     * The `hasHistoryQueries` computed property is a flag representing if there are history queries\n     * stored.\n     *\n     * @returns True if there are history queries; false otherwise.\n     * @internal\n     */\n    protected get hasHistoryQueries(): boolean {\n      return !isArrayEmpty(this.historyQueries);\n    }\n    /**\n     * The locale that it is going to be used. It can be the one send it by the snippet config or\n     * the one pass it using the prop.\n     *\n     * @returns The locale to be used.\n     * @internal\n     */\n    protected get usedLocale(): string {\n      return this.snippetConfig?.lang ?? this.locale;\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-my-history {\n    display: flex;\n    flex-flow: column nowrap;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\nHere you have a basic example of how the MyHistory is rendered.\n\n```vue\n<template>\n  <MyHistory />\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the my history has been configured to use the 'es' locale.\n\n```vue\n<template>\n  <MyHistory :locale=\"es\" />\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    }\n  };\n</script>\n```\n\n### Play with the animation\n\n```vue\n<template>\n  <MyHistory :animation=\"fadeAndSlide\" />\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n  import { FadeAndSlide } from '@empathyco/x-components';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    },\n    data() {\n      return {\n        fadeAndSlide: FadeAndSlide\n      };\n    }\n  };\n</script>\n```\n\n### Play with suggestion slot\n\nIn this example, the [`HistoryQuery`](./x-components.history-query.md) component is passed in the\n`suggestion` slot (although any other component could potentially be passed).\n\n```vue\n<template>\n  <MyHistory #suggestion=\"{ suggestion }\">\n    <HistoryQuery :suggestion=\"suggestion\"></HistoryQuery>\n  </MyHistory>\n</template>\n\n<script>\n  import { MyHistory, HistoryQuery } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory,\n      HistoryQuery\n    }\n  };\n</script>\n```\n\n### Play with suggestion-content slot\n\nTo continue the previous example, the [`HistoryQuery`](./x-components.history-query.md) component is\npassed in the `suggestion-content` slot, but in addition, an HTML span tag for the text are also\npassed.\n\n```vue\n<template>\n  <MyHistory #suggestion-content=\"{ suggestion }\">\n    <span>{{ suggestion.query }}</span>\n  </MyHistory>\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    }\n  };\n</script>\n```\n\n### Play with suggestion-content slot\n\nIn this example, an HTML span tag for the date are passed.\n\n```vue\n<template>\n  <MyHistory #date=\"{ date }\">\n    <span>{{ date }}</span>\n  </MyHistory>\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    }\n  };\n</script>\n```\n\n### Play with suggestion-content-remove slot\n\nTo continue the previous example, the [`HistoryQuery`](./x-components.history-query.md) component is\npassed in the `suggestion-content` slot, but in addition, a cross icon is also passed to change the\nicon to remove the history query.\n\n```vue\n<template>\n  <MyHistory #suggestion-content-remove=\"{ suggestion }\">\n    <CrossIcon />\n  </MyHistory>\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n  import { CrossIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory,\n      CrossIcon\n    }\n  };\n</script>\n```\n\n### Customizing the items with classes\n\nThe `queriesListClass` prop can be used to add classes to the suggestions list.\n\n```vue live\n<template>\n  <MyHistory #date=\"{ date }\" queriesListClass=\"x-gap-16\" />\n</template>\n\n<script>\n  import { MyHistory } from '@empathyco/x-components/history-queries';\n\n  export default {\n    name: 'MyHistoryDemo',\n    components: {\n      MyHistory\n    }\n  };\n</script>\n```\n</docs>\n","import { use$x } from '@empathyco/x-components';\nimport { computed, ComputedRef } from 'vue';\n\ntype PredictiveHelpers = {\n  navigationHijacker: { xEvent: string; moduleName: string; direction: string }[];\n  showIdentifierResults: ComputedRef<boolean>;\n  showHistoryQueries: ComputedRef<boolean>;\n  showQuerySuggestions: ComputedRef<boolean>;\n  showNextQueries: ComputedRef<boolean>;\n  showPopularSearches: ComputedRef<boolean>;\n  showEmpathize: ComputedRef<boolean>;\n};\n\n/**\n * Shared code between the predictive layers.\n *\n * @returns The predictive utils.\n */\nexport const usePredictiveHelpers = (): PredictiveHelpers => {\n  const navigationHijacker = [\n    { xEvent: 'UserPressedArrowKey', moduleName: 'scroll', direction: 'ArrowDown' },\n    { xEvent: 'UserPressedArrowKey', moduleName: 'searchBox', direction: 'ArrowDown' }\n  ];\n\n  const $x = use$x();\n\n  const showIdentifierResults = computed(() => {\n    return $x.identifierResults.length > 0;\n  });\n\n  const showHistoryQueries = computed(() => {\n    return $x.historyQueriesWithResults.length > 0;\n  });\n\n  const showQuerySuggestions = computed(() => {\n    return (\n      !!$x.query.searchBox && $x.identifierResults.length === 0 && $x.querySuggestions.length > 0\n    );\n  });\n\n  const showNextQueries = computed(() => {\n    return $x.nextQueries.length > 0 && $x.identifierResults.length === 0;\n  });\n\n  const showPopularSearches = computed(() => {\n    return $x.popularSearches.length > 0 && !$x.query.searchBox;\n  });\n\n  const showEmpathize = computed(() => {\n    return (\n      showHistoryQueries.value ||\n      showQuerySuggestions.value ||\n      showNextQueries.value ||\n      showPopularSearches.value\n    );\n  });\n\n  return {\n    navigationHijacker,\n    showIdentifierResults,\n    showHistoryQueries,\n    showQuerySuggestions,\n    showNextQueries,\n    showPopularSearches,\n    showEmpathize\n  };\n};\n","<template>\n  <div v-if=\"$x.recommendations.length > 0\" class=\"x-flex x-flex-col x-gap-12\">\n    <h1\n      class=\"x-title4 x-title4-sm x-flex x-h-32 x-items-center x-pt-16 x-pl-24 x-uppercase desktop:x-pl-0 desktop:x-pt-0\"\n    >\n      {{ $t('recommendations.title') }}\n    </h1>\n    <SlidingPanel\n      class=\"x-sliding-panel-show-buttons-on-hover\"\n      :showButtons=\"true\"\n      buttonClass=\"x-button-lead x-button-circle x-button-ghost x-p-0\"\n      scrollContainerClass=\"desktop:x-sliding-panel-fade\"\n      :resetOnContentChange=\"false\"\n    >\n      <template #sliding-panel-left-button>\n        <ChevronLeftIcon class=\"x-icon-lg\" />\n      </template>\n\n      <Recommendations class=\"x-flex x-flex-row x-gap-12 x-pl-16 desktop:x-pl-0\">\n        <template #default=\"{ recommendation }\">\n          <DisplayClickProvider resultFeature=\"recommendations\">\n            <Result\n              :result=\"recommendation\"\n              data-test=\"recommendation-item\"\n              :showDescription=\"false\"\n              :showAddToCart=\"false\"\n              class=\"x-w-[200px]\"\n            />\n          </DisplayClickProvider>\n        </template>\n      </Recommendations>\n\n      <template #sliding-panel-right-button>\n        <ChevronRightIcon class=\"x-icon-lg\" />\n      </template>\n    </SlidingPanel>\n  </div>\n</template>\n<script lang=\"ts\">\n  import { SlidingPanel, ChevronLeftIcon, ChevronRightIcon } from '@empathyco/x-components';\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { defineComponent } from 'vue';\n  import Result from '../results/result.vue';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      DisplayClickProvider,\n      Recommendations,\n      Result,\n      SlidingPanel\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { SlidingPanel, ChevronLeftIcon, ChevronRightIcon } from '@empathyco/x-components';\n  import { Recommendations } from '@empathyco/x-components/recommendations';\n  import { defineComponent } from 'vue';\n  import Result from '../results/result.vue';\n  import DisplayClickProvider from '../search/display-click-provider.vue';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      DisplayClickProvider,\n      Recommendations,\n      Result,\n      SlidingPanel\n    }\n  });\n","import { Result, IdentifierResultsRequest } from '@empathyco/x-types';\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { IdentifierResultsActionsContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  IdentifierResultsActionsContext,\n  IdentifierResultsRequest | null,\n  Result[]\n>({\n  fetch({ dispatch, state: { origin } }, request) {\n    if (request && origin) {\n      request.origin = origin;\n    }\n\n    return dispatch('fetchIdentifierResults', request);\n  },\n  onSuccess({ commit }, identifierResults) {\n    commit('setIdentifierResults', identifierResults);\n  }\n});\n\n/**\n * Default implementation for {@link IdentifierResultsActions.fetchAndSaveIdentifierResults} action.\n *\n * @public\n */\nexport const fetchAndSaveIdentifierResults = fetchAndSave;\n\n/**\n * Default implementation for {@link IdentifierResultsActions.cancelFetchAndSaveIdentifierResults}\n * action.\n *\n * @public\n */\nexport const cancelFetchAndSaveIdentifierResults = cancelPrevious;\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveIdentifierResults,\n  fetchAndSaveIdentifierResults\n} from './actions/fetch-and-save-identifier-results.action';\nimport { fetchIdentifierResults } from './actions/fetch-identifier-results.action';\nimport { saveOrigin } from './actions/save-origin.action';\nimport { saveQuery } from './actions/save-query.action';\nimport { identifierDetectionRegexp } from './getters/identifier-detection-regexp.getter';\nimport { identifierHighlightRegexp } from './getters/identifier-highlight-regexp.getter';\nimport { identifierResultsRequest } from './getters/identifier-results-request.getter';\nimport { IdentifierResultsXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the identifier results module.\n *\n * @internal\n */\nexport const identifierResultsXStoreModule: IdentifierResultsXStoreModule = {\n  state: () => ({\n    config: {\n      debounceInMs: 600,\n      maxItemsToRequest: 10,\n      identifierDetectionRegexp: '^[0-9]{2,}$',\n      separatorChars: '-/ '\n    },\n    identifierResults: [],\n    origin: null,\n    query: '',\n    params: {},\n    status: 'initial'\n  }),\n  getters: {\n    identifierResultsRequest,\n    identifierHighlightRegexp,\n    identifierDetectionRegexp\n  },\n  mutations: {\n    setIdentifierResults(state, identifierResults) {\n      state.identifierResults = identifierResults;\n    },\n    setOrigin(state, origin = null) {\n      state.origin = origin;\n    },\n    setParams(state, params) {\n      state.params = params;\n    },\n    setQuery,\n    setStatus\n  },\n  actions: {\n    cancelFetchAndSaveIdentifierResults,\n    fetchIdentifierResults,\n    fetchAndSaveIdentifierResults,\n    saveOrigin,\n    saveQuery\n  }\n};\n","import { IdentifierResultsXStoreModule } from '../types';\n/**\n * Default implementation for the {@link IdentifierResultsGetters.identifierResultsRequest} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the identifier\n * results module.\n * @returns The identifier results request to fetch data from the API.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const identifierResultsRequest: IdentifierResultsXStoreModule['getters']['identifierResultsRequest'] =\n  ({ config, query, params }) => {\n    return query.trim()\n      ? {\n          query,\n          rows: config.maxItemsToRequest,\n          start: 0,\n          extraParams: params\n        }\n      : null;\n  };\n","import { IdentifierResultsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link IdentifierResultsGetters.identifierHighlightRegexp} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the identifier\n * results module.\n * @returns The RegExp to match optional characters.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const identifierHighlightRegexp: IdentifierResultsXStoreModule['getters']['identifierHighlightRegexp'] =\n  ({ query, config }) => {\n    /* Escape each character to avoid creating a regex like [/- ] where the hyphen acts as delimiter\n     * and the regex fails when created*/\n    const separatorChars = config.separatorChars\n      .split('')\n      .map(char => `\\\\${char}`)\n      .join('');\n    const queryWithoutSeparators = query.replace(new RegExp(`[${separatorChars}]`, 'g'), '');\n    const highlightQueryRegexValue = queryWithoutSeparators.split('').join(`[${separatorChars}]*`);\n    return new RegExp(`(${highlightQueryRegexValue})`, 'i');\n  };\n","import { IdentifierResultsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link IdentifierResultsGetters.identifierDetectionRegexp} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the identifier\n * results module.\n * @returns The RegExp to detect and identifier.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const identifierDetectionRegexp: IdentifierResultsXStoreModule['getters']['identifierDetectionRegexp'] =\n  ({ config }) => {\n    return new RegExp(config.identifierDetectionRegexp);\n  };\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { IdentifierResultsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link IdentifierResultsActions.fetchIdentifierResults}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The identifier results request to make.\n * @returns A Promise of Result[] that resolves when it fetches identifier results or empty array\n * if the request was not made.\n *\n * @public\n */\n//eslint-disable-next-line max-len\nexport const fetchIdentifierResults: IdentifierResultsXStoreModule['actions']['fetchIdentifierResults'] =\n  (_context, request) => {\n    return request ? XPlugin.adapter.identifierResults(request).then(({ results }) => results) : [];\n  };\n","import { QueryOrigin } from '../../../../types/origin';\nimport { createOrigin } from '../../../../utils/origin';\nimport { IdentifierResultsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link IdentifierResultsActions.saveOrigin}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param queryOriginInit - The object to create the {@link QueryOrigin} with.\n *\n * @public\n */\nexport const saveOrigin: IdentifierResultsXStoreModule['actions']['saveOrigin'] = (\n  { commit },\n  queryOriginInit\n) => {\n  commit('setOrigin', createOrigin(queryOriginInit) as QueryOrigin | null);\n};\n","import { IdentifierResultsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link IdentifierResultsActions.saveQuery}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param query - The query to try to add to the store.\n *\n * @public\n */\nexport const saveQuery: IdentifierResultsXStoreModule['actions']['saveQuery'] = (\n  { commit, getters },\n  query: string\n) => {\n  if (getters.identifierDetectionRegexp.test(query)) {\n    commit('setQuery', query);\n  } else {\n    commit('setQuery', '');\n    commit('setIdentifierResults', []);\n  }\n};\n","import { createStoreEmitters } from '../../../store';\nimport { createEmitterArrayFilter } from '../../../utils/array';\nimport { identifierResultsXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the identifier-results module.\n *\n * @internal\n */\nexport const identifierResultsEmitters = createStoreEmitters(identifierResultsXStoreModule, {\n  IdentifierResultsChanged: {\n    selector: state => state.identifierResults,\n    filter: createEmitterArrayFilter('id')\n  },\n  IdentifierResultsRequestUpdated: (_, getters) => getters.identifierResultsRequest\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch,\n  namespacedWireDispatchWithoutPayload\n} from '../../wiring/namespaced-wires.factory';\nimport { namespacedDebounce } from '../../wiring/namespaced-wires.operators';\nimport { NamespacedWireCommit, NamespacedWireDispatch } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `identifierResults` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'identifierResults';\n/**\n * WireCommit for {@link IdentifierResultsXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n/**\n * WireDispatch for {@link IdentifierResultsXModule}.\n *\n * @internal\n */\nconst wireDispatch: NamespacedWireDispatch<typeof moduleName> = namespacedWireDispatch(moduleName);\n/**\n * WireDispatchWithoutPayload for {@link IdentifierResultsXModule}.\n *\n * @internal\n */\nconst wireDispatchWithoutPayload = namespacedWireDispatchWithoutPayload(moduleName);\n\n/**\n * Sets the identifier-results module query.\n *\n * @public\n */\nexport const setIdentifierResultsQuery = wireDispatch('saveQuery');\n\n/**\n * Clears the identifier-results module query.\n *\n * @public\n */\nexport const clearIdentifierResultsQuery = wireCommit('setQuery', '');\n\n/**\n * Sets the identifier results state `query` from url.\n *\n * @public\n */\nconst setUrlParams = wireDispatch('saveQuery', ({ eventPayload: { query } }) => query);\n\n/**\n * Requests and stores a new set of identifier results for the {@link IdentifierResultsState.query}.\n *\n * @public\n */\nexport const fetchAndSaveIdentifierResultsWire = wireDispatch('fetchAndSaveIdentifierResults');\n\n/**\n * Cancels the {@link IdentifierResultsActions.fetchAndSaveIdentifierResults} request promise.\n *\n * @public\n */\nexport const cancelFetchAndSaveIdentifierResultsWire = wireDispatchWithoutPayload(\n  'cancelFetchAndSaveIdentifierResults'\n);\n\n/**\n * Sets the identifier results state `origin`.\n *\n * @public\n */\nexport const saveIdentifierResultsOriginWire = wireDispatch(\n  'saveOrigin',\n  ({ metadata }) => metadata\n);\n\n/**\n * Sets the identifier result state `params`.\n *\n * @public\n */\nexport const setIdentifierResultsExtraParams = wireCommit('setParams');\n\n/**\n * Debounce function for the module.\n */\nconst moduleDebounce = namespacedDebounce(moduleName);\n\n/**\n * Default wiring for the {@link IdentifierResultsXModule} module.\n *\n * @internal\n */\nexport const identifierResultsWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams,\n    saveIdentifierResultsOriginWire\n  },\n  UserIsTypingAQuery: {\n    setIdentifierResultsQueryDebounce: moduleDebounce(\n      setIdentifierResultsQuery,\n      ({ state }) => state.config.debounceInMs,\n      { cancelOn: 'UserAcceptedAQuery' }\n    )\n  },\n  UserAcceptedAQuery: {\n    setIdentifierResultsQuery,\n    saveIdentifierResultsOriginWire\n  },\n  UserClearedQuery: {\n    clearIdentifierResultsQuery,\n    cancelFetchAndSaveIdentifierResultsWire\n  },\n  IdentifierResultsRequestUpdated: {\n    fetchAndSaveIdentifierResultsWire\n  },\n  ExtraParamsChanged: {\n    setIdentifierResultsExtraParams\n  },\n  UserClickedCloseX: {\n    clearIdentifierResultsQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearIdentifierResultsQuery\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { identifierResultsEmitters } from './store/emitters';\nimport { identifierResultsXStoreModule } from './store/module';\nimport { IdentifierResultsXStoreModule } from './store/types';\nimport { identifierResultsWiring } from './wiring';\n\n/**\n * IdentifierResults {@link XModule} alias.\n *\n * @public\n */\nexport type IdentifierResultsXModule = XModule<IdentifierResultsXStoreModule>;\n\n/**\n * IdentifierResults {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `identifier-results` entry point.\n *\n * @public\n */\nexport const identifierResultsXModule: IdentifierResultsXModule = {\n  name: 'identifierResults',\n  storeModule: identifierResultsXStoreModule,\n  storeEmitters: identifierResultsEmitters,\n  wiring: identifierResultsWiring\n};\n","\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter, State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { identifierResultsXModule } from '../x-module';\n\n  /**\n   * This component renders an identifier result value and highlights its matching part with the\n   * query from the state. Receives as prop the {@link @empathyco/x-types#Result | result data}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(identifierResultsXModule)]\n  })\n  export default class IdentifierResult extends Vue {\n    /**\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected result!: Result;\n\n    /**\n     * Query from the module state.\n     *\n     * @public\n     */\n    @State('identifierResults', 'query')\n    public query!: string;\n\n    /**\n     * The RegExp with the current query from the state adding the separatorChars after each\n     * matching character.\n     *\n     * @public\n     */\n    @Getter('identifierResults', 'identifierHighlightRegexp')\n    public identifierHighlightRegexp!: RegExp;\n\n    /**\n     * Highlights the matching part of the identifier result with the query from the state.\n     *\n     * @returns String - The identifier result s query with the matching part inside a `<span>` tag.\n     * @public\n     */\n    protected get highlightedQueryHTML(): string {\n      const identifierValue = this.result.identifier?.value ?? '';\n      if (identifierValue && this.identifierHighlightRegexp) {\n        return identifierValue.replace(\n          this.identifierHighlightRegexp,\n          '<span class=\"x-identifier-result__matching-part\">$1</span>'\n        );\n      }\n      return identifierValue;\n    }\n  }\n","<template>\n  <span\n    v-if=\"query\"\n    v-html=\"highlightedQueryHTML\"\n    class=\"x-identifier-result\"\n    data-test=\"identifier-result\"\n  ></span>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter, State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { identifierResultsXModule } from '../x-module';\n\n  /**\n   * This component renders an identifier result value and highlights its matching part with the\n   * query from the state. Receives as prop the {@link @empathyco/x-types#Result | result data}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(identifierResultsXModule)]\n  })\n  export default class IdentifierResult extends Vue {\n    /**\n     * (Required) The {@link @empathyco/x-types#Result | result} information.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected result!: Result;\n\n    /**\n     * Query from the module state.\n     *\n     * @public\n     */\n    @State('identifierResults', 'query')\n    public query!: string;\n\n    /**\n     * The RegExp with the current query from the state adding the separatorChars after each\n     * matching character.\n     *\n     * @public\n     */\n    @Getter('identifierResults', 'identifierHighlightRegexp')\n    public identifierHighlightRegexp!: RegExp;\n\n    /**\n     * Highlights the matching part of the identifier result with the query from the state.\n     *\n     * @returns String - The identifier result s query with the matching part inside a `<span>` tag.\n     * @public\n     */\n    protected get highlightedQueryHTML(): string {\n      const identifierValue = this.result.identifier?.value ?? '';\n      if (identifierValue && this.identifierHighlightRegexp) {\n        return identifierValue.replace(\n          this.identifierHighlightRegexp,\n          '<span class=\"x-identifier-result__matching-part\">$1</span>'\n        );\n      }\n      return identifierValue;\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component renders an identifier result value and highlights its matching part with the query\nfrom the state. Receives as prop the result data\n\n### Basic usage:\n\n```vue\n<IdentifierResult v-bind=\"{ result }\" />\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import { Component, Prop, Provide } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { PropsWithType } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { identifierResultsXModule } from '../x-module';\n\n  /**\n   * Paints the list of identifier results stored in the state. Each identifier result should be\n   * represented by a {@link IdentifierResult | identifier result component} besides any\n   * other component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(identifierResultsXModule)]\n  })\n  export default class IdentifierResults extends Vue {\n    /**\n     * Animation component that will be used to animate the identifier results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of identifier results to render.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The module's list of identifier results.\n     *\n     * @public\n     */\n    @State('identifierResults', 'identifierResults')\n    public identifierResults!: Result[];\n\n    /**\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\n     *\n     * @public\n     */\n    @Provide()\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\n      'UserClickedAIdentifierResult'\n    ];\n\n    /**\n     * Slices the identifier results from the state.\n     *\n     * @returns - The list of identifier results sliced by the number of items to render.\n     *\n     * @internal\n     */\n    public get identifierResultsToRender(): Result[] {\n      return this.identifierResults.slice(0, this.maxItemsToRender);\n    }\n  }\n","<template>\n  <component :is=\"animation\" v-if=\"identifierResults.length\" tag=\"ul\" class=\"x-identifier-results\">\n    <li\n      v-for=\"identifierResult in identifierResultsToRender\"\n      :key=\"identifierResult.id\"\n      class=\"x-identifier-results__item\"\n      data-test=\"identifier-results-item\"\n    >\n      <!--\n        @slot (Required) Identifier results item content\n            @binding {Result} identifierResult - Identifier Result data\n      -->\n      <slot :identifierResult=\"identifierResult\" />\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import { Component, Prop, Provide } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { PropsWithType } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { identifierResultsXModule } from '../x-module';\n\n  /**\n   * Paints the list of identifier results stored in the state. Each identifier result should be\n   * represented by a {@link IdentifierResult | identifier result component} besides any\n   * other component.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(identifierResultsXModule)]\n  })\n  export default class IdentifierResults extends Vue {\n    /**\n     * Animation component that will be used to animate the identifier results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of identifier results to render.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The module's list of identifier results.\n     *\n     * @public\n     */\n    @State('identifierResults', 'identifierResults')\n    public identifierResults!: Result[];\n\n    /**\n     * The additional events to be emitted by the mandatory {@link BaseResultLink} component.\n     *\n     * @public\n     */\n    @Provide()\n    protected resultClickExtraEvents: PropsWithType<XEventsTypes, Result>[] = [\n      'UserClickedAIdentifierResult'\n    ];\n\n    /**\n     * Slices the identifier results from the state.\n     *\n     * @returns - The list of identifier results sliced by the number of items to render.\n     *\n     * @internal\n     */\n    public get identifierResultsToRender(): Result[] {\n      return this.identifierResults.slice(0, this.maxItemsToRender);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-identifier-results {\n    display: flex;\n    flex-flow: column nowrap;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Play with slot\n\nA IdentifierResult **must** be used inside the IdentifierResults component. In the example below the\nBaseResultLink is used as a wrapper and its default slot is filled with the IdentifierResult\ncomponent.\n\n```vue\n<IdentifierResults :animation=\"fadeAndSlide\">\n  <template #default=\"{ identifierResult }\">\n    <BaseResultLink :result=\"identifierResult\">\n      <template #default=\"{ result }\">\n        <IdentifierResult :result=\"result\"/>\n      </template>\n    </BaseResultLink>\n  </template>\n</IdentifierResults>\n```\n\n### Play with props\n\nIn this example, the identifier results have been limited to render a maximum of 3 items.\n\n```vue\n<template>\n  <IdentifierResults #default=\"{ identifierResult }\" :maxItemsToRender=\"3\">\n    <IdentifierResult :result=\"identifierResult\" />\n  </IdentifierResults>\n</template>\n\n<script>\n  import { IdentifierResults, IdentifierResult } from '@empathyco/x-components';\n\n  export default {\n    name: 'IdentifierResultsDemo',\n    components: {\n      IdentifierResults,\n      IdentifierResult\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <IdentifierResults\n    v-slot=\"{ identifierResult }\"\n    :maxItemsToRender=\"5\"\n    :animation=\"animation\"\n    class=\"x-flex x-flex-col x-gap-8 desktop:x-col-span-12 desktop:x-gap-4\"\n  >\n    <BaseResultLink\n      v-slot=\"{ result }\"\n      :result=\"identifierResult\"\n      class=\"x-suggestion-lg x-suggestion desktop:x-suggestion-md\"\n    >\n      <BarCodeIcon class=\"x-icon-lg desktop:x-icon-md\" />\n      <IdentifierResult :result=\"result\" />\n      <span>\n        {{ result.name }}\n      </span>\n    </BaseResultLink>\n  </IdentifierResults>\n</template>\n\n<script lang=\"ts\">\n  import { AnimationProp, BarCodeIcon, BaseResultLink } from '@empathyco/x-components';\n  import { IdentifierResult, IdentifierResults } from '@empathyco/x-components/identifier-results';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      BarCodeIcon,\n      BaseResultLink,\n      IdentifierResults,\n      IdentifierResult\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n</script>\n<style lang=\"scss\"></style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { AnimationProp, BarCodeIcon, BaseResultLink } from '@empathyco/x-components';\n  import { IdentifierResult, IdentifierResults } from '@empathyco/x-components/identifier-results';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      BarCodeIcon,\n      BaseResultLink,\n      IdentifierResults,\n      IdentifierResult\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n","import { QuerySuggestionsRequest, Suggestion } from '@empathyco/x-types';\n// eslint-disable-next-line max-len\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { QuerySuggestionsActionContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  QuerySuggestionsActionContext,\n  QuerySuggestionsRequest | null,\n  Suggestion[]\n>({\n  fetch({ dispatch }, request) {\n    return dispatch('fetchSuggestions', request);\n  },\n  onSuccess({ commit }, suggestions) {\n    commit('setSuggestions', suggestions);\n  }\n});\n\n/**\n * Default implementation for {@link QuerySuggestionsActions.fetchAndSaveSuggestions} action.\n *\n * @public\n */\nexport const fetchAndSaveSuggestions = fetchAndSave;\n\n/**\n * Default implementation for {@link QuerySuggestionsActions.cancelFetchAndSaveSuggestions} action.\n *\n * @public\n */\nexport const cancelFetchAndSaveSuggestions = cancelPrevious;\n","import { Suggestion } from '@empathyco/x-types';\nimport { GettersClass } from '../../../../store/getters.types';\nimport { normalizeString } from '../../../../utils/normalize';\nimport { QuerySuggestionsState, QuerySuggestionsXStoreModule } from '../types';\n\n/**\n * Class implementation for the {@link QuerySuggestionsGetter.querySuggestions} getter.\n *\n * @public\n */\nexport class QuerySuggestionsGetter implements GettersClass<QuerySuggestionsXStoreModule> {\n  /**\n   * Default implementation for the {@link QuerySuggestionsGetter.querySuggestions} getter.\n   *\n   * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the query\n   * suggestions module.\n   * @returns The filtered subset of queries, matching with the current query.\n   */\n  querySuggestions({ query, suggestions, config }: QuerySuggestionsState): Suggestion[] {\n    if (!query || !config.hideIfEqualsQuery) {\n      return suggestions;\n    }\n    return suggestions.filter(this.isInQuerySuggestions(normalizeString(query)));\n  }\n\n  /**\n   * Creates a function to check in the suggestion queries array the items that match\n   * the current query.\n   *\n   * @param normalizedQuery - The normalized query for search into the array.\n   * @returns A filter function for searching into the array of suggestion queries with the provided\n   * params.\n   * @internal\n   */\n  protected isInQuerySuggestions(normalizedQuery: string): (suggestion: Suggestion) => boolean {\n    return (suggestion: Suggestion) => {\n      const normalizedSuggestionQuery = normalizeString(suggestion.query);\n      // TODO Hide the suggestion if it's equals to the query and it does NOT have facets. (EX-3184)\n      // The logic is here https://bitbucket.org/colbenson/x-components/pull-requests/432\n      // normalizedSuggestionQuery !== normalizedQuery || !isArrayEmpty(suggestion.facets)\n      return normalizedSuggestionQuery !== normalizedQuery;\n    };\n  }\n}\n\nconst querySuggestionsGetter = new QuerySuggestionsGetter();\n\n// eslint-disable-next-line jsdoc/require-description-complete-sentence\n/**\n * {@inheritDoc QuerySuggestionsGetter.querySuggestions}\n *\n * @public\n */\nexport const querySuggestions =\n  querySuggestionsGetter.querySuggestions.bind(querySuggestionsGetter);\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveSuggestions,\n  fetchAndSaveSuggestions\n} from './actions/fetch-and-save-suggestions.action';\nimport { fetchSuggestions } from './actions/fetch-suggestions.action';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { normalizedQuery } from './getters/normalized-query.getter';\nimport { querySuggestions } from './getters/query-suggestions.getter';\nimport { request } from './getters/request.getter';\nimport { QuerySuggestionsXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the query-suggestions module.\n *\n * @internal\n */\nexport const querySuggestionsXStoreModule: QuerySuggestionsXStoreModule = {\n  state: () => ({\n    query: '',\n    suggestions: [],\n    status: 'initial',\n    config: {\n      debounceInMs: 200,\n      maxItemsToRequest: 10,\n      hideIfEqualsQuery: true\n    },\n    params: {}\n  }),\n  getters: {\n    request,\n    normalizedQuery,\n    querySuggestions\n  },\n  mutations: {\n    setQuery,\n    setSuggestions(state, suggestions) {\n      state.suggestions = suggestions;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    }\n  },\n  actions: {\n    cancelFetchAndSaveSuggestions,\n    fetchSuggestions,\n    fetchAndSaveSuggestions,\n    setUrlParams\n  }\n};\n","import { QuerySuggestionsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QuerySuggestionsGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the query\n * suggestions module.\n *\n * @returns The query suggestions request to fetch data from the API.\n *\n * @public\n */\nexport const request: QuerySuggestionsXStoreModule['getters']['request'] = ({\n  query,\n  config,\n  params\n}) => {\n  return query.trim()\n    ? {\n        query,\n        rows: config.maxItemsToRequest,\n        start: 0,\n        extraParams: params\n      }\n    : null;\n};\n","import { normalizeString } from '../../../../utils/normalize';\nimport { QuerySuggestionsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QuerySuggestionsGetters.normalizedQuery} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the query\n * suggestions module.\n *\n * @returns The normalized query.\n *\n * @public\n */\nexport const normalizedQuery: QuerySuggestionsXStoreModule['getters']['normalizedQuery'] = ({\n  query\n}) => normalizeString(query);\n","import { XPlugin } from '../../../../plugins';\nimport { QuerySuggestionsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QuerySuggestionsActions.fetchSuggestions}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The query suggestions request to make.\n *\n * @returns A `void` promise that resolves when it fetches suggestions.\n *\n * @public\n */\nexport const fetchSuggestions: QuerySuggestionsXStoreModule['actions']['fetchSuggestions'] = (\n  _context,\n  request\n) => {\n  return request\n    ? XPlugin.adapter.querySuggestions(request).then(({ suggestions }) => suggestions)\n    : [];\n};\n","import { QuerySuggestionsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link QuerySuggestionsActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param urlParams - List of params from the url.\n * @public\n */\nexport const setUrlParams: QuerySuggestionsXStoreModule['actions']['setUrlParams'] = (\n  { commit },\n  { query }\n) => {\n  commit('setQuery', query);\n};\n","import { createStoreEmitters } from '../../../store';\nimport { querySuggestionsXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the query-suggestions module.\n *\n * @internal\n */\nexport const querySuggestionsEmitters = createStoreEmitters(querySuggestionsXStoreModule, {\n  QuerySuggestionsChanged: state => state.suggestions,\n  QuerySuggestionsRequestUpdated: (_, getters) => getters.request\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch,\n  namespacedWireDispatchWithoutPayload\n} from '../../wiring/namespaced-wires.factory';\nimport { namespacedDebounce } from '../../wiring/namespaced-wires.operators';\nimport { NamespacedWireCommit } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `querySuggestions` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'querySuggestions';\n\n/**\n * WireCommit for {@link QuerySuggestionsXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n\n/**\n * WireDispatchWithoutPayload for {@link QuerySuggestionsXModule}.\n *\n * @internal\n */\nconst wireDispatchWithoutPayload = namespacedWireDispatchWithoutPayload(moduleName);\n\n/**\n * WireDispatch for {@link QuerySuggestionsXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n\n/**\n * Sets the query-suggestions module query.\n *\n * @public\n */\nexport const setQuerySuggestionsQuery = wireCommit('setQuery');\n\n/**\n * Sets the query suggestions state `params`.\n *\n * @public\n */\nexport const setQuerySuggestionsExtraParams = wireCommit('setParams');\n\n/**\n * Clears the query-suggestions module query.\n *\n * @public\n */\nexport const clearQuerySuggestionsQuery = wireCommit('setQuery', '');\n\n/**\n * Sets the query-suggestions state `query` from url.\n *\n * @public\n */\nconst setUrlParams = wireDispatch('setUrlParams');\n\n/**\n * Requests and stores a new set of query suggestions for the {@link QuerySuggestionsState.query}.\n *\n * @public\n */\nexport const fetchAndSaveSuggestionsWire = wireDispatch('fetchAndSaveSuggestions');\n\n/**\n * Cancels the {@link QuerySuggestionsActions.fetchAndSaveSuggestions} request promise.\n *\n * @public\n */\nexport const cancelFetchAndSaveSuggestionsWire = wireDispatchWithoutPayload(\n  'cancelFetchAndSaveSuggestions'\n);\n\n/**\n * Debounce function for the module.\n */\nconst moduleDebounce = namespacedDebounce(moduleName);\n\n/**\n * QuerySuggestions wiring.\n *\n * @internal\n */\nexport const querySuggestionsWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams\n  },\n  UserIsTypingAQuery: {\n    setQuerySuggestionsQueryDebounce: moduleDebounce(\n      setQuerySuggestionsQuery,\n      ({ state }) => state.config.debounceInMs,\n      { cancelOn: 'UserAcceptedAQuery' }\n    )\n  },\n  UserAcceptedAQuery: {\n    setQuerySuggestionsQuery\n  },\n  UserClearedQuery: {\n    clearQuerySuggestionsQuery,\n    cancelFetchAndSaveSuggestionsWire\n  },\n  QuerySuggestionsRequestUpdated: {\n    fetchAndSaveSuggestionsWire\n  },\n  ExtraParamsChanged: {\n    setQuerySuggestionsExtraParams\n  },\n  UserClickedCloseX: {\n    clearQuerySuggestionsQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearQuerySuggestionsQuery\n  }\n});\n","// XModule\nimport { XModule } from '../x-modules.types';\nimport { querySuggestionsEmitters } from './store/emitters';\nimport { querySuggestionsXStoreModule } from './store/module';\nimport { QuerySuggestionsXStoreModule } from './store/types';\nimport { querySuggestionsWiring } from './wiring';\n\n/**\n * QuerySuggestions {@link XModule} alias.\n *\n * @public\n */\nexport type QuerySuggestionsXModule = XModule<QuerySuggestionsXStoreModule>;\n\n/**\n * QuerySuggestions {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `query-suggestions` entry point.\n *\n * @public\n */\nexport const querySuggestionsXModule: QuerySuggestionsXModule = {\n  name: 'querySuggestions',\n  storeModule: querySuggestionsXStoreModule,\n  storeEmitters: querySuggestionsEmitters,\n  wiring: querySuggestionsWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Suggestion } from '@empathyco/x-types';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { querySuggestionsXModule } from '../x-module';\n\n  /**\n   * This component renders a suggestion for a query. A query suggestion is a recommended query\n   * based on previous search queries. It contains the query itself and a set of filters associated.\n   * For example, if you're searching for _shirt_, a query suggestion could be _long sleeve shirt_.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(querySuggestionsXModule)]\n  })\n  export default class QuerySuggestion extends Vue {\n    /**\n     * The normalized query of the query-suggestions module.\n     *\n     * @internal\n     */\n    @Getter('querySuggestions', 'normalizedQuery')\n    public query!: string;\n\n    /**\n     * The suggestion to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: Suggestion;\n\n    /**\n     * Emits {@link QuerySuggestionsXEvents.UserSelectedAQuerySuggestion} with the suggestion as\n     * payload when selecting the query suggestion.\n     *\n     * @internal\n     */\n    protected event: Partial<XEventsTypes> = {\n      UserSelectedAQuerySuggestion: this.suggestion\n    };\n  }\n","<template>\n  <BaseSuggestion\n    v-bind=\"{ query, suggestion, suggestionSelectedEvents: event }\"\n    class=\"x-query-suggestion\"\n    data-test=\"query-suggestion\"\n    feature=\"query_suggestion\"\n    #default=\"baseScope\"\n  >\n    <!-- eslint-disable max-len -->\n    <!--\n        @slot Query Suggestion content\n          @binding {Object} v-bind - `BaseSuggestion` default slot scope: **suggestion** <code>Suggestion</code> - Suggestion data<br /> **query** <code>string</code> - The query that the suggestion belongs to<br /> **filter** <code>Filter \\| undefined</code> - Suggestion's filter\n    -->\n    <!-- eslint-enable max-len -->\n    <slot v-bind=\"{ ...baseScope }\" />\n  </BaseSuggestion>\n</template>\n\n<script lang=\"ts\">\n  import { Suggestion } from '@empathyco/x-types';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { querySuggestionsXModule } from '../x-module';\n\n  /**\n   * This component renders a suggestion for a query. A query suggestion is a recommended query\n   * based on previous search queries. It contains the query itself and a set of filters associated.\n   * For example, if you're searching for _shirt_, a query suggestion could be _long sleeve shirt_.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(querySuggestionsXModule)]\n  })\n  export default class QuerySuggestion extends Vue {\n    /**\n     * The normalized query of the query-suggestions module.\n     *\n     * @internal\n     */\n    @Getter('querySuggestions', 'normalizedQuery')\n    public query!: string;\n\n    /**\n     * The suggestion to render.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: Suggestion;\n\n    /**\n     * Emits {@link QuerySuggestionsXEvents.UserSelectedAQuerySuggestion} with the suggestion as\n     * payload when selecting the query suggestion.\n     *\n     * @internal\n     */\n    protected event: Partial<XEventsTypes> = {\n      UserSelectedAQuerySuggestion: this.suggestion\n    };\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserSelectedAQuerySuggestion`] (./../../api/x-components.querysuggestionsxevents.md)\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend microservice required\nTo use this component, the <b>Empathize</b> microservice must be\nimplemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you can see how a single query suggestion is rendered using the `suggestion` prop.\n\n```vue live\n<template>\n  <QuerySuggestion :suggestion=\"suggestion\" />\n</template>\n\n<script>\n  import { QuerySuggestion } from '@empathyco/x-components/query-suggestions';\n  export default {\n    name: 'QuerySuggestionDemo',\n    components: {\n      QuerySuggestion\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'QuerySuggestion',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with default slot\n\nIn this example, we are adding an emoji next to the suggestion.\n\n```vue live\n<template>\n  <QuerySuggestion :suggestion=\"suggestion\" #default=\"{ suggestion }\">\n    <span>🔍</span>\n    <span>{{ suggestion.query }}</span>\n  </QuerySuggestion>\n</template>\n\n<script>\n  import { QuerySuggestion } from '@empathyco/x-components/query-suggestions';\n  export default {\n    name: 'QuerySuggestionDemo',\n    components: {\n      QuerySuggestion\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'QuerySuggestion',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with events\n\nIn this example, when you click on the query suggestion, a message is displayed to illustrate that\nthe `UserSelectedAQuerySuggestion` event has been triggered.\n\n```vue live\n<template>\n  <QuerySuggestion :suggestion=\"suggestion\" @UserSelectedAQuerySuggestion=\"alertSuggestion\" />\n</template>\n\n<script>\n  import { QuerySuggestion } from '@empathyco/x-components/query-suggestions';\n  export default {\n    name: 'QuerySuggestionDemo',\n    components: {\n      QuerySuggestion\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'QuerySuggestion',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    },\n    methods: {\n      alertSuggestion(querySuggestion) {\n        alert(`You have clicked the query suggestion: ${querySuggestion.query}`);\n      }\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import Highlight from '../../../components/highlight.vue';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { querySuggestionsXModule } from '../x-module';\n  import QuerySuggestion from './query-suggestion.vue';\n\n  /**\n   * This component renders a list of possible search queries to select from as a query is entered\n   * in the input field. By default, this is a list of\n   * [`QuerySuggestion`](./x-components.query-suggestion.md) components.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { Highlight, BaseSuggestions, QuerySuggestion },\n    mixins: [xComponentMixin(querySuggestionsXModule)]\n  })\n  export default class QuerySuggestions extends Vue {\n    /**\n     * The module's list of suggestions.\n     *\n     * @internal\n     */\n    @Getter('querySuggestions', 'querySuggestions')\n    public suggestions!: Suggestion[];\n  }\n","<template>\n  <BaseSuggestions\n    v-bind=\"$attrs\"\n    :suggestions=\"suggestions\"\n    class=\"x-query-suggestions\"\n    data-test=\"query-suggestions\"\n  >\n    <template #default=\"baseScope\">\n      <!-- eslint-disable max-len -->\n      <!--\n        @slot Custom component that replaces the `QuerySuggestion` component\n            @binding {Object} v-bind - Query Suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** `Suggestion` - Query Suggestion data<br />&nbsp;&nbsp;- **index** `number` - Query Suggestion index\n      -->\n      <!-- eslint-enable max-len -->\n      <slot name=\"suggestion\" v-bind=\"{ ...baseScope }\">\n        <QuerySuggestion\n          :suggestion=\"baseScope.suggestion\"\n          class=\"x-query-suggestions__suggestion x-suggestion\"\n          #default=\"querySuggestionScope\"\n        >\n          <!-- eslint-disable max-len -->\n          <!--\n            @slot Custom content that replaces the `QuerySuggestion` default content\n                @binding {Object} v-bind - Query Suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** `Suggestion` - Query Suggestion data<br />&nbsp;&nbsp;- **index** `number` - Query Suggestion index\n          -->\n          <!-- eslint-enable max-len -->\n          <slot name=\"suggestion-content\" v-bind=\"{ ...baseScope, ...querySuggestionScope }\" />\n        </QuerySuggestion>\n      </slot>\n    </template>\n  </BaseSuggestions>\n</template>\n\n<script lang=\"ts\">\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import Highlight from '../../../components/highlight.vue';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { querySuggestionsXModule } from '../x-module';\n  import QuerySuggestion from './query-suggestion.vue';\n\n  /**\n   * This component renders a list of possible search queries to select from as a query is entered\n   * in the input field. By default, this is a list of\n   * [`QuerySuggestion`](./x-components.query-suggestion.md) components.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { Highlight, BaseSuggestions, QuerySuggestion },\n    mixins: [xComponentMixin(querySuggestionsXModule)]\n  })\n  export default class QuerySuggestions extends Vue {\n    /**\n     * The module's list of suggestions.\n     *\n     * @internal\n     */\n    @Getter('querySuggestions', 'querySuggestions')\n    public suggestions!: Suggestion[];\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Inherited props\n\nThis component inherits the [`BaseSuggestions`](../base-components/x-components.base-suggestions.md)\nprops.\n\n| Name               | Description                                 | Type     | Default |\n| ------------------ | ------------------------------------------- | -------- | ------- |\n| `animation`        | Animation component for `QuerySuggestions`. | `Vue`    | `\"ul\"`  |\n| `maxItemsToRender` | Number of query suggestions to be rendered. | `number` |         |\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend microservice required\nTo use this component, the <b>Empathize</b> microservice must be\nimplemented.\n:::\n<!-- prettier-ignore-end -->\n\nIn this example, a list of query suggestions is displayed. See how the suggestions change as you\ntype “sandal”. If you click on a suggestion, the search term in the search input is updated and the\nquery suggestions are changed to reflect the new search term.\n\n_Type “sandal” or another fashion term in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions />\n  </div>\n</template>\n\n<script>\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      QuerySuggestions,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, an `StaggeredFadeAndSlide` animation component has been passed as prop, so that the\nmatching query suggestions are shuffled with a slight delay as more letters of the term are typed.\n\n_Type “lipstick” or another fashion term in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions :animation=\"'StaggeredFadeAndSlide'\" />\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { StaggeredFadeAndSlide } from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('StaggeredFadeAndSlide', StaggeredFadeAndSlide);\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      QuerySuggestions,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with suggestion slot\n\nHere, the `suggestion` binding property passes the suggestion data.\n\n_Type “bag” or another fashion term in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions #suggestion=\"{ suggestion }\">\n      <QuerySuggestion :suggestion=\"suggestion\" #default=\"{ suggestion }\">\n        <span>🔍</span>\n        <span>{{ suggestion.query }}</span>\n      </QuerySuggestion>\n    </QuerySuggestions>\n  </div>\n</template>\n\n<script>\n  import { QuerySuggestion, QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      QuerySuggestion,\n      QuerySuggestions\n    }\n  };\n</script>\n```\n\n<!-- prettier-ignore-start -->\n::: danger\nIf you're not using the [`QuerySuggestion`](./query-suggestion.md) component, then\nyou must implement the `UserAcceptedAQuery` and `UserSelectedAQuerySuggestion` events in\n`QuerySuggestions`.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions #suggestion=\"{ suggestion }\">\n      <button @click=\"emitSuggestionClickedEvents($event, suggestion)\">\n        {{ suggestion.query }}\n      </button>\n    </QuerySuggestions>\n  </div>\n</template>\n\n<script>\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      SearchInput,\n      QuerySuggestions\n    },\n    methods: {\n      emitSuggestionClickedEvents(event, suggestion) {\n        this.$x.emit('UserAcceptedAQuery', suggestion.query, {\n          target: event.target\n        });\n        this.$x.emit('UserSelectedASuggestion', suggestion, {\n          target: event.target\n        });\n        this.$x.emit('UserSelectedAQuerySuggestion', suggestion, {\n          target: event.target\n        });\n      }\n    }\n  };\n</script>\n```\n\n:::\n<!-- prettier-ignore-end -->\n\n### Play with suggestion-content slot\n\nIn this example, the `suggestion` and `query` properties of the `suggestion-content` slot are used\nto paint a suggestion with an icon.\n\n_Type “trousers” or another toy in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions #suggestion-content=\"{ suggestion, query }\">\n      <span>🔍</span>\n      <Highlight :text=\"suggestion.query\" :highlight=\"query\" />\n    </QuerySuggestions>\n  </div>\n</template>\n\n<script>\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { Highlight } from '@empathyco/x-components';\n\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      SearchInput,\n      QuerySuggestions,\n      Highlight\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents can be combined and communicate with each other. Commonly, the `QuerySuggestions`\ncomponent communicates with the [`SearchInput`](../search-box/x-components.search-input.md),\nupdating the term in the search input.\n\n_Type “pants” or another toy in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <QuerySuggestions />\n  </div>\n</template>\n\n<script>\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'QuerySuggestionsDemo',\n    components: {\n      SearchInput,\n      QuerySuggestions\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <QuerySuggestions\n    :animation=\"animation\"\n    :max-items-to-render=\"5\"\n    class=\"x-flex x-flex-col x-gap-8 desktop:x-gap-4\"\n  >\n    <template #suggestion=\"{ suggestion }\">\n      <QuerySuggestion\n        :suggestion=\"suggestion\"\n        class=\"x-suggestion-lg x-suggestion desktop:x-suggestion-md\"\n      >\n        <template #default=\"{ query }\">\n          <SearchIcon class=\"x-icon-lg desktop:x-icon-md\" />\n          <Highlight :text=\"suggestion.query\" :highlight=\"query\" />\n        </template>\n      </QuerySuggestion>\n    </template>\n  </QuerySuggestions>\n</template>\n\n<script lang=\"ts\">\n  import { AnimationProp, SearchIcon, Highlight } from '@empathyco/x-components';\n  import { QuerySuggestions, QuerySuggestion } from '@empathyco/x-components/query-suggestions';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      SearchIcon,\n      Highlight,\n      QuerySuggestions,\n      QuerySuggestion\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n</script>\n<style lang=\"scss\"></style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { AnimationProp, SearchIcon, Highlight } from '@empathyco/x-components';\n  import { QuerySuggestions, QuerySuggestion } from '@empathyco/x-components/query-suggestions';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      SearchIcon,\n      Highlight,\n      QuerySuggestions,\n      QuerySuggestion\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n","import { NextQuery, NextQueriesRequest } from '@empathyco/x-types';\n// eslint-disable-next-line max-len\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { NextQueriesActionContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  NextQueriesActionContext,\n  NextQueriesRequest | null,\n  NextQuery[] | null\n>({\n  fetch({ dispatch }, request) {\n    return dispatch('fetchNextQueries', request);\n  },\n  onSuccess({ commit }, nextQueries) {\n    if (nextQueries) {\n      commit('setNextQueries', nextQueries);\n    }\n  }\n});\n\n/**\n * Default implementation for {@link NextQueriesActions.fetchAndSaveNextQueries} action.\n *\n * @public\n */\nexport const fetchAndSaveNextQueries = fetchAndSave;\n\n/**\n * Default implementation for {@link NextQueriesActions.cancelFetchAndSaveNextQueries} action.\n *\n * @public\n */\nexport const cancelFetchAndSaveNextQueries = cancelPrevious;\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveNextQueries,\n  fetchAndSaveNextQueries\n} from './actions/fetch-and-save-next-queries.action';\nimport { fetchNextQueries } from './actions/fetch-next-queries.action';\nimport { setQueryFromLastHistoryQuery } from './actions/set-query-from-last-history-query.action';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { fetchNextQueryPreview } from './actions/fetch-next-query-preview.action';\nimport { fetchAndSaveNextQueryPreview } from './actions/fetch-and-save-next-query-preview.action';\nimport { nextQueries } from './getters/next-queries.getter';\nimport { request } from './getters/request.getter';\nimport { NextQueriesXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the next-queries module.\n *\n * @internal\n */\nexport const nextQueriesXStoreModule: NextQueriesXStoreModule = {\n  state: () => ({\n    query: '',\n    nextQueries: [],\n    searchedQueries: [],\n    status: 'initial',\n    config: {\n      maxItemsToRequest: 20,\n      hideSessionQueries: true,\n      loadOnInit: true,\n      maxPreviewItemsToRequest: 8\n    },\n    params: {},\n    resultsPreview: {}\n  }),\n  getters: {\n    request,\n    nextQueries\n  },\n  mutations: {\n    setQuery,\n    setNextQueries(state, nextQueries) {\n      state.nextQueries = nextQueries;\n    },\n    setSearchedQueries(state, searchedQueries) {\n      state.searchedQueries = searchedQueries;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    },\n    setResultsPreview(state, resultsPreview) {\n      state.resultsPreview = { ...state.resultsPreview, ...resultsPreview };\n    },\n    resetResultsPreview(state) {\n      state.resultsPreview = {};\n    }\n  },\n  actions: {\n    cancelFetchAndSaveNextQueries,\n    fetchAndSaveNextQueries,\n    fetchNextQueries,\n    setQueryFromLastHistoryQuery,\n    setUrlParams,\n    fetchNextQueryPreview,\n    fetchAndSaveNextQueryPreview\n  }\n};\n","import { NextQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link NextQueriesGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the next\n * queries module.\n * @returns The next queries request to fetch data from the API.\n *\n * @public\n */\nexport const request: NextQueriesXStoreModule['getters']['request'] = ({\n  query,\n  config,\n  params\n}) => {\n  return query.trim()\n    ? {\n        query,\n        rows: config.maxItemsToRequest,\n        start: 0,\n        extraParams: params\n      }\n    : null;\n};\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { NextQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link NextQueriesGetters.nextQueries} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the next\n * queries module.\n * @returns The next queries filtered by the searched queries or not.\n *\n * @public\n */\nexport const nextQueries: NextQueriesXStoreModule['getters']['nextQueries'] = ({\n  nextQueries,\n  searchedQueries,\n  config\n}) => {\n  const queriesToFilter = searchedQueries.map((historyQuery: HistoryQuery) => historyQuery.query);\n  return config.hideSessionQueries\n    ? nextQueries.filter(({ query }) => !queriesToFilter.includes(query))\n    : nextQueries;\n};\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { NextQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link NextQueriesActions.fetchNextQueries}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The next queries request to make.\n * @returns A Promise of NextQuery[] that resolves when it fetches next queries or `null`\n * if the request was not made.\n *\n * @public\n */\nexport const fetchNextQueries: NextQueriesXStoreModule['actions']['fetchNextQueries'] = (\n  _context,\n  request\n) => {\n  return request\n    ? XPlugin.adapter.nextQueries(request).then(({ nextQueries }) => nextQueries)\n    : null;\n};\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { isArrayEmpty } from '../../../../utils/array';\nimport { NextQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link NextQueriesActions.setQueryFromLastHistoryQuery}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param historyQueries - The current history queries.\n * @public\n */\n//eslint-disable-next-line max-len\nexport const setQueryFromLastHistoryQuery: NextQueriesXStoreModule['actions']['setQueryFromLastHistoryQuery'] =\n  ({ state, commit }, historyQueries: HistoryQuery[]) => {\n    if (!isArrayEmpty(historyQueries) && state.config.loadOnInit) {\n      commit('setQuery', historyQueries[0].query);\n    }\n  };\n","import { NextQueriesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link NextQueriesActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param urlParams - List of params from the url.\n * @public\n */\nexport const setUrlParams: NextQueriesXStoreModule['actions']['setUrlParams'] = (\n  { commit },\n  { query }\n) => {\n  commit('setQuery', query);\n};\n","import { NextQueriesXStoreModule } from '../types';\nimport { XPlugin } from '../../../../plugins/x-plugin';\nimport { createOrigin } from '../../../../utils/origin';\n\n/**\n * Default implementation for the {@link NextQueriesActions.fetchNextQueryPreview}.\n *\n * @param state - The state of the store, used to retrieve the rows and the extraParams to be sent\n * in the request.\n * @param query - The next query to send in the request.\n * @param location - The {@link FeatureLocation} to send in the request.\n * @returns A Promise of a SearchResponse when it fetches the results, `null` if the request was\n * not made.\n */\nexport const fetchNextQueryPreview: NextQueriesXStoreModule['actions']['fetchNextQueryPreview'] = (\n  { state },\n  { query, location }\n) => {\n  if (!query) {\n    return null;\n  }\n  const origin = createOrigin({ feature: 'next_query', location }) ?? undefined;\n\n  return XPlugin.adapter.search(\n    {\n      query,\n      rows: state.config.maxPreviewItemsToRequest,\n      extraParams: state.params,\n      origin\n    },\n    {\n      id: `fetchNextQueryPreview-${query}`\n    }\n  );\n};\n","import { NextQueriesXStoreModule } from '../types';\n\n// eslint-disable-next-line max-len\nexport const fetchAndSaveNextQueryPreview: NextQueriesXStoreModule['actions']['fetchAndSaveNextQueryPreview'] =\n  ({ dispatch, commit }, { query, location }) => {\n    return dispatch('fetchNextQueryPreview', { query, location })\n      .then(response => {\n        if (response) {\n          commit('setResultsPreview', {\n            [query]: {\n              query,\n              totalResults: response.totalResults,\n              items: response.results\n            }\n          });\n        }\n      })\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      });\n  };\n","import { createStoreEmitters } from '../../../store';\nimport { createEmitterArrayFilter } from '../../../utils/array';\nimport { nextQueriesXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the next-queries module.\n *\n * @internal\n */\nexport const nextQueriesEmitters = createStoreEmitters(nextQueriesXStoreModule, {\n  NextQueriesChanged: {\n    selector: (_, getters) => getters.nextQueries,\n    filter: createEmitterArrayFilter('query')\n  },\n  NextQueriesRequestUpdated: (_, getters) => getters.request\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireCommitWithoutPayload,\n  namespacedWireDispatch\n} from '../../wiring/namespaced-wires.factory';\nimport {\n  NamespacedWireCommit,\n  NamespacedWireCommitWithoutPayload,\n  NamespacedWireDispatch,\n  NamespacedWiringData\n} from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `nextQueries` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'nextQueries';\n\n/**\n * WireCommit for {@link NextQueriesXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n\n/**\n * WireCommitWithoutPayload for {@link NextQueriesXModule}.\n */\nconst wireCommitWithoutPayload: NamespacedWireCommitWithoutPayload<typeof moduleName> =\n  namespacedWireCommitWithoutPayload(moduleName);\n\n/**\n * WireDispatch for {@link NextQueriesXModule}.\n *\n * @internal\n */\nconst wireDispatch: NamespacedWireDispatch<typeof moduleName> = namespacedWireDispatch(moduleName);\n\n/**\n * Sets the next queries state `query`.\n *\n * @public\n */\nexport const setNextQueriesQuery = wireCommit('setQuery');\n\n/**\n * Sets the next queries state `query` from url.\n *\n * @public\n */\nconst setUrlParams = wireDispatch('setUrlParams');\n\n/**\n * Sets the next queries state `params`.\n *\n * @public\n */\nexport const setNextQueriesExtraParams = wireCommit('setParams');\n\n/**\n * Requests and stores the next queries.\n *\n * @public\n */\nexport const fetchAndSaveNextQueriesWire = wireDispatch('fetchAndSaveNextQueries');\n\n/**\n * Sets the next queries state `query` with the last query in history queries.\n *\n * @public\n */\nexport const setQueryFromLastHistoryQueryWire = wireDispatch('setQueryFromLastHistoryQuery');\n\n/**\n * Requests and store the next query preview results.\n *\n * @public\n */\nexport const fetchAndSaveNextQueryPreviewWire = wireDispatch(\n  'fetchAndSaveNextQueryPreview',\n  ({ eventPayload: query, metadata: { location } }: NamespacedWiringData<'nextQueries'>) => {\n    return {\n      query,\n      location\n    };\n  }\n);\n/**\n * Resets the next query preview results.\n *\n * @public\n */\nexport const resetResultsPreviewWire = wireCommitWithoutPayload('resetResultsPreview');\n\n/**\n * Sets the next queries state `searchedQueries` with the list of history queries.\n *\n * @public\n */\nexport const setSearchedQueries = wireCommit('setSearchedQueries');\n\n/**\n * Wiring configuration for the {@link NextQueriesXModule | next queries module}.\n *\n * @internal\n */\nexport const nextQueriesWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams\n  },\n  NextQueriesChanged: {\n    resetResultsPreviewWire\n  },\n  UserAcceptedAQuery: {\n    setNextQueriesQuery\n  },\n  SessionHistoryQueriesChanged: {\n    setSearchedQueries,\n    // TODO setQueryFromLastHistoryQuery it has to be called only one time\n    setQueryFromLastHistoryQueryWire\n  },\n  NextQueriesRequestUpdated: {\n    fetchAndSaveNextQueriesWire\n  },\n  ExtraParamsChanged: {\n    setNextQueriesExtraParams\n  },\n  NextQueryPreviewMountedHook: {\n    fetchAndSaveNextQueryPreviewWire\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { nextQueriesEmitters } from './store/emitters';\nimport { nextQueriesXStoreModule } from './store/module';\nimport { NextQueriesXStoreModule } from './store/types';\nimport { nextQueriesWiring } from './wiring';\n\n/**\n * NextQueries {@link XModule} alias.\n *\n * @public\n */\nexport type NextQueriesXModule = XModule<NextQueriesXStoreModule>;\n\n/**\n * Next queries {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `next-queries` entry point.\n *\n * @public\n */\nexport const nextQueriesXModule: NextQueriesXModule = {\n  name: 'nextQueries',\n  storeModule: nextQueriesXStoreModule,\n  storeEmitters: nextQueriesEmitters,\n  wiring: nextQueriesWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { nextQueriesXModule } from '../x-module';\n\n  /**\n   * Renders a next query item which receives the suggestion that will be rendered as a prop. It\n   * exposes a default slot to change the next query content. If the slot is not overridden,\n   * it will render the suggestion query by default.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQuery extends Vue {\n    /**\n     * The suggestion to render and use in the default slot.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: NextQueryModel;\n\n    /**\n     * Indicates if the curated next query should be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n\n    /**\n     * Events list which are going to be emitted when a next query is selected.\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserSelectedANextQuery: this.suggestion\n      };\n    }\n\n    /**\n     * Checks if the next query is curated and if it should be highlighted.\n     *\n     * @returns True if the next query is curated and should be highlighted.\n     *\n     * @internal\n     */\n    protected get shouldHighlightCurated(): boolean {\n      return this.highlightCurated && (this.suggestion.isCurated ?? false);\n    }\n  }\n","<template>\n  <BaseSuggestion\n    class=\"x-next-query\"\n    :suggestion=\"suggestion\"\n    :suggestionSelectedEvents=\"events\"\n    data-test=\"next-query\"\n    feature=\"next_query\"\n    :class=\"{ 'x-next-query--is-curated': shouldHighlightCurated }\"\n    #default=\"baseScope\"\n  >\n    <!-- eslint-disable max-len -->\n    <!--\n        @slot Next Query content\n            @binding {Object} v-bind - `BaseSuggestion` default slot scope: **suggestion** <code>Suggestion</code> - Suggestion data<br /> **query** <code>string</code> - The query that the suggestion belongs to<br /> **filter** <code>Filter \\| undefined</code> - Suggestion's filter\n            @binding {boolean} shouldHighlightCurated - True if the curated NQ should be highlighted\n    -->\n    <!-- eslint-enable max-len -->\n    <slot v-bind=\"{ ...baseScope, shouldHighlightCurated }\" />\n  </BaseSuggestion>\n</template>\n\n<script lang=\"ts\">\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { nextQueriesXModule } from '../x-module';\n\n  /**\n   * Renders a next query item which receives the suggestion that will be rendered as a prop. It\n   * exposes a default slot to change the next query content. If the slot is not overridden,\n   * it will render the suggestion query by default.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQuery extends Vue {\n    /**\n     * The suggestion to render and use in the default slot.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: NextQueryModel;\n\n    /**\n     * Indicates if the curated next query should be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n\n    /**\n     * Events list which are going to be emitted when a next query is selected.\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserSelectedANextQuery: this.suggestion\n      };\n    }\n\n    /**\n     * Checks if the next query is curated and if it should be highlighted.\n     *\n     * @returns True if the next query is curated and should be highlighted.\n     *\n     * @internal\n     */\n    protected get shouldHighlightCurated(): boolean {\n      return this.highlightCurated && (this.suggestion.isCurated ?? false);\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis components expects just a suggestion as a prop to be rendered. It has a slot to override the\ncontent. By default, it renders the suggestion query of the next query. It also has an optional\nprop, `highlightCurated`, to indicate if the curated Next Queries should be differentiated with a\nCSS class.\n\n### Basic Usage\n\nUsing default slot:\n\n```vue live\n<template>\n  <NextQuery :suggestion=\"suggestion\" />\n</template>\n\n<script>\n  import { NextQuery } from '@empathyco/x-components/next-queries';\n\n  export default {\n    name: 'NextQueryDemo',\n    components: {\n      NextQuery\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Overriding default slot.\n\nThe default slot allows you to replace the content of the suggestion button.\n\n```vue live\n<template>\n  <NextQuery :suggestion=\"suggestion\">\n    <template #default=\"{ suggestion }\">\n      <TrendingIcon />\n      <span class=\"x-next-query__query\" :aria-label=\"suggestion.query\">{{ suggestion.query }}</span>\n    </template>\n  </NextQuery>\n</template>\n\n<script>\n  import { NextQuery } from '@empathyco/x-components/next-queries';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'NextQueryDemo',\n    components: {\n      NextQuery,\n      TrendingIcon\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n## Dynamic Classes\n\n`NextQuery` uses the following dynamic CSS classes so you can style it when is:\n\n- Curated: `x-next-query--is-curated`.\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserSelectedANextQuery`: the event is emitted after the user clicks the button. The event payload\n  is the next query data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { nextQueriesXModule } from '../x-module';\n  import NextQuery from './next-query.vue';\n\n  /**\n   * Simple next-queries component that renders a list of\n   * [`BaseSuggestions`](./x-components.base-suggestions.md),\n   * allowing the user to select one of them, and emitting the needed events. A next query is a\n   * suggestion for a new search, related to your previous query. I.e. If people normally search\n   * for `shirts`, and then `trousers`, `trousers` would be a next query of `shirts`.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { NextQuery, BaseSuggestions },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueries extends Vue {\n    /**\n     * Flag to indicate if the curated next queries should be displayed different.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    public highlightCurated!: boolean;\n\n    /**\n     * NextQueries list to be used instead of state NextQueries.\n     *\n     * @public\n     */\n    @Prop()\n    public suggestions?: NextQueryModel[];\n\n    /**\n     * The list of next queries from the state.\n     *\n     * @internal\n     */\n    @Getter('nextQueries', 'nextQueries')\n    public stateNextQueries!: NextQueryModel[];\n\n    /**.\n     * The list of next queries finally rendered\n     *\n     * @internal\n     */\n    protected get renderedNextQueries(): NextQueryModel[] {\n      return this.suggestions ?? this.stateNextQueries;\n    }\n  }\n","<template>\n  <BaseSuggestions\n    v-bind=\"$attrs\"\n    :suggestions=\"renderedNextQueries\"\n    data-test=\"next-queries\"\n    class=\"x-next-queries\"\n  >\n    <template #default=\"baseScope\">\n      <!-- eslint-disable max-len -->\n      <!--\n        @slot Next Query item\n            @binding {Object} v-bind - Next Query suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - Next Query suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - Next Query suggestion index\n            @binding {boolean} highlightCurated - True if the curated NQs should be highlighted\n      -->\n      <!-- eslint-enable max-len -->\n      <slot name=\"suggestion\" v-bind=\"{ ...baseScope, highlightCurated }\">\n        <NextQuery\n          #default=\"nextQueryScope\"\n          :suggestion=\"baseScope.suggestion\"\n          :highlightCurated=\"highlightCurated\"\n          class=\"x-next-queries__suggestion x-suggestion\"\n        >\n          <!-- eslint-disable max-len -->\n          <!--\n              @slot Next Query content\n                  @binding {Object} v-bind - Next Query suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - Next Query suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - Next Query suggestion index\n                  @binding {boolean} shouldHighlightCurated - True if the curated NQ should be highlighted\n          -->\n          <!-- eslint-enable max-len -->\n          <slot name=\"suggestion-content\" v-bind=\"{ ...baseScope, ...nextQueryScope }\" />\n        </NextQuery>\n      </slot>\n    </template>\n  </BaseSuggestions>\n</template>\n\n<script lang=\"ts\">\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { nextQueriesXModule } from '../x-module';\n  import NextQuery from './next-query.vue';\n\n  /**\n   * Simple next-queries component that renders a list of\n   * [`BaseSuggestions`](./x-components.base-suggestions.md),\n   * allowing the user to select one of them, and emitting the needed events. A next query is a\n   * suggestion for a new search, related to your previous query. I.e. If people normally search\n   * for `shirts`, and then `trousers`, `trousers` would be a next query of `shirts`.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { NextQuery, BaseSuggestions },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueries extends Vue {\n    /**\n     * Flag to indicate if the curated next queries should be displayed different.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    public highlightCurated!: boolean;\n\n    /**\n     * NextQueries list to be used instead of state NextQueries.\n     *\n     * @public\n     */\n    @Prop()\n    public suggestions?: NextQueryModel[];\n\n    /**\n     * The list of next queries from the state.\n     *\n     * @internal\n     */\n    @Getter('nextQueries', 'nextQueries')\n    public stateNextQueries!: NextQueryModel[];\n\n    /**.\n     * The list of next queries finally rendered\n     *\n     * @internal\n     */\n    protected get renderedNextQueries(): NextQueryModel[] {\n      return this.suggestions ?? this.stateNextQueries;\n    }\n  }\n</script>\n\n<!--eslint-disable max-len -->\n<docs lang=\"mdx\">\n## Inherited props\n\nThis component inherits the [`BaseSuggestions`](../base-components/x-components.base-suggestions.md)\nprops.\n\n| Name               | Description                                                       | Type     | Default |\n| ------------------ | ----------------------------------------------------------------- | -------- | ------- |\n| `animation`        | Animation component that will be used to animate the suggestions. | `Vue`    | `\"ul\"`  |\n| `maxItemsToRender` | Number of popular searches to be rendered.                        | `number` |         |\n\n## Examples\n\n### Basic example\n\nYou don't need to pass any props, or slots. Simply add the component, and when it has any next\nqueries it will show them\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <NextQueries />\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { NextQueries } from '@empathyco/x-components/next-queries';\n\n  export default {\n    name: 'NextQueriesDemo',\n    components: {\n      SearchInput,\n      NextQueries\n    }\n  };\n</script>\n```\n\nThe component has three optional props. `animation` to render the component with an animation,\n`maxItemsToRender` to limit the number of next queries will be rendered (by default it is 5) and\n`highlightCurated` to indicate if the curated Next Queries inside the list should be highlighted.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <NextQueries :animation=\"'FadeAndSlide'\" :maxItemsToRender=\"10\" :highlightCurated=\"true\" />\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { NextQueries } from '@empathyco/x-components/next-queries';\n  import { FadeAndSlide } from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('FadeAndSlide', FadeAndSlide);\n  export default {\n    name: 'NextQueriesDemo',\n    components: {\n      SearchInput,\n      NextQueries\n    }\n  };\n</script>\n```\n\n### Overriding Next Queries' Content\n\nYou can use your custom implementation of the Next Query's content. In the example below, instead of\nusing the default Next Query's content, an icon is added, as well as a span with the query of the\nNext Query suggestion.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <NextQueries>\n      <template #suggestion-content=\"{ suggestion }\">\n        <TrendingIcon />\n        <span class=\"x-next-query__query\">{{ suggestion.query }}</span>\n      </template>\n    </NextQueries>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { NextQueries } from '@empathyco/x-components/next-queries';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'NextQueriesDemo',\n    components: {\n      SearchInput,\n      NextQueries,\n      TrendingIcon\n    }\n  };\n</script>\n```\n\n### Adding a custom next query component\n\nYou can use your custom implementation of a next query component. To work correctly, it should use\nthe `emitNextQuerySelected` function when the next query is selected. In the example below, instead\nof using the default `button` tag for a next query, an icon is added, and the text of the next query\nis wrapped in a `span`\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <NextQueries>\n      <template #suggestion=\"{ suggestion }\">\n        <NextQuery :suggestion=\"suggestion\" class=\"x-next-queries__suggestion\">\n          <template #default=\"{ suggestion }\">\n            <TrendingIcon />\n            <span class=\"x-next-query__query\">{{ suggestion.query }}</span>\n          </template>\n        </NextQuery>\n        <button>Custom Behaviour</button>\n      </template>\n    </NextQueries>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { NextQueries, NextQuery } from '@empathyco/x-components/next-queries';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'NextQueriesDemo',\n    components: {\n      SearchInput,\n      NextQueries,\n      NextQuery,\n      TrendingIcon\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { NextQuery } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { groupItemsBy } from '../../../utils/array';\n  import { ListItem } from '../../../utils/types';\n  import { NextQueriesGroup } from '../types';\n  import { nextQueriesXModule } from '../x-module';\n  import { XInject } from '../../../components/decorators/injection.decorators';\n  import { HAS_MORE_ITEMS_KEY, QUERY_KEY } from '../../../components/decorators/injection.consts';\n\n  /**\n   * Component that inserts groups of next queries in different positions of the injected search\n   * items list, based on the provided configuration.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueriesList extends mixins(ItemsListInjectionMixin) {\n    /**\n     * Animation component that will be used to animate the next queries groups.\n     *\n     * @public\n     */\n    @Prop()\n    protected animation?: Vue | string;\n\n    /**\n     * The first index to insert a group of next queries at.\n     *\n     * @public\n     */\n    @Prop({ default: 24 })\n    public offset!: number;\n\n    /**\n     * The items cycle size to keep inserting next queries groups at.\n     *\n     * @public\n     */\n    @Prop({ default: 24 })\n    public frequency!: number;\n\n    /**\n     * The maximum amount of next queries to add in a single group.\n     *\n     * @public\n     */\n    @Prop({ default: 4 })\n    public maxNextQueriesPerGroup!: number;\n\n    /**\n     * The maximum number of groups to insert into the injected list items list.\n     *\n     * @public\n     */\n    @Prop()\n    public maxGroups!: number;\n\n    /**\n     * Determines if a group is added to the injected items list in case the number\n     * of items is smaller than the offset.\n     *\n     * @public\n     */\n    @Prop({ default: false })\n    public showOnlyAfterOffset!: boolean;\n\n    /**\n     * The state next queries.\n     *\n     * @internal\n     */\n    @Getter('nextQueries', 'nextQueries')\n    public nextQueries!: NextQuery[];\n\n    /**\n     * Injected query, updated when the related request(s) have succeeded.\n     */\n    @XInject(QUERY_KEY)\n    public injectedQuery!: string | undefined;\n\n    /**\n     * Indicates if there are more available results than the injected.\n     */\n    @XInject(HAS_MORE_ITEMS_KEY)\n    public hasMoreItems!: boolean;\n\n    /**\n     * The grouped next queries based on the given config.\n     *\n     * @returns A list of next queries groups.\n     * @internal\n     */\n    protected get nextQueriesGroups(): NextQueriesGroup[] {\n      return Object.values(\n        groupItemsBy(this.nextQueries, (_, index) =>\n          Math.floor(index / this.maxNextQueriesPerGroup)\n        )\n      )\n        .slice(0, this.maxGroups)\n        .map(nextQueries => ({\n          modelName: 'NextQueriesGroup' as const,\n          id: nextQueries.map(nextQuery => nextQuery.query).join(','),\n          nextQueries\n        }));\n    }\n\n    /**\n     * New list of {@link ListItem}s to render.\n     *\n     * @returns The new list of {@link ListItem}s with the next queries groups inserted.\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems) {\n        return this.nextQueriesGroups;\n      }\n      if (this.nextQueriesAreOutdated) {\n        return this.injectedListItems;\n      }\n      if (this.hasNotEnoughListItems) {\n        return this.injectedListItems.concat(this.nextQueriesGroups[0] ?? []);\n      }\n      return this.nextQueriesGroups.reduce(\n        (items, nextQueriesGroup, index) => {\n          const targetIndex = this.offset + this.frequency * index;\n          if (targetIndex <= items.length) {\n            items.splice(targetIndex, 0, nextQueriesGroup);\n          }\n          return items;\n        },\n        [...this.injectedListItems]\n      );\n    }\n\n    /**\n     * Checks if the next queries are outdated taking into account the injected query.\n     *\n     * @returns True if the next queries are outdated, false if not.\n     * @internal\n     */\n    protected get nextQueriesAreOutdated(): boolean {\n      return (\n        !!this.injectedQuery &&\n        (this.$x.query.nextQueries !== this.injectedQuery ||\n          this.$x.status.nextQueries !== 'success')\n      );\n    }\n\n    /**\n     * Checks if the number of items is smaller than the offset so a group\n     * should be added to the injected items list.\n     *\n     * @returns True if a group should be added, false if not.\n     * @internal\n     */\n    protected get hasNotEnoughListItems(): boolean {\n      return (\n        !this.showOnlyAfterOffset &&\n        !this.hasMoreItems &&\n        this.injectedListItems !== undefined &&\n        this.injectedListItems.length > 0 &&\n        this.offset > this.injectedListItems.length\n      );\n    }\n  }\n","<template>\n  <NoElement>\n    <!--\n      @slot Next queries list layout.\n        @binding {SearchItem[]} items - Next queries groups plus the injected list items to\n        render.\n        @binding {Vue | string} animation - Animation to animate the elements.\n    -->\n    <slot v-bind=\"{ items, animation }\">\n      <ItemsList :animation=\"animation\" :items=\"items\">\n        <template v-for=\"(_, slotName) in $scopedSlots\" v-slot:[slotName]=\"{ item }\">\n          <slot :name=\"slotName\" :item=\"item\" />\n        </template>\n      </ItemsList>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { NextQuery } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { groupItemsBy } from '../../../utils/array';\n  import { ListItem } from '../../../utils/types';\n  import { NextQueriesGroup } from '../types';\n  import { nextQueriesXModule } from '../x-module';\n  import { XInject } from '../../../components/decorators/injection.decorators';\n  import { HAS_MORE_ITEMS_KEY, QUERY_KEY } from '../../../components/decorators/injection.consts';\n\n  /**\n   * Component that inserts groups of next queries in different positions of the injected search\n   * items list, based on the provided configuration.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueriesList extends mixins(ItemsListInjectionMixin) {\n    /**\n     * Animation component that will be used to animate the next queries groups.\n     *\n     * @public\n     */\n    @Prop()\n    protected animation?: Vue | string;\n\n    /**\n     * The first index to insert a group of next queries at.\n     *\n     * @public\n     */\n    @Prop({ default: 24 })\n    public offset!: number;\n\n    /**\n     * The items cycle size to keep inserting next queries groups at.\n     *\n     * @public\n     */\n    @Prop({ default: 24 })\n    public frequency!: number;\n\n    /**\n     * The maximum amount of next queries to add in a single group.\n     *\n     * @public\n     */\n    @Prop({ default: 4 })\n    public maxNextQueriesPerGroup!: number;\n\n    /**\n     * The maximum number of groups to insert into the injected list items list.\n     *\n     * @public\n     */\n    @Prop()\n    public maxGroups!: number;\n\n    /**\n     * Determines if a group is added to the injected items list in case the number\n     * of items is smaller than the offset.\n     *\n     * @public\n     */\n    @Prop({ default: false })\n    public showOnlyAfterOffset!: boolean;\n\n    /**\n     * The state next queries.\n     *\n     * @internal\n     */\n    @Getter('nextQueries', 'nextQueries')\n    public nextQueries!: NextQuery[];\n\n    /**\n     * Injected query, updated when the related request(s) have succeeded.\n     */\n    @XInject(QUERY_KEY)\n    public injectedQuery!: string | undefined;\n\n    /**\n     * Indicates if there are more available results than the injected.\n     */\n    @XInject(HAS_MORE_ITEMS_KEY)\n    public hasMoreItems!: boolean;\n\n    /**\n     * The grouped next queries based on the given config.\n     *\n     * @returns A list of next queries groups.\n     * @internal\n     */\n    protected get nextQueriesGroups(): NextQueriesGroup[] {\n      return Object.values(\n        groupItemsBy(this.nextQueries, (_, index) =>\n          Math.floor(index / this.maxNextQueriesPerGroup)\n        )\n      )\n        .slice(0, this.maxGroups)\n        .map(nextQueries => ({\n          modelName: 'NextQueriesGroup' as const,\n          id: nextQueries.map(nextQuery => nextQuery.query).join(','),\n          nextQueries\n        }));\n    }\n\n    /**\n     * New list of {@link ListItem}s to render.\n     *\n     * @returns The new list of {@link ListItem}s with the next queries groups inserted.\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems) {\n        return this.nextQueriesGroups;\n      }\n      if (this.nextQueriesAreOutdated) {\n        return this.injectedListItems;\n      }\n      if (this.hasNotEnoughListItems) {\n        return this.injectedListItems.concat(this.nextQueriesGroups[0] ?? []);\n      }\n      return this.nextQueriesGroups.reduce(\n        (items, nextQueriesGroup, index) => {\n          const targetIndex = this.offset + this.frequency * index;\n          if (targetIndex <= items.length) {\n            items.splice(targetIndex, 0, nextQueriesGroup);\n          }\n          return items;\n        },\n        [...this.injectedListItems]\n      );\n    }\n\n    /**\n     * Checks if the next queries are outdated taking into account the injected query.\n     *\n     * @returns True if the next queries are outdated, false if not.\n     * @internal\n     */\n    protected get nextQueriesAreOutdated(): boolean {\n      return (\n        !!this.injectedQuery &&\n        (this.$x.query.nextQueries !== this.injectedQuery ||\n          this.$x.status.nextQueries !== 'success')\n      );\n    }\n\n    /**\n     * Checks if the number of items is smaller than the offset so a group\n     * should be added to the injected items list.\n     *\n     * @returns True if a group should be added, false if not.\n     * @internal\n     */\n    protected get hasNotEnoughListItems(): boolean {\n      return (\n        !this.showOnlyAfterOffset &&\n        !this.hasMoreItems &&\n        this.injectedListItems !== undefined &&\n        this.injectedListItems.length > 0 &&\n        this.offset > this.injectedListItems.length\n      );\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits no events.\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend microservice required\nTo use this component, the <b>QuerySignals</b> microservice must be\nimplemented.\n:::\n<!-- prettier-ignore-end -->\n\nUsually, this component is going to be used together with the `ResultsList` one. Next queries groups\nwill be inserted between the results, guiding users to discover new searches directly from the\nresults list.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <NextQueriesList />\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'NextQueriesListDemo',\n    components: {\n      NextQueriesList,\n      ResultsList,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with the index that next queries groups are inserted at\n\nThe component allows to customise where are the next queries groups inserted. In the following\nexample, the first group of next queries will be inserted at the index `48` (`offset`), and then a\nsecond group will be inserted at index `120` because of the `frequency` prop configured to `72`.\nFinally, a third group will be inserted at index `192`. Because `maxGroups` is configured to `3`, no\nmore groups will be inserted. Each one of this groups will have up to `6` next queries\n(`maxNextQueriesPerGroup`).\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <NextQueriesList :offset=\"48\" :frequency=\"72\" :maxNextQueriesPerGroup=\"6\" :maxGroups=\"3\" />\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'NextQueriesListDemo',\n    components: {\n      NextQueriesList,\n      ResultsList,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Showing/hiding first next queries group when no more items\n\nBy default, the first next query group will be inserted when the total number of results is smaller\nthan the offset, but this behavior can be disabled setting the `showOnlyAfterOffset` to `true`.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <NextQueriesList\n        :offset=\"48\"\n        :frequency=\"72\"\n        :maxNextQueriesPerGroup=\"1\"\n        :showOnlyAfterOffset=\"true\"\n      />\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'NextQueriesListDemo',\n    components: {\n      NextQueriesList,\n      ResultsList,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Customise the layout of the component\n\nThis component will render by default the `id` of each search item, both the injected, and for the\ngroups of next queries generated, but the common case is to integrate it with another layout\ncomponent, for example the `BaseGrid`. To do so, you can use the `default` slot\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <NextQueriesList\n        :offset=\"48\"\n        :frequency=\"72\"\n        :maxNextQueriesPerGroup=\"6\"\n        :maxGroups=\"3\"\n        #default=\"{ items }\"\n      >\n        <BaseGrid :items=\"items\" :animation=\"animation\">\n          <template #next-queries-group=\"{ item }\">\n            <span>NextQueriesGroup: {{ item.queries.join(', ') }}</span>\n          </template>\n          <template #result=\"{ item }\">\n            <span>Result: {{ item.name }}</span>\n          </template>\n          <template #default=\"{ item }\">\n            <span>Default: {{ item }}</span>\n          </template>\n        </BaseGrid>\n      </NextQueriesList>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { BaseGrid } from '@empathyco/x-components';\n\n  export default {\n    name: 'NextQueriesListDemo',\n    components: {\n      NextQueriesList,\n      ResultsList,\n      BaseGrid,\n      SearchInput\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NextQuery, PreviewResults } from '@empathyco/x-types';\n  import { Dictionary } from '@empathyco/x-utils';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { nextQueriesXModule } from '../x-module';\n  import { State } from '../../../components/decorators/store.decorators';\n\n  /**\n   * Retrieves a preview of the results of a next query and exposes them in the default slot,\n   * along with the next query and the totalResults of the search request.\n   * By default, it renders the names of the results.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueryPreview extends Vue {\n    /**\n     * The next query to retrieve the results preview.\n     *\n     * @public\n     */\n    @Prop({\n      required: true\n    })\n    protected suggestion!: NextQuery;\n\n    /**\n     * Number of suggestion results to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The results preview of the next queries mounted.\n     * It is a dictionary, indexed by the next query query.\n     */\n    @State('nextQueries', 'resultsPreview')\n    public previewResults!: Dictionary<PreviewResults>;\n\n    /**\n     * The component emits the NextQueryPreviewMountedHook event to retrieve the results preview\n     * of the next query.\n     */\n    mounted(): void {\n      this.$x.emit('NextQueryPreviewMountedHook', this.suggestion.query);\n    }\n\n    /**\n     * Gets from the state the results preview of the next query.\n     *\n     * @returns The results preview of the actual next query.\n     */\n    public get suggestionResults(): PreviewResults | undefined {\n      const previewResults = this.previewResults[this.suggestion.query];\n\n      return previewResults\n        ? {\n            ...previewResults,\n            items: previewResults.items.slice(0, this.maxItemsToRender)\n          }\n        : undefined;\n    }\n  }\n","<template>\n  <ul v-if=\"suggestionResults\" data-test=\"next-query-preview\" class=\"x-next-query-preview\">\n    <!--\n      @slot Next Query Preview default slot.\n          @binding {NextQuery} suggestion - Next Query suggestion data\n          @binding {Result[]} results - The results preview of the next query\n          @binding {number} totalResults - The total results of the search request\n    -->\n    <slot\n      :suggestion=\"suggestion\"\n      :results=\"suggestionResults.items\"\n      :totalResults=\"suggestionResults.totalResults\"\n    >\n      <li\n        v-for=\"result in suggestionResults.items\"\n        :key=\"result.id\"\n        class=\"x-next-query-preview__item\"\n        data-test=\"next-query-preview-item\"\n      >\n        <!--\n          @slot Next Query Preview result slot.\n              @binding {Result} result - A Next Query Preview result\n        -->\n        <slot name=\"result\" :result=\"result\">\n          <span data-test=\"result-name\">{{ result.name }}</span>\n        </slot>\n      </li>\n    </slot>\n  </ul>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NextQuery, PreviewResults } from '@empathyco/x-types';\n  import { Dictionary } from '@empathyco/x-utils';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { nextQueriesXModule } from '../x-module';\n  import { State } from '../../../components/decorators/store.decorators';\n\n  /**\n   * Retrieves a preview of the results of a next query and exposes them in the default slot,\n   * along with the next query and the totalResults of the search request.\n   * By default, it renders the names of the results.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(nextQueriesXModule)]\n  })\n  export default class NextQueryPreview extends Vue {\n    /**\n     * The next query to retrieve the results preview.\n     *\n     * @public\n     */\n    @Prop({\n      required: true\n    })\n    protected suggestion!: NextQuery;\n\n    /**\n     * Number of suggestion results to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * The results preview of the next queries mounted.\n     * It is a dictionary, indexed by the next query query.\n     */\n    @State('nextQueries', 'resultsPreview')\n    public previewResults!: Dictionary<PreviewResults>;\n\n    /**\n     * The component emits the NextQueryPreviewMountedHook event to retrieve the results preview\n     * of the next query.\n     */\n    mounted(): void {\n      this.$x.emit('NextQueryPreviewMountedHook', this.suggestion.query);\n    }\n\n    /**\n     * Gets from the state the results preview of the next query.\n     *\n     * @returns The results preview of the actual next query.\n     */\n    public get suggestionResults(): PreviewResults | undefined {\n      const previewResults = this.previewResults[this.suggestion.query];\n\n      return previewResults\n        ? {\n            ...previewResults,\n            items: previewResults.items.slice(0, this.maxItemsToRender)\n          }\n        : undefined;\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the `NextQueryPreviewMountedHook` when it is mounted.\n\n## See it in action\n\nHere you have a basic example of how the NextQueryPreview is rendered. Keep in mind that this\ncomponent is intended to be used overriding its default slot. By default it will only render the\nnames of the results.\n\n```vue live\n<template>\n  <NextQueryPreview :suggestion=\"suggestion\" />\n</template>\n\n<script>\n  import { NextQueryPreview } from '@empathyco/x-components/next-queries';\n\n  export default {\n    name: 'NextQueryPreviewDemo',\n    components: {\n      NextQueryPreview\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with the default slot\n\nIn this example, the results will be rendered inside a sliding panel.\n\n```vue live\n<template>\n  <NextQueryPreview :suggestion=\"suggestion\" #default=\"{ totalResults, results }\">\n    <p>Total results: {{ totalResults }}</p>\n    <SlidingPanel :resetOnContentChange=\"false\">\n      <article\n        v-for=\"result in results\"\n        :key=\"result.id\"\n        class=\"x-result\"\n        style=\"max-width: 300px; overflow: hidden\"\n      >\n        <BaseResultLink :result=\"result\">\n          <BaseResultImage :result=\"result\" class=\"x-result__picture\" />\n        </BaseResultLink>\n        <div class=\"x-result__description\">\n          <BaseResultLink :result=\"result\">\n            <h1 class=\"x-title3\">{{ result.name }}</h1>\n          </BaseResultLink>\n        </div>\n      </article>\n    </SlidingPanel>\n  </NextQueryPreview>\n</template>\n\n<script>\n  import { NextQueryPreview } from '@empathyco/x-components/next-queries';\n  import { SlidingPanel, BaseResultLink, BaseResultImage } from '@empathyco/x-components';\n\n  export default {\n    name: 'NextQueryPreviewDemoOverridingSlot',\n    components: {\n      NextQueryPreview,\n      SlidingPanel,\n      BaseResultLink,\n      BaseResultImage\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with the result slot\n\nThe component exposes a slot to override the result content, without modifying the list.\n\nIn this example, the ID of the results will be rendered along with the name.\n\n```vue\n<template>\n  <NextQueryPreview :suggestion=\"suggestion\" #result=\"{ result }\">\n    <span>{{ result.id }}</span>\n    <span>{{ result.name }}</span>\n  </NextQueryPreview>\n</template>\n\n<script>\n  import { NextQueryPreview } from '@empathyco/x-components/next-queries';\n\n  export default {\n    name: 'NextQueryPreviewDemoOverridingResultSlot',\n    components: {\n      NextQueryPreview\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the suggestions has been limited to render a maximum of 4 items.\n\n```vue\n<template>\n  <NextQueryPreview\n    :maxItemsToRender=\"maxItemsToRender\"\n    :suggestion=\"suggestion\"\n    #default=\"{ results }\"\n  >\n    <BaseGrid #default=\"{ item }\" :items=\"results\">\n      <BaseResultLink :result=\"item\">\n        <BaseResultImage :result=\"item\" />\n      </BaseResultLink>\n    </BaseGrid>\n  </NextQueryPreview>\n</template>\n\n<script>\n  import { BaseGrid, BaseResultImage, BaseResultLink } from '@empathyco/x-components';\n  import { NextQueryPreview } from '@empathyco/x-components/next-queries';\n\n  export default {\n    name: 'NextQueryPreviewDemo',\n    components: {\n      BaseGrid,\n      BaseResultImage,\n      BaseResultLink,\n      NextQueryPreview\n    },\n    data() {\n      return {\n        maxItemsToRender: 4,\n        suggestion: {\n          modelName: 'NextQuery',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <div class=\"x-flex x-flex-col x-gap-4\">\n    <h1 class=\"x-title4 x-title4-sm x-py-8 x-uppercase desktop:x-p-0\">\n      {{ $t('nextQueries.title') }}\n    </h1>\n    <NextQueries\n      :animation=\"animation\"\n      :max-items-to-render=\"3\"\n      class=\"x-flex x-flex-col x-gap-8 desktop:x-gap-4\"\n    >\n      <template #suggestion=\"{ suggestion }\">\n        <NextQuery\n          class=\"x-suggestion-lg x-suggestion desktop:x-suggestion-md\"\n          :suggestion=\"suggestion\"\n        >\n          <CuratedCheckIcon v-if=\"suggestion.isCurated\" class=\"x-icon-lg desktop:x-icon-md\" />\n          <LightBulbOn v-else class=\"x-icon-lg desktop:x-icon-md\" />\n          <span>{{ suggestion.query }}</span>\n        </NextQuery>\n      </template>\n    </NextQueries>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { AnimationProp, CuratedCheckIcon, LightBulbOn } from '@empathyco/x-components';\n  import { NextQueries, NextQuery } from '@empathyco/x-components/next-queries';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      CuratedCheckIcon,\n      LightBulbOn,\n      NextQuery,\n      NextQueries\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n</script>\n<style lang=\"scss\"></style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { AnimationProp, CuratedCheckIcon, LightBulbOn } from '@empathyco/x-components';\n  import { NextQueries, NextQuery } from '@empathyco/x-components/next-queries';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      CuratedCheckIcon,\n      LightBulbOn,\n      NextQuery,\n      NextQueries\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n","import { Suggestion, PopularSearchesRequest } from '@empathyco/x-types';\n// eslint-disable-next-line max-len\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { PopularSearchesActionContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  PopularSearchesActionContext,\n  PopularSearchesRequest,\n  Suggestion[]\n>({\n  fetch({ dispatch }, request) {\n    return dispatch('fetchSuggestions', request);\n  },\n  onSuccess({ commit }, suggestions) {\n    commit('setSuggestions', suggestions);\n  }\n});\n\n/**\n * Default implementation for {@link PopularSearchesActions.fetchAndSaveSuggestions} action.\n *\n * @public\n */\nexport const fetchAndSaveSuggestions = fetchAndSave;\n\n/**\n * Default implementation for {@link PopularSearchesActions.cancelFetchAndSaveSuggestions} action.\n *\n * @public\n */\nexport const cancelFetchAndSaveSuggestions = cancelPrevious;\n","import { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveSuggestions,\n  fetchAndSaveSuggestions\n} from './actions/fetch-and-save-suggestions.action';\nimport { fetchSuggestions } from './actions/fetch-suggestions.action';\nimport { popularSearches } from './getters/popular-searches.getter';\nimport { request } from './getters/request.getter';\nimport { PopularSearchesXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the next-queries module.\n *\n * @internal\n */\nexport const popularSearchesXStoreModule: PopularSearchesXStoreModule = {\n  state: () => ({\n    popularSearches: [],\n    searchedQueries: [],\n    status: 'initial',\n    config: {\n      hideSessionQueries: true,\n      maxItemsToRequest: 20\n    },\n    params: {}\n  }),\n  getters: {\n    request,\n    popularSearches\n  },\n  mutations: {\n    setSuggestions(state, suggestions) {\n      state.popularSearches = suggestions;\n    },\n    setSearchedQueries(state, searchedQueries) {\n      state.searchedQueries = searchedQueries;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    }\n  },\n  actions: {\n    cancelFetchAndSaveSuggestions,\n    fetchSuggestions,\n    fetchAndSaveSuggestions\n  }\n};\n","import { PopularSearchesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link PopularSearchesGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the popular\n * searches module.\n *\n * @returns The popular searches request to fetch data from the API.\n *\n * @public\n */\nexport const request: PopularSearchesXStoreModule['getters']['request'] = ({ config, params }) => {\n  return {\n    rows: config.maxItemsToRequest,\n    start: 0,\n    extraParams: params\n  };\n};\n","import { HistoryQuery } from '@empathyco/x-types';\nimport { PopularSearchesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link PopularSearchesGetters.popularSearches} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the\n * popular searches module.\n * @returns The popular searches, filtered by the searched queries or not, depending of the\n * `hideSessionQueries` config.\n *\n * @public\n */\nexport const popularSearches: PopularSearchesXStoreModule['getters']['popularSearches'] = ({\n  popularSearches,\n  searchedQueries,\n  config\n}) => {\n  const queriesToFilter = searchedQueries.map((historyQuery: HistoryQuery) => historyQuery.query);\n  return config.hideSessionQueries\n    ? popularSearches.filter(({ query }) => !queriesToFilter.includes(query))\n    : popularSearches;\n};\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { PopularSearchesXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link PopularSearchesActions.fetchSuggestions}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The popular searches request to make.\n * @returns A Promise of search response that resolves when it fetches the popular searches.\n *\n * @public\n */\nexport const fetchSuggestions: PopularSearchesXStoreModule['actions']['fetchSuggestions'] = (\n  _context,\n  request\n) => {\n  return XPlugin.adapter.popularSearches(request).then(({ suggestions }) => suggestions);\n};\n","import { createStoreEmitters } from '../../../store/utils/store-emitters.utils';\nimport { popularSearchesXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the popular-searches module.\n *\n * @internal\n */\nexport const popularSearchesEmitters = createStoreEmitters(popularSearchesXStoreModule, {\n  PopularSearchesRequestUpdated: {\n    selector: (_, getters) => getters.request\n  }\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch\n} from '../../wiring/namespaced-wires.factory';\nimport { NamespacedWireCommit } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `popularSearches` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'popularSearches';\n/**\n * WireDispatchfor {@link PopularSearchesXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n\n/**\n * WireCommit for {@link PopularSearchesXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n\n/**\n * Requests and stores the popular searches.\n *\n * @public\n */\nconst retrievePopularSuggestions = wireDispatch('fetchAndSaveSuggestions');\n\n/**\n * Sets the popular searches state `searchedQueries` with the list of history queries.\n *\n * @public\n */\nexport const setSearchedQueriesInPopularSearches = wireCommit('setSearchedQueries');\n\n/**\n * Sets the popular searches state `params`.\n *\n * @public\n */\nexport const setPopularSearchesExtraParams = wireCommit('setParams');\n\n/**\n * Wiring configuration for the popular searches modules.\n *\n * @internal\n */\nexport const popularSearchesWiring = createWiring({\n  PopularSearchesRequestUpdated: {\n    retrievePopularSuggestions\n  },\n  SessionHistoryQueriesChanged: {\n    setSearchedQueriesInPopularSearches\n  },\n  ExtraParamsChanged: {\n    setPopularSearchesExtraParams\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { popularSearchesEmitters } from './store/emitters';\nimport { popularSearchesXStoreModule } from './store/module';\nimport { PopularSearchesXStoreModule } from './store/types';\nimport { popularSearchesWiring } from './wiring';\n\n/**\n * PopularSearches {@link XModule} alias.\n *\n * @public\n */\nexport type PopularSearchesXModule = XModule<PopularSearchesXStoreModule>;\n\n/**\n * Popular searches {@link XModule} implementation. This module is auto-registered as soon as\n * you import any component from the `popular-searches` entry point.\n *\n * @public\n */\nexport const popularSearchesXModule: PopularSearchesXModule = {\n  name: 'popularSearches',\n  storeModule: popularSearchesXStoreModule,\n  storeEmitters: popularSearchesEmitters,\n  wiring: popularSearchesWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { popularSearchesXModule } from '../x-module';\n\n  /**\n   * Renders a popular search item which receives the suggestion that will be rendered as a prop. It\n   * exposes a default slot to change the popular search content. If the slot is not overridden,\n   * it will render the suggestion query by default.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(popularSearchesXModule)]\n  })\n  export default class PopularSearch extends Vue {\n    /**\n     * The suggestion to render and use in the default slot.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: Suggestion;\n\n    /**\n     * Events list which are going to be emitted when a popular search is selected.\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserSelectedAPopularSearch: this.suggestion\n      };\n    }\n  }\n","<template>\n  <BaseSuggestion\n    class=\"x-popular-search\"\n    :suggestion=\"suggestion\"\n    :suggestionSelectedEvents=\"events\"\n    data-test=\"popular-search\"\n    feature=\"popular_search\"\n    #default=\"baseScope\"\n  >\n    <!-- eslint-disable max-len -->\n    <!--\n        @slot Popular Search content\n          @binding {Object} v-bind - `BaseSuggestion` default slot scope: **suggestion** <code>Suggestion</code> - Suggestion data<br /> **query** <code>string</code> - The query that the suggestion belongs to<br /> **filter** <code>Filter \\| undefined</code> - Suggestion's filter\n    -->\n    <!-- eslint-enable max-len -->\n    <slot v-bind=\"{ ...baseScope }\" />\n  </BaseSuggestion>\n</template>\n\n<script lang=\"ts\">\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import BaseSuggestion from '../../../components/suggestions/base-suggestion.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { popularSearchesXModule } from '../x-module';\n\n  /**\n   * Renders a popular search item which receives the suggestion that will be rendered as a prop. It\n   * exposes a default slot to change the popular search content. If the slot is not overridden,\n   * it will render the suggestion query by default.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseSuggestion },\n    mixins: [xComponentMixin(popularSearchesXModule)]\n  })\n  export default class PopularSearch extends Vue {\n    /**\n     * The suggestion to render and use in the default slot.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected suggestion!: Suggestion;\n\n    /**\n     * Events list which are going to be emitted when a popular search is selected.\n     *\n     * @returns The {@link XEvent | XEvents} to emit.\n     * @public\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserSelectedAPopularSearch: this.suggestion\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis components expects just a suggestion as a prop to be rendered. It has a slot to override the\ncontent. By default, it renders the suggestion query of the popular search.\n\n### Basic Usage\n\n```vue live\n<template>\n  <PopularSearch :suggestion=\"suggestion\" />\n</template>\n\n<script>\n  import { PopularSearch } from '@empathyco/x-components/popular-searches';\n  export default {\n    name: 'PopularSearchDemo',\n    components: {\n      PopularSearch\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'PopularSearch',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Custom Usage\n\n```vue live\n<template>\n  <PopularSearch :suggestion=\"suggestion\">\n    <template #default=\"{ suggestion }\">\n      <TrendingIcon />\n      <span :aria-label=\"suggestion.query\">{{ suggestion.query }}</span>\n    </template>\n  </PopularSearch>\n</template>\n\n<script>\n  import { PopularSearch } from '@empathyco/x-components/popular-searches';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'PopularSearchDemo',\n    components: {\n      PopularSearch,\n      TrendingIcon\n    },\n    data() {\n      return {\n        suggestion: {\n          modelName: 'PopularSearch',\n          query: 'tshirt',\n          facets: []\n        }\n      };\n    }\n  };\n</script>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserSelectedAPopularSearch`: the event is emitted after the user clicks the button. The event\n  payload is the popular search data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { popularSearchesXModule } from '../x-module';\n  import PopularSearch from './popular-search.vue';\n\n  /**\n   * Simple popular-searches component that renders a list of suggestions, allowing the user to\n   * select one of them, and emitting the needed events.\n   * A popular search is just a query that has been searched a lot in a certain period and may\n   * optionally have associated a set of filters.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { PopularSearch, BaseSuggestions },\n    mixins: [xComponentMixin(popularSearchesXModule)]\n  })\n  export default class PopularSearches extends Vue {\n    /**\n     * The list of popular searches.\n     *\n     * @internal\n     */\n    @Getter('popularSearches', 'popularSearches')\n    public popularSearches!: Suggestion[];\n  }\n","<template>\n  <BaseSuggestions\n    v-bind=\"$attrs\"\n    :suggestions=\"popularSearches\"\n    class=\"x-popular-searches\"\n    data-test=\"popular-searches\"\n  >\n    <template #default=\"baseScope\">\n      <!-- eslint-disable max-len -->\n      <!--\n        @slot Popular Search item\n            @binding {Object} v-bind - Popular Search suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - Popular Search suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - Popular Search suggestion index\n      -->\n      <!-- eslint-enable max-len -->\n      <slot name=\"suggestion\" v-bind=\"{ ...baseScope }\">\n        <PopularSearch\n          :suggestion=\"baseScope.suggestion\"\n          class=\"x-popular-searches__suggestion x-suggestion\"\n          #default=\"popularSearchScope\"\n        >\n          <!-- eslint-disable max-len -->\n          <!--\n            @slot Popular Search content\n                @binding {Object} v-bind - Popular Search suggestion attributes:<br />&nbsp;&nbsp;- **suggestion** <code>Suggestion</code> - Popular Search suggestion data<br />&nbsp;&nbsp;- **index** <code>number</code> - Popular Search suggestion index\n          -->\n          <!-- eslint-enable max-len -->\n          <slot name=\"suggestion-content\" v-bind=\"{ ...baseScope, ...popularSearchScope }\" />\n        </PopularSearch>\n      </slot>\n    </template>\n  </BaseSuggestions>\n</template>\n\n<script lang=\"ts\">\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseSuggestions from '../../../components/suggestions/base-suggestions.vue';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { popularSearchesXModule } from '../x-module';\n  import PopularSearch from './popular-search.vue';\n\n  /**\n   * Simple popular-searches component that renders a list of suggestions, allowing the user to\n   * select one of them, and emitting the needed events.\n   * A popular search is just a query that has been searched a lot in a certain period and may\n   * optionally have associated a set of filters.\n   *\n   * @public\n   */\n  @Component({\n    inheritAttrs: false,\n    components: { PopularSearch, BaseSuggestions },\n    mixins: [xComponentMixin(popularSearchesXModule)]\n  })\n  export default class PopularSearches extends Vue {\n    /**\n     * The list of popular searches.\n     *\n     * @internal\n     */\n    @Getter('popularSearches', 'popularSearches')\n    public popularSearches!: Suggestion[];\n  }\n</script>\n\n<!--eslint-disable max-len -->\n<docs lang=\"mdx\">\n## Inherited props\n\nThis component inherits the [`BaseSuggestions`](../base-components/x-components.base-suggestions.md)\nprops.\n\n| Name               | Description                                                       | Type     | Default |\n| ------------------ | ----------------------------------------------------------------- | -------- | ------- |\n| `animation`        | Animation component that will be used to animate the suggestions. | `Vue`    | `\"ul\"`  |\n| `maxItemsToRender` | Number of popular searches to be rendered.                        | `number` |         |\n\n## Examples\n\n### Default Usage\n\nYou don't need to pass any props, or slots. Simply add the component, and when it has any popular\nsearches it will show them.\n\n```vue live\n<template>\n  <PopularSearches />\n</template>\n\n<script>\n  import { PopularSearches } from '@empathyco/x-components/popular-searches';\n  export default {\n    name: 'PopularSearchesDemo',\n    components: {\n      PopularSearches\n    }\n  };\n</script>\n```\n\nThe component has two optional props. `animation` to render the component with an animation and\n`maxItemsToRender` to limit the number of popular searches will be rendered (by default it is 5).\n\n```vue live\n<template>\n  <PopularSearches :animation=\"'FadeAndSlide'\" :maxItemsToRender=\"10\" />\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { PopularSearches } from '@empathyco/x-components/popular-searches';\n  import FadeAndSlide from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('FadeAndSlide', FadeAndSlide);\n  export default {\n    name: 'PopularSearchesDemo',\n    components: {\n      PopularSearches,\n      FadeAndSlide\n    }\n  };\n</script>\n```\n\n### Overriding Popular Search's Content\n\nYou can use your custom implementation of the Popular Search's content. In the example below,\ninstead of using the default Popular Search's content, an icon is added, as well as a span with the\nquery of the Popular Search's suggestion.\n\n```vue live\n<template>\n  <PopularSearches>\n    <template #suggestion-content=\"{ suggestion }\">\n      <TrendingIcon />\n      <span class=\"x-popular-search__query\">{{ suggestion.query }}</span>\n    </template>\n  </PopularSearches>\n</template>\n\n<script>\n  import { PopularSearches } from '@empathyco/x-components/popular-searches';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'PopularSearchesDemo',\n    components: {\n      PopularSearches,\n      TrendingIcon\n    }\n  };\n</script>\n```\n\n### Adding a Custom Popular Search Item\n\nYou can use your custom implementation for the whole Popular Search item. In the example below, we\nchange the default implementation of the Popular Search in Popular Searches. A custom Popular Search\nimplementation is added, it has an image and a span as content (as in the previous example). Also, a\nbutton with a user customized behaviour is added at the same hierarchical level as the Popular\nSearch component.\n\n```vue live\n<template>\n  <PopularSearches>\n    <template #suggestion=\"{ suggestion }\">\n      <PopularSearch :suggestion=\"suggestion\">\n        <template #default=\"{ suggestion }\">\n          <TrendingIcon />\n          <span class=\"x-popular-search__query\">{{ suggestion.query }}</span>\n        </template>\n      </PopularSearch>\n      <button>Custom Behaviour</button>\n    </template>\n  </PopularSearches>\n</template>\n\n<script>\n  import { PopularSearches, PopularSearch } from '@empathyco/x-components/popular-searches';\n  import { TrendingIcon } from '@empathyco/x-components';\n\n  export default {\n    name: 'PopularSearchesDemo',\n    components: {\n      PopularSearches,\n      PopularSearch,\n      TrendingIcon\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <div class=\"x-flex x-flex-col x-gap-4\">\n    <h1 class=\"x-title4 x-title4-sm x-uppercase\">\n      {{ $t('popularSearches.title') }}\n    </h1>\n    <PopularSearches\n      :animation=\"animation\"\n      :max-items-to-render=\"4\"\n      class=\"x-flex x-flex-col x-gap-8 desktop:x-gap-4\"\n    >\n      <template #suggestion=\"{ suggestion }\">\n        <PopularSearch\n          class=\"x-suggestion-lg x-suggestion desktop:x-suggestion-md\"\n          :suggestion=\"suggestion\"\n        >\n          <TrendingIcon class=\"x-icon-lg desktop:x-icon-md\" />\n          <span>{{ suggestion.query }}</span>\n        </PopularSearch>\n      </template>\n    </PopularSearches>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { AnimationProp, TrendingIcon } from '@empathyco/x-components';\n  import { PopularSearches, PopularSearch } from '@empathyco/x-components/popular-searches';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      TrendingIcon,\n      PopularSearches,\n      PopularSearch\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n</script>\n<style lang=\"scss\"></style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { AnimationProp, TrendingIcon } from '@empathyco/x-components';\n  import { PopularSearches, PopularSearch } from '@empathyco/x-components/popular-searches';\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    components: {\n      TrendingIcon,\n      PopularSearches,\n      PopularSearch\n    },\n    props: {\n      animation: {\n        type: AnimationProp,\n        required: true\n      }\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseIdModalOpen,\n    BaseScroll,\n    BaseKeyboardNavigation,\n    CrossTinyIcon,\n    Highlight,\n    HistoryIcon,\n    SettingsIcon,\n    StaggeredFadeAndSlide,\n    TrashIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { Empathize } from '@empathyco/x-components/empathize';\n  import {\n    ClearHistoryQueries,\n    HistoryQueries,\n    HistoryQuery\n  } from '@empathyco/x-components/history-queries';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import { usePredictiveHelpers } from '../../composables/use-predictive-helpers.composable';\n  import SlidingRecommendations from './sliding-recommendations.vue';\n  import PredictiveIdentifierResults from './predictive-identifier-results.vue';\n  import PredictiveQuerySuggestions from './predictive-query-suggestions.vue';\n  import PredictiveNextQueries from './predictive-next-queries.vue';\n  import PredictivePopularSearches from './predictive-popular-searches.vue';\n\n  export default defineComponent({\n    components: {\n      BaseScroll,\n      PredictivePopularSearches,\n      PredictiveNextQueries,\n      PredictiveQuerySuggestions,\n      PredictiveIdentifierResults,\n      BaseIdModalOpen,\n      BaseKeyboardNavigation,\n      ClearHistoryQueries,\n      CrossTinyIcon,\n      Empathize,\n      Highlight,\n      HistoryQuery,\n      HistoryIcon,\n      HistoryQueries,\n      SlidingRecommendations,\n      SettingsIcon,\n      TrashIcon\n    },\n    setup() {\n      const empathizeAnimation = animateScale();\n      const suggestionsAnimation = StaggeredFadeAndSlide;\n      const { isDesktopOrGreater, isTabletOrLess } = useDevice();\n\n      const {\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      } = usePredictiveHelpers();\n\n      return {\n        isDesktopOrGreater,\n        isTabletOrLess,\n        empathizeAnimation,\n        suggestionsAnimation,\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      };\n    }\n  });\n","<template>\n  <Empathize\n    :animation=\"empathizeAnimation\"\n    class=\"x-bg-neutral-0 desktop:x-z-[1] desktop:x-w-full\"\n  >\n    <component\n      :is=\"isDesktopOrGreater ? 'div' : 'BaseScroll'\"\n      v-if=\"showEmpathize || showIdentifierResults\"\n      class=\"x-h-full desktop:x-my-16 desktop:x-ml-16\"\n    >\n      <div class=\"x-layout-item desktop:x-block\">\n        <BaseKeyboardNavigation\n          class=\"x-flex x-flex-col desktop:x-grid desktop:x-grid-cols-12 desktop:x-items-start desktop:x-gap-24\"\n          :navigationHijacker=\"navigationHijacker\"\n        >\n          <PredictiveIdentifierResults\n            v-if=\"showIdentifierResults\"\n            :animation=\"suggestionsAnimation\"\n          />\n\n          <div\n            v-else-if=\"showEmpathize\"\n            class=\"x-flex x-flex-col x-gap-8 x-pl-8 desktop:x-col-span-5 desktop:x-pl-0\"\n            :class=\"$x.query.searchBox ? 'desktop:x-gap-4' : 'desktop:x-gap-16'\"\n          >\n            <BaseIdModalOpen\n              v-if=\"isTabletOrLess && !$x.query.searchBox\"\n              modalId=\"my-history-aside\"\n              class=\"x-button-neutral x-button-sm x-button-tight x-self-end x-pr-8\"\n            >\n              {{ $t('myHistory.openButton') }}\n              <SettingsIcon class=\"x-icon-lg\" />\n            </BaseIdModalOpen>\n            <div v-if=\"showHistoryQueries\" class=\"x-flex x-flex-col x-gap-4\">\n              <div v-if=\"!$x.query.searchBox\" class=\"x-flex x-items-center\">\n                <h1 class=\"x-title4 x-title4-sm x-flex-1 x-uppercase\">\n                  {{ $t('historyQueries.title') }}\n                </h1>\n                <ClearHistoryQueries class=\"x-button-neutral x-button-sm x-button-tight x-px-8\">\n                  <TrashIcon v-if=\"isTabletOrLess\" class=\"x-icon-lg\" />\n                  <span v-else>{{ $t('historyQueries.clear') }}</span>\n                </ClearHistoryQueries>\n              </div>\n\n              <HistoryQueries\n                :animation=\"suggestionsAnimation\"\n                :max-items-to-render=\"$x.query.searchBox ? 2 : 4\"\n                suggestionItemClass=\"x-w-full\"\n                class=\"-x-mr-2 x-flex x-flex-col x-gap-8 desktop:x-gap-4\"\n              >\n                <template #suggestion=\"{ suggestion }\">\n                  <HistoryQuery\n                    class=\"x-suggestion-group-lg desktop:x-suggestion-group-md\"\n                    :suggestion=\"suggestion\"\n                    suggestionClass=\"x-suggestion x-suggestion-lg desktop:x-suggestion-md\"\n                  >\n                    <template #default=\"{ query }\">\n                      <HistoryIcon class=\"x-icon-lg desktop:x-icon-md\" />\n                      <Highlight :text=\"suggestion.query\" :highlight=\"query\" />\n                    </template>\n\n                    <template #remove-button-content>\n                      <span\n                        :aria-label=\"\n                          $t('historyQueries.removeLabel', { suggestion: suggestion.query })\n                        \"\n                      >\n                        <CrossTinyIcon class=\"x-icon-lg desktop:x-icon-md\" />\n                      </span>\n                    </template>\n                  </HistoryQuery>\n                </template>\n              </HistoryQueries>\n            </div>\n\n            <PredictiveQuerySuggestions\n              v-if=\"showQuerySuggestions\"\n              :animation=\"suggestionsAnimation\"\n            />\n\n            <PredictiveNextQueries v-if=\"showNextQueries\" :animation=\"suggestionsAnimation\" />\n\n            <PredictivePopularSearches\n              v-if=\"showPopularSearches\"\n              :animation=\"suggestionsAnimation\"\n            />\n\n            <BaseIdModalOpen\n              v-if=\"isDesktopOrGreater && !$x.query.searchBox\"\n              modalId=\"my-history-aside\"\n              class=\"x-button-neutral x-button-sm x-button-tight x-self-start\"\n              data-test=\"my-history-button\"\n            >\n              <SettingsIcon />\n              {{ $t('myHistory.openButton') }}\n            </BaseIdModalOpen>\n          </div>\n\n          <SlidingRecommendations\n            v-if=\"isDesktopOrGreater && !$x.query.searchBox\"\n            class=\"x-col-span-7\"\n          />\n        </BaseKeyboardNavigation>\n      </div>\n      <SlidingRecommendations v-if=\"isTabletOrLess && !$x.query.searchBox\" />\n    </component>\n  </Empathize>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseIdModalOpen,\n    BaseScroll,\n    BaseKeyboardNavigation,\n    CrossTinyIcon,\n    Highlight,\n    HistoryIcon,\n    SettingsIcon,\n    StaggeredFadeAndSlide,\n    TrashIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { Empathize } from '@empathyco/x-components/empathize';\n  import {\n    ClearHistoryQueries,\n    HistoryQueries,\n    HistoryQuery\n  } from '@empathyco/x-components/history-queries';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import { usePredictiveHelpers } from '../../composables/use-predictive-helpers.composable';\n  import SlidingRecommendations from './sliding-recommendations.vue';\n  import PredictiveIdentifierResults from './predictive-identifier-results.vue';\n  import PredictiveQuerySuggestions from './predictive-query-suggestions.vue';\n  import PredictiveNextQueries from './predictive-next-queries.vue';\n  import PredictivePopularSearches from './predictive-popular-searches.vue';\n\n  export default defineComponent({\n    components: {\n      BaseScroll,\n      PredictivePopularSearches,\n      PredictiveNextQueries,\n      PredictiveQuerySuggestions,\n      PredictiveIdentifierResults,\n      BaseIdModalOpen,\n      BaseKeyboardNavigation,\n      ClearHistoryQueries,\n      CrossTinyIcon,\n      Empathize,\n      Highlight,\n      HistoryQuery,\n      HistoryIcon,\n      HistoryQueries,\n      SlidingRecommendations,\n      SettingsIcon,\n      TrashIcon\n    },\n    setup() {\n      const empathizeAnimation = animateScale();\n      const suggestionsAnimation = StaggeredFadeAndSlide;\n      const { isDesktopOrGreater, isTabletOrLess } = useDevice();\n\n      const {\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      } = usePredictiveHelpers();\n\n      return {\n        isDesktopOrGreater,\n        isTabletOrLess,\n        empathizeAnimation,\n        suggestionsAnimation,\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      };\n    }\n  });\n</script>\n<style lang=\"scss\">\n  .x-result-link:focus > * {\n    outline: -webkit-focus-ring-color auto 1px;\n  }\n</style>\n","import { SearchBoxXStoreModule, InputStatus } from '../types';\nimport { StateMachine } from '../../../../services/state-machine.service';\nimport { XEvent } from '../../../../wiring/events.types';\n\n/**\n * State machine that defines the different states through which the search box\n * can transition.\n */\nconst machine = new StateMachine<InputStatus, XEvent>({\n  initial: 'initial',\n  states: {\n    initial: {\n      UserAcceptedAQuery: 'filled',\n      UserIsTypingAQuery: 'typing'\n    },\n    typing: {\n      UserAcceptedAQuery: 'filled',\n      UserClearedQuery: 'empty'\n    },\n    filled: {\n      UserIsTypingAQuery: 'typing',\n      UserFocusedSearchBox: 'focused',\n      UserClearedQuery: 'empty'\n    },\n    empty: {\n      UserAcceptedAQuery: 'filled',\n      UserIsTypingAQuery: 'typing'\n    },\n    focused: {\n      UserBlurredSearchBox: 'filled',\n      UserClearedQuery: 'empty',\n      UserIsTypingAQuery: 'typing'\n    }\n  }\n});\n\n/**\n * Default implementation for the {@link SearchBoxActions.setInputStatus}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param event - The event used to transition the state machine.\n * @public\n */\nexport const setInputStatus: SearchBoxXStoreModule['actions']['setInputStatus'] = (\n  { commit },\n  event\n) => {\n  machine.transition(event);\n  commit('setInputStatus', machine.currentState);\n};\n","import { Machine } from './services.types';\n\n/**\n * Default implementation for the {@link StateMachine}.\n *\n * @public\n */\nexport class StateMachine<SomeStatus extends string, SomeEvent extends string> {\n  /**\n   * A {@link Machine} having the different steps transition.\n   *\n   * @internal\n   */\n  private machine: Machine<SomeStatus, SomeEvent>;\n  /**\n   * The current state of the machine.\n   *\n   * @public\n   */\n  public currentState: SomeStatus;\n\n  public constructor(machine: Machine<SomeStatus, SomeEvent>) {\n    this.machine = machine;\n    this.currentState = machine.initial;\n  }\n\n  /**\n   * Determines which state will be the next to be transitioned.\n   *\n   * @param event - The event to determine which state is the new one to be\n   * transitioned.\n   *\n   * @public\n   */\n  transition(event: SomeEvent): void {\n    const currentState = this.machine.states[this.currentState];\n    if (currentState[event]) {\n      /* Typescript is not detecting the type guard in the previous if\n      so we have to force it to be defined */\n      this.currentState = currentState[event]!;\n    }\n  }\n}\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { SearchBoxXStoreModule } from './types';\nimport { setInputStatus } from './actions/set-input-status.action';\n\n/**\n * {@link XStoreModule} For the search-box module.\n *\n * @internal\n */\nexport const searchBoxXStoreModule: SearchBoxXStoreModule = {\n  state: () => ({\n    query: '',\n    inputStatus: 'initial'\n  }),\n  getters: {\n    trimmedQuery(state) {\n      return state.query.trim();\n    }\n  },\n  mutations: {\n    setQuery,\n    setInputStatus(state, status) {\n      state.inputStatus = status;\n    }\n  },\n  actions: {\n    setUrlParams,\n    setInputStatus\n  }\n};\n","import { SearchBoxXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchBoxActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param urlParams - List of params from the url.\n * @public\n */\nexport const setUrlParams: SearchBoxXStoreModule['actions']['setUrlParams'] = (\n  { commit },\n  { query }\n) => {\n  commit('setQuery', query);\n};\n","import { createStoreEmitters } from '../../../store';\nimport { isStringEmpty } from '../../../utils/string';\nimport { searchBoxXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the search-box module.\n *\n * @internal\n */\nexport const searchBoxEmitters = createStoreEmitters(searchBoxXStoreModule, {\n  SearchBoxQueryChanged: (_, getters) => getters.trimmedQuery,\n  UserClearedQuery: { selector: state => state.query, filter: isStringEmpty }\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch\n} from '../../wiring/namespaced-wires.factory';\nimport { NamespacedWireCommit } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\nimport { XEvent } from '../../wiring/events.types';\nimport { AnyWire } from '../../wiring/wiring.types';\nimport { filter } from '../../wiring/index';\n\n/**\n * `searchBox` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'searchBox';\n\n/**\n * WireCommit for {@link SearchBoxXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n\n/**\n * WireDispatch for {@link SearchBoxXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n\n/**\n * Sets the query of the search-box module.\n *\n * @public\n */\nconst setSearchBoxQuery = wireCommit('setQuery');\n\n/**\n * Clears the query of the search-box module.\n *\n * @public\n */\nconst clearSearchBoxQuery = wireCommit('setQuery', '');\n\n/**\n * Sets the search state `query`.\n *\n * @public\n */\nconst setUrlParams = wireDispatch('setUrlParams');\n\n/**\n * Sets the search state `status`.\n *\n * @param event - The {@link XEvent} used to transition the status.\n *\n * @returns A wire.\n *\n * @public\n */\nconst setInputStatus = (event: XEvent): AnyWire => wireDispatch('setInputStatus', event);\n\n/**\n * SearchBox wiring.\n *\n * @internal\n */\nexport const searchBoxWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams,\n    transitionState: filter(setInputStatus('UserAcceptedAQuery'), ({ eventPayload: urlParams }) => {\n      return !!urlParams.query;\n    })\n  },\n  UserIsTypingAQuery: {\n    setSearchBoxQuery,\n    transitionState: setInputStatus('UserIsTypingAQuery')\n  },\n  UserAcceptedAQuery: {\n    setSearchBoxQuery,\n    transitionState: setInputStatus('UserAcceptedAQuery')\n  },\n  UserPressedClearSearchBoxButton: {\n    clearSearchBoxQuery\n  },\n  UserClickedCloseX: {\n    clearSearchBoxQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearSearchBoxQuery\n  },\n  UserClearedQuery: {\n    transitionState: setInputStatus('UserClearedQuery')\n  },\n  UserFocusedSearchBox: {\n    transitionState: setInputStatus('UserFocusedSearchBox')\n  },\n  UserBlurredSearchBox: {\n    transitionState: setInputStatus('UserBlurredSearchBox')\n  }\n});\n","// XModule\nimport { XModule } from '../x-modules.types';\nimport { searchBoxEmitters } from './store/emitters';\nimport { searchBoxXStoreModule } from './store/module';\nimport { SearchBoxXStoreModule } from './store/types';\nimport { searchBoxWiring } from './wiring';\n\n/**\n * SearchBox {@link XModule} alias.\n *\n * @public\n */\nexport type SearchBoxXModule = XModule<SearchBoxXStoreModule>;\n\n/**\n * SearchBox {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `search-box` entry point.\n *\n * @public\n */\nexport const searchBoxXModule: SearchBoxXModule = {\n  name: 'searchBox',\n  storeModule: searchBoxXStoreModule,\n  storeEmitters: searchBoxEmitters,\n  wiring: searchBoxWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders a button to delete the current query.\n   *\n   * @remarks\n   * A button that when pressed emits the {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\n   * and {@link SearchBoxXEvents.UserClearedQuery} events, expressing the user intention to clear\n   * the current query.\n   * It also adds `x-clear-search-input--has-empty-query` as class when there is no query.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class ClearSearchInput extends Vue {\n    @State('searchBox', 'query')\n    public query!: string;\n\n    protected get isQueryEmpty(): boolean {\n      return this.query.length === 0;\n    }\n\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-clear-search-input--has-empty-query': this.isQueryEmpty\n      };\n    }\n\n    /**\n     * The events dictionary that are going to be emitted when the button is pressed.\n     *\n     * @internal\n     */\n    protected clearSearchInputEvents: Partial<XEventsTypes> = {\n      UserPressedClearSearchBoxButton: undefined\n    };\n  }\n","<template>\n  <BaseEventButton\n    class=\"x-clear-search-input x-button\"\n    :class=\"dynamicClasses\"\n    :events=\"clearSearchInputEvents\"\n    data-test=\"clear-search-input\"\n  >\n    <!-- @slot _Required_. Button content (text, icon, or both) -->\n    <slot>✕</slot>\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders a button to delete the current query.\n   *\n   * @remarks\n   * A button that when pressed emits the {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\n   * and {@link SearchBoxXEvents.UserClearedQuery} events, expressing the user intention to clear\n   * the current query.\n   * It also adds `x-clear-search-input--has-empty-query` as class when there is no query.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class ClearSearchInput extends Vue {\n    @State('searchBox', 'query')\n    public query!: string;\n\n    protected get isQueryEmpty(): boolean {\n      return this.query.length === 0;\n    }\n\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-clear-search-input--has-empty-query': this.isQueryEmpty\n      };\n    }\n\n    /**\n     * The events dictionary that are going to be emitted when the button is pressed.\n     *\n     * @internal\n     */\n    protected clearSearchInputEvents: Partial<XEventsTypes> = {\n      UserPressedClearSearchBoxButton: undefined\n    };\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserPressedClearSearchBoxButton`](./../../api/x-components.searchboxxevents.md)\n- [`UserClearedQuery`](./../../api/x-components.searchboxxevents.md)\n\n## See it in action\n\nHere a basic example of how the clear button is rendered.\n\n_Type any term in the input field and then click the Clear button to try it out!_\n\n```vue live\n<template>\n  <div style=\"display: flex;\">\n    <SearchInput />\n    <ClearSearchInput />\n  </div>\n</template>\n\n<script>\n  import { ClearSearchInput, SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ClearSearchInputDemo',\n    components: {\n      ClearSearchInput,\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with default slot\n\nIn this example, a custom text is passed in the default slot instead of the default text to\ncustomize the button content.\n\n_Click the icon button to try it out!_\n\n```vue live\n<template>\n  <ClearSearchInput>Clear</ClearSearchInput>\n</template>\n\n<script>\n  import { ClearSearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ClearSearchInputDemo',\n    components: {\n      ClearSearchInput\n    }\n  };\n</script>\n```\n\n### Play with events\n\nIn this example, the `UserPressedClearSearchBoxButton` event is implemented, triggering the message\n“clear” when the clear search input button is clicked.\n\n_Click the Clear button to try it out!_\n\n```vue live\n<template>\n  <div>\n    <ClearSearchInput @UserPressedClearSearchBoxButton=\"message = 'clear'\">Clear</ClearSearchInput>\n    {{ message }}\n  </div>\n</template>\n\n<script>\n  import { ClearSearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ClearSearchInputDemo',\n    components: {\n      ClearSearchInput\n    },\n    data() {\n      return {\n        message: ''\n      };\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents can be combined and communicate with each other. Commonly, the `ClearSearchInput`\ncomponent communicates with the [`SearchInput`](./search-input.md), deleting the search term\nentered.\n\n_Type any term in the input field and then click the icon button to try it out!_\n\n```vue live\n<template>\n  <div style=\"display: flex;\">\n    <SearchInput />\n    <ClearSearchInput />\n  </div>\n</template>\n\n<script>\n  import { SearchInput, ClearSearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ClearSearchInputDemo',\n    components: {\n      SearchInput,\n      ClearSearchInput\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders a button to submit the query.\n   *\n   * @remarks\n   * If query is not empty, it emits {@link XEventsTypes.UserAcceptedAQuery} and\n   * {@link SearchBoxXEvents.UserPressedSearchButton} events with the query as payload.\n   * It also adds `x-search-button--has-empty-query` as class when there is no query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class SearchButton extends Vue {\n    @State('searchBox', 'query')\n    public query!: string;\n\n    protected get isQueryEmpty(): boolean {\n      return this.query.length === 0;\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'search_box'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      if (!this.isQueryEmpty) {\n        this.$x.emit('UserAcceptedAQuery', this.query, this.createEventMetadata());\n        this.$x.emit('UserPressedSearchButton', this.query, this.createEventMetadata());\n      }\n    }\n\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-search-button--has-empty-query': this.isQueryEmpty\n      };\n    }\n  }\n","<template>\n  <button\n    @click=\"emitEvents\"\n    class=\"x-search-button x-button\"\n    :class=\"dynamicClasses\"\n    data-test=\"search-button\"\n  >\n    <!-- @slot _Required_. Button content (text, icon, or both) -->\n    <slot><span class=\"x-icon\">⌕</span></slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders a button to submit the query.\n   *\n   * @remarks\n   * If query is not empty, it emits {@link XEventsTypes.UserAcceptedAQuery} and\n   * {@link SearchBoxXEvents.UserPressedSearchButton} events with the query as payload.\n   * It also adds `x-search-button--has-empty-query` as class when there is no query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class SearchButton extends Vue {\n    @State('searchBox', 'query')\n    public query!: string;\n\n    protected get isQueryEmpty(): boolean {\n      return this.query.length === 0;\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'search_box'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      if (!this.isQueryEmpty) {\n        this.$x.emit('UserAcceptedAQuery', this.query, this.createEventMetadata());\n        this.$x.emit('UserPressedSearchButton', this.query, this.createEventMetadata());\n      }\n    }\n\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-search-button--has-empty-query': this.isQueryEmpty\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserAcceptedAQuery`](./../../api/x-components.xeventstypes.md)\n- [`UserPressedSearchButton`](./../../api/x-components.searchboxxevents.md)\n\n<!-- prettier-ignore-start -->\n:::warning\nNote that no events are emitted if the query is empty.\n:::\n<!-- prettier-ignore-end -->\n\n## Dynamic classes\n\n`SearchButton` uses the `x-search-button--has-empty-query` dynamic CSS class to modify the HTML\nbutton style when the query is empty.\n\n## See it in action\n\nIn this example, a clickable button is rendered.\n\n_Click the Search button to try it out!_\n\n```vue live\n<template>\n  <SearchButton />\n</template>\n\n<script>\n  import { SearchButton } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchButtonDemo',\n    components: {\n      SearchButton\n    }\n  };\n</script>\n```\n\n### Play with default slot\n\nHere text is passed in the default slot instead of an icon to customize the button content.\n\n_Click the icon button to try it out!_\n\n```vue live\n<template>\n  <SearchButton>Search</SearchButton>\n</template>\n\n<script>\n  import { SearchButton } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchButtonDemo',\n    components: {\n      SearchButton\n    }\n  };\n</script>\n```\n\n### Play with events\n\nIn this example, the `UserPressedSearchButton` event has been implemented so that when you enter a\nsearch term and click the Search button, the search term is displayed as a message.\n\n_Type any term in the input field and then click the Search button to try it out!_\n\n```vue live\n<template>\n  <div>\n    <div style=\"display: flex;\">\n      <SearchInput />\n      <SearchButton\n        @UserPressedSearchButton=\"\n          query => {\n            message = query;\n          }\n        \"\n      />\n    </div>\n    {{ message }}\n  </div>\n</template>\n\n<script>\n  import { SearchInput, SearchButton } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchButtonDemo',\n    components: {\n      SearchInput,\n      SearchButton\n    },\n    data() {\n      return {\n        message: ''\n      };\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents can be combined and communicate with each other. Commonly, the `SearchButton` component\ncommunicates with the [`SearchInput`](./search-input.md) to submit the query. In this example, when\nyou enter a search term and click the Search button, the “Looking for results” message is displayed.\n\n_Type any term in the input field and then click the Search button to try it out!_\n\n```vue live\n<template>\n  <div>\n    <div style=\"display: flex;\">\n      <SearchInput />\n      <SearchButton @UserAcceptedAQuery=\"message = 'looking for results'\">Search</SearchButton>\n    </div>\n    {{ message }}\n  </div>\n</template>\n\n<script>\n  import { SearchButton, SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchButtonDemo',\n    components: {\n      SearchButton,\n      SearchInput\n    },\n    data() {\n      return {\n        message: ''\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { ArrowKey, PropsWithType } from '../../../utils';\n  import { debounce } from '../../../utils/debounce';\n  import { DebouncedFunction } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders an input field that allows the user to type a query. It also reacts to\n   * query changes through event listening.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class SearchInput extends Vue {\n    public $refs!: { input: HTMLInputElement };\n\n    protected searchInputMessage = 'type your query here';\n\n    /**\n     * Maximum characters allowed in the input search.\n     */\n    @Prop({ default: 64 })\n    protected maxLength!: number;\n\n    /**\n     * Allows input autofocus when the search field is rendered.\n     */\n    @Prop({ default: true })\n    protected autofocus!: boolean;\n\n    /**\n     * Enables the auto-accept query after debounce.\n     */\n    @Prop({ default: true })\n    protected instant!: boolean;\n\n    /**\n     * Debounce time for the instant.\n     */\n    @Prop({ default: 500 })\n    protected instantDebounceInMs!: number;\n\n    /**\n     * Keyboard keys to accept the autocomplete suggestion.\n     */\n    @Prop({ default: () => ['ArrowRight'] })\n    protected autocompleteKeyboardKeys!: string[]; // https://keycode.info/\n\n    /**\n     * Event that retrieves the autocomplete suggestion.\n     */\n    @Prop({ default: 'QuerySuggestionsChanged' })\n    protected autocompleteSuggestionsEvent!: PropsWithType<XEventsTypes, Suggestion[]>;\n\n    @State('searchBox', 'query')\n    public query!: string;\n\n    /**\n     * When event {@link XEventsTypes.UserReachedEmpathizeTop} or\n     * {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\n     * are emitted the search input is focused.\n     *\n     * @internal\n     */\n    @XOn(['UserReachedEmpathizeTop', 'UserPressedClearSearchBoxButton'])\n    focusInput(): void {\n      this.$refs.input?.focus();\n    }\n\n    protected debouncedUserAcceptedAQuery!: DebouncedFunction<[string]>;\n\n    /**\n     * When event {@link XEventsTypes.UserAcceptedAQuery} or\n     * {@link SearchBoxXEvents.UserClearedQuery} are emitted the pending debounced emit\n     * {@link XEvent} `UserAcceptedAQuery` is canceled.\n     *\n     * @internal\n     */\n    @XOn(['UserAcceptedAQuery', 'UserClearedQuery'])\n    cancelDebouncedUserAcceptedAQuery(): void {\n      this.debouncedUserAcceptedAQuery?.cancel();\n    }\n\n    mounted(): void {\n      if (this.autofocus) {\n        this.focusInput();\n      }\n    }\n\n    /**\n     * Emits {@link XEventsTypes.UserAcceptedAQuery} event with a debounce configured in\n     * `instantDebounceInMs` prop.\n     *\n     * @internal\n     * @param query - The query that will be emitted.\n     */\n    emitDebouncedUserAcceptedAQuery(query: string): void {\n      if (this.instant) {\n        if (!this.debouncedUserAcceptedAQuery) {\n          this.debouncedUserAcceptedAQuery = debounce(\n            this.emitUserAcceptedAQuery.bind(this),\n            this.instantDebounceInMs\n          );\n        }\n        this.debouncedUserAcceptedAQuery(query);\n      }\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$refs.input,\n        feature: 'search_box'\n      };\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserHoveredInSearchBox} when search box is hovered in.\n     *\n     * @internal\n     */\n    protected emitUserHoveredInSearchBox(): void {\n      this.$x.emit('UserHoveredInSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserHoveredOutSearchBox} when search box is hovered out.\n     *\n     * @internal\n     */\n    protected emitUserHoveredOutSearchBox(): void {\n      this.$x.emit('UserHoveredOutSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserBlurredSearchBox} when search box loses focus.\n     *\n     * @internal\n     */\n    protected emitUserBlurredSearchBox(): void {\n      this.$x.emit('UserBlurredSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserClickedSearchBox} when user clicks  the search input.\n     *\n     * @internal\n     */\n    protected emitUserClickedSearchBox(): void {\n      this.$x.emit('UserClickedSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserFocusedSearchBox} when search box gains focus.\n     *\n     * @internal\n     */\n    protected emitUserFocusedSearchBox(): void {\n      this.$x.emit('UserFocusedSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserIsTypingAQuery} when the user typed/pasted something\n     * into the search-box. Also emits event {@link SearchBoxXEvents.UserClearedQuery} when the user\n     * removes all characters in the search-box.\n     *\n     * @internal\n     */\n    protected emitUserIsTypingAQueryEvents(): void {\n      const query = this.$refs.input.value;\n      this.$x.emit('UserIsTypingAQuery', query, { target: this.$refs.input });\n      if (query.trim()) {\n        this.emitDebouncedUserAcceptedAQuery(query);\n      } else {\n        this.cancelDebouncedUserAcceptedAQuery();\n      }\n    }\n\n    /**\n     * Emits event {@link XEventsTypes.UserPressedArrowKey} when the user pressed an arrow key.\n     *\n     * @param event - The keyboard event with the arrow key pressed.\n     * @internal\n     */\n    protected emitUserPressedArrowKey(event: KeyboardEvent): void {\n      this.$x.emit('UserPressedArrowKey', event.key as ArrowKey, this.createEventMetadata());\n    }\n\n    /**\n     * Emits multiple events when the user pressed the enter key.\n     *\n     * @remarks\n     * Emitted events are:\n     * {@link SearchBoxXEvents.UserPressedEnterKey}\n     * {@link XEventsTypes.UserAcceptedAQuery}\n     *\n     * @internal\n     */\n    protected emitUserPressedEnterKey(): void {\n      const query = this.$refs.input.value.trim();\n      if (query.length > 0) {\n        this.$x.emit('UserPressedEnterKey', query, this.createEventMetadata());\n        this.emitUserAcceptedAQuery(query);\n      }\n      this.$refs.input?.blur();\n    }\n\n    /**\n     * Emits {@link XEventsTypes.UserAcceptedAQuery} event.\n     *\n     * @remarks It is necessary in a separated method to use it as the parameter of debounce in\n     * emitDebouncedUserAcceptedAQuery method.\n     * @internal\n     * @param query - The query that will be emitted.\n     */\n    protected emitUserAcceptedAQuery(query: string): void {\n      this.$x.emit('UserAcceptedAQuery', query, this.createEventMetadata());\n    }\n\n    /**\n     * Prevents the user from either typing or pasting special characters in the input field.\n     *\n     * @internal\n     * @param event - The event that will be checked for special characters.\n     */\n    protected preventSpecialKey(event: InputEvent): void {\n      if (/[<>]/.test(event.data ?? '')) {\n        event.preventDefault();\n      }\n    }\n  }\n","<template>\n  <input\n    ref=\"input\"\n    @mouseenter=\"emitUserHoveredInSearchBox\"\n    @mouseleave=\"emitUserHoveredOutSearchBox\"\n    @blur=\"emitUserBlurredSearchBox\"\n    @click=\"emitUserClickedSearchBox\"\n    @focus=\"emitUserFocusedSearchBox\"\n    @input=\"emitUserIsTypingAQueryEvents\"\n    @keydown.enter=\"emitUserPressedEnterKey\"\n    @keydown.up.down.prevent=\"emitUserPressedArrowKey\"\n    @beforeinput=\"preventSpecialKey\"\n    v-on=\"$listeners\"\n    :maxlength=\"maxLength\"\n    :value=\"query\"\n    autocomplete=\"off\"\n    class=\"x-search-input x-input\"\n    enterkeyhint=\"search\"\n    inputmode=\"search\"\n    type=\"search\"\n    data-test=\"search-input\"\n    :aria-label=\"searchInputMessage\"\n  />\n</template>\n\n<script lang=\"ts\">\n  import { Suggestion } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { ArrowKey, PropsWithType } from '../../../utils';\n  import { debounce } from '../../../utils/debounce';\n  import { DebouncedFunction } from '../../../utils/types';\n  import { XEventsTypes } from '../../../wiring/events.types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchBoxXModule } from '../x-module';\n\n  /**\n   * This component renders an input field that allows the user to type a query. It also reacts to\n   * query changes through event listening.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchBoxXModule)]\n  })\n  export default class SearchInput extends Vue {\n    public $refs!: { input: HTMLInputElement };\n\n    protected searchInputMessage = 'type your query here';\n\n    /**\n     * Maximum characters allowed in the input search.\n     */\n    @Prop({ default: 64 })\n    protected maxLength!: number;\n\n    /**\n     * Allows input autofocus when the search field is rendered.\n     */\n    @Prop({ default: true })\n    protected autofocus!: boolean;\n\n    /**\n     * Enables the auto-accept query after debounce.\n     */\n    @Prop({ default: true })\n    protected instant!: boolean;\n\n    /**\n     * Debounce time for the instant.\n     */\n    @Prop({ default: 500 })\n    protected instantDebounceInMs!: number;\n\n    /**\n     * Keyboard keys to accept the autocomplete suggestion.\n     */\n    @Prop({ default: () => ['ArrowRight'] })\n    protected autocompleteKeyboardKeys!: string[]; // https://keycode.info/\n\n    /**\n     * Event that retrieves the autocomplete suggestion.\n     */\n    @Prop({ default: 'QuerySuggestionsChanged' })\n    protected autocompleteSuggestionsEvent!: PropsWithType<XEventsTypes, Suggestion[]>;\n\n    @State('searchBox', 'query')\n    public query!: string;\n\n    /**\n     * When event {@link XEventsTypes.UserReachedEmpathizeTop} or\n     * {@link SearchBoxXEvents.UserPressedClearSearchBoxButton}\n     * are emitted the search input is focused.\n     *\n     * @internal\n     */\n    @XOn(['UserReachedEmpathizeTop', 'UserPressedClearSearchBoxButton'])\n    focusInput(): void {\n      this.$refs.input?.focus();\n    }\n\n    protected debouncedUserAcceptedAQuery!: DebouncedFunction<[string]>;\n\n    /**\n     * When event {@link XEventsTypes.UserAcceptedAQuery} or\n     * {@link SearchBoxXEvents.UserClearedQuery} are emitted the pending debounced emit\n     * {@link XEvent} `UserAcceptedAQuery` is canceled.\n     *\n     * @internal\n     */\n    @XOn(['UserAcceptedAQuery', 'UserClearedQuery'])\n    cancelDebouncedUserAcceptedAQuery(): void {\n      this.debouncedUserAcceptedAQuery?.cancel();\n    }\n\n    mounted(): void {\n      if (this.autofocus) {\n        this.focusInput();\n      }\n    }\n\n    /**\n     * Emits {@link XEventsTypes.UserAcceptedAQuery} event with a debounce configured in\n     * `instantDebounceInMs` prop.\n     *\n     * @internal\n     * @param query - The query that will be emitted.\n     */\n    emitDebouncedUserAcceptedAQuery(query: string): void {\n      if (this.instant) {\n        if (!this.debouncedUserAcceptedAQuery) {\n          this.debouncedUserAcceptedAQuery = debounce(\n            this.emitUserAcceptedAQuery.bind(this),\n            this.instantDebounceInMs\n          );\n        }\n        this.debouncedUserAcceptedAQuery(query);\n      }\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$refs.input,\n        feature: 'search_box'\n      };\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserHoveredInSearchBox} when search box is hovered in.\n     *\n     * @internal\n     */\n    protected emitUserHoveredInSearchBox(): void {\n      this.$x.emit('UserHoveredInSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserHoveredOutSearchBox} when search box is hovered out.\n     *\n     * @internal\n     */\n    protected emitUserHoveredOutSearchBox(): void {\n      this.$x.emit('UserHoveredOutSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserBlurredSearchBox} when search box loses focus.\n     *\n     * @internal\n     */\n    protected emitUserBlurredSearchBox(): void {\n      this.$x.emit('UserBlurredSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserClickedSearchBox} when user clicks  the search input.\n     *\n     * @internal\n     */\n    protected emitUserClickedSearchBox(): void {\n      this.$x.emit('UserClickedSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserFocusedSearchBox} when search box gains focus.\n     *\n     * @internal\n     */\n    protected emitUserFocusedSearchBox(): void {\n      this.$x.emit('UserFocusedSearchBox', undefined, { target: this.$refs.input });\n    }\n\n    /**\n     * Emits event {@link SearchBoxXEvents.UserIsTypingAQuery} when the user typed/pasted something\n     * into the search-box. Also emits event {@link SearchBoxXEvents.UserClearedQuery} when the user\n     * removes all characters in the search-box.\n     *\n     * @internal\n     */\n    protected emitUserIsTypingAQueryEvents(): void {\n      const query = this.$refs.input.value;\n      this.$x.emit('UserIsTypingAQuery', query, { target: this.$refs.input });\n      if (query.trim()) {\n        this.emitDebouncedUserAcceptedAQuery(query);\n      } else {\n        this.cancelDebouncedUserAcceptedAQuery();\n      }\n    }\n\n    /**\n     * Emits event {@link XEventsTypes.UserPressedArrowKey} when the user pressed an arrow key.\n     *\n     * @param event - The keyboard event with the arrow key pressed.\n     * @internal\n     */\n    protected emitUserPressedArrowKey(event: KeyboardEvent): void {\n      this.$x.emit('UserPressedArrowKey', event.key as ArrowKey, this.createEventMetadata());\n    }\n\n    /**\n     * Emits multiple events when the user pressed the enter key.\n     *\n     * @remarks\n     * Emitted events are:\n     * {@link SearchBoxXEvents.UserPressedEnterKey}\n     * {@link XEventsTypes.UserAcceptedAQuery}\n     *\n     * @internal\n     */\n    protected emitUserPressedEnterKey(): void {\n      const query = this.$refs.input.value.trim();\n      if (query.length > 0) {\n        this.$x.emit('UserPressedEnterKey', query, this.createEventMetadata());\n        this.emitUserAcceptedAQuery(query);\n      }\n      this.$refs.input?.blur();\n    }\n\n    /**\n     * Emits {@link XEventsTypes.UserAcceptedAQuery} event.\n     *\n     * @remarks It is necessary in a separated method to use it as the parameter of debounce in\n     * emitDebouncedUserAcceptedAQuery method.\n     * @internal\n     * @param query - The query that will be emitted.\n     */\n    protected emitUserAcceptedAQuery(query: string): void {\n      this.$x.emit('UserAcceptedAQuery', query, this.createEventMetadata());\n    }\n\n    /**\n     * Prevents the user from either typing or pasting special characters in the input field.\n     *\n     * @internal\n     * @param event - The event that will be checked for special characters.\n     */\n    protected preventSpecialKey(event: InputEvent): void {\n      if (/[<>]/.test(event.data ?? '')) {\n        event.preventDefault();\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-search-input::-webkit-search-decoration,\n  .x-search-input::-webkit-search-cancel-button,\n  .x-search-input::-webkit-search-results-button,\n  .x-search-input::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserClickedSearchBox`](./../../api/x-components.searchboxxevents.md)\n- [`UserBlurredSearchBox`](./../../api/x-components.searchboxxevents.md)\n- [`UserFocusedSearchBox`](./../../api/x-components.searchboxxevents.md)\n- [`UserIsTypingAQuery`](./../../api/x-components.searchboxxevents.md)\n- [`UserPressedEnterKey`](./../../api/x-components.searchboxxevents.md)\n- [`UserPressedArrowKey`](./../../api/x-components.xeventstypes.md)\n- [`UserAcceptedAQuery`](./../../api/x-components.xeventstypes.md)\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nTo use this component, the Search service must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you have a basic example of how the search input is rendered.\n\n_Type any term in the input field to try it out!_\n\n```vue live\n<template>\n  <SearchInput />\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchInputDemo',\n    components: {\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the search input has been limited to accept a maximum of 5 characters, including\nspaces, it won't take the focus when it is rendered, and it will emit the `UserAcceptedAQuery` event\nafter 1000 milliseconds without typing.\n\n_Type a term with more than 5 characters to try it out!_\n\n```vue live\n<template>\n  <SearchInput :maxLength=\"5\" :autofocus=\"false\" :instant=\"true\" :instantDebounceInMs=\"1000\" />\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchInputDemo',\n    components: {\n      SearchInput\n    }\n  };\n</script>\n```\n\n### Play with events\n\nIn this example, a message has been added below the search input to illustrate the action performed.\nFor example, if you select the search input box, the message “focus” appears. When you start to\nenter a search term, the message “typing” appears. If you press Enter after typing a search term,\nthe message “enter” appears.\n\n<!-- prettier-ignore-start -->\n:::warning X Events are only emitted from the root X Component.\nAt the moment, X Events are only emitted from the root X Component. This means that if you wrap\nthe `SearchInput` with another component of another module like the `MainScroll`, you should add\nthe listeners to the `MainScroll` instead of the `SearchInput`. If you need to subscribe to these\nevents, it is recommended to use the [`GlobalXBus`](../common/x-components.global-x-bus.md)\ncomponent instead.\n:::\n<!-- prettier-ignore-end -->\n\n_Type any term in the input field to try it out!_\n\n```vue live\n<template>\n  <div>\n    <SearchInput\n      @UserPressedEnterKey=\"value = 'enter'\"\n      @UserFocusedSearchBox=\"hasFocus = true\"\n      @UserBlurredSearchBox=\"hasFocus = false\"\n      @UserIsTypingAQuery=\"value = 'typing'\"\n    />\n    <strong>{{ value }}</strong>\n    <span>{{ hasFocus ? 'focused' : 'unfocused' }}</span>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'SearchInputDemo',\n    components: {\n      SearchInput\n    },\n    data() {\n      return {\n        value: '',\n        hasFocus: false\n      };\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents can be combined and communicate with each other. Commonly, the `SearchInput` component\ncommunicates with the [`SearchButton`](x-components.search-button.md) and the\n[`ClearSearchInput`](x-components.clear-search-input.md) to offer a full query entry experience.\nFurthermore, you can use it together with the [`QuerySuggestions`](query-suggestions.md) component\nto autocomplete the typed search term.\n\n_Type “trousers” or another fashion term in the input field and then click the clear icon to try it\nout!_\n\n```vue live\n<template>\n  <div>\n    <div style=\"display: flex; flex-flow: row nowrap;\">\n      <SearchInput />\n      <ClearSearchInput>\n        <img src=\"/assets/icons/cross.svg\" />\n      </ClearSearchInput>\n      <SearchButton>Search</SearchButton>\n    </div>\n    <QuerySuggestions />\n  </div>\n</template>\n\n<script>\n  import { SearchInput, ClearSearchInput, SearchButton } from '@empathyco/x-components/search-box';\n  import { QuerySuggestions } from '@empathyco/x-components/query-suggestions';\n\n  export default {\n    name: 'SearchInputDemo',\n    components: {\n      SearchInput,\n      ClearSearchInput,\n      SearchButton,\n      QuerySuggestions\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <div class=\"x-input-group x-input-group-lead x-rounded-sm\">\n    <SearchInput\n      :autofocus=\"false\"\n      :placeholder=\"$t('searchBox.placeholder')\"\n      :instant=\"true\"\n      class=\"desktop:x-pl-24\"\n    />\n\n    <ClearSearchInput\n      v-if=\"isDesktopOrGreater && $x.query.searchBox\"\n      class=\"x-input-group-button x-input-group-button-rectangle\"\n    >\n      {{ $t('searchBox.clear') }}\n    </ClearSearchInput>\n\n    <SearchButton\n      v-if=\"isDesktopOrGreater || !$x.query.searchBox\"\n      class=\"x-input-group-button-primary\"\n    >\n      <SearchIcon class=\"x-icon-lg\" />\n    </SearchButton>\n\n    <ClearSearchInput v-else class=\"x-input-group-button-primary\">\n      <CrossTinyIcon class=\"x-icon-lg\" />\n    </ClearSearchInput>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { ClearSearchInput, SearchButton, SearchInput } from '@empathyco/x-components/search-box';\n  import { CrossTinyIcon, SearchIcon } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      ClearSearchInput,\n      CrossTinyIcon,\n      SearchButton,\n      SearchInput,\n      SearchIcon\n    },\n    setup() {\n      const { isDesktopOrGreater } = useDevice();\n      return {\n        isDesktopOrGreater\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { ClearSearchInput, SearchButton, SearchInput } from '@empathyco/x-components/search-box';\n  import { CrossTinyIcon, SearchIcon } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      ClearSearchInput,\n      CrossTinyIcon,\n      SearchButton,\n      SearchInput,\n      SearchIcon\n    },\n    setup() {\n      const { isDesktopOrGreater } = useDevice();\n      return {\n        isDesktopOrGreater\n      };\n    }\n  });\n","<template functional>\n  <!-- eslint-disable max-len -->\n  <svg\n    :class=\"['x-icon-no-history'].concat(data.staticClass, data.class)\"\n    fill=\"none\"\n    viewBox=\"0 0 504 279\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      fill=\"#80C0A1\"\n      fill-rule=\"evenodd\"\n      d=\"M116.871 68.085a9.584 9.584 0 0 0-5.053 2.847c-1.055 1.12-1.524 1.895-2.062 3.405l-.411 1.157-.041 18.523-.04 18.522-.55-.101c-1.672-.307-3.978-2.072-4.792-3.669-.836-1.64-.849-1.772-.854-8.931-.002-3.634-.068-7.101-.146-7.706a6.534 6.534 0 0 0-3.617-5.074c-3.629-1.782-7.838-.009-9.179 3.867-.204.59-.249 1.695-.298 7.364-.065 7.293.05 9.476.62 11.812 2.036 8.337 9.295 14.662 17.827 15.532l.996.102v14.918h-2.041c-1.941 0-2.055.016-2.361.339-.468.495-.435 1.309.068 1.702.387.303.458.304 13.631.304 13.172 0 13.243-.001 13.63-.304.519-.405.543-1.26.047-1.722-.316-.295-.49-.319-2.361-.319h-2.019V115.04l.978-.099c5.76-.586 11.189-3.749 14.62-8.517 2.157-2.998 3.397-6.419 3.742-10.322.102-1.156.14-4.337.102-8.514-.051-5.646-.097-6.777-.299-7.364-1.328-3.862-5.558-5.644-9.179-3.867-1.984.975-3.324 2.859-3.615 5.082-.078.6-.144 4.064-.147 7.698-.005 7.159-.017 7.291-.853 8.93-.811 1.59-3.16 3.393-4.791 3.676l-.549.095-.042-13.172-.041-13.172-.412-1.157c-.537-1.51-1.006-2.284-2.061-3.405-1.773-1.882-3.843-2.83-6.381-2.921-.812-.03-1.742.004-2.066.074Zm3.689 2.604c2.138.66 3.69 2.157 4.534 4.377l.33.868.046 15.462.046 15.463.315.332c.392.415 1.131.439 1.611.053.311-.25.354-.423.399-1.588l.051-1.307 1.043-.249c3.366-.802 6.024-3.26 7.157-6.618l.396-1.172.078-7.623c.089-8.57.043-8.221 1.225-9.42 2.009-2.038 5.467-1.414 6.696 1.208l.345.736.002 7.567c.001 8.311-.05 8.965-.896 11.475-2.187 6.483-7.879 11.224-14.7 12.243-.583.087-1.433.158-1.889.158-.657 0-1.458.222-1.733.481-.019.018-.069 6.2-.111 13.739l-.075 13.706h-13.724l-.077-8.356c-.042-4.596-.092-8.37-.111-8.388-.266-.259-1.077-.481-1.76-.481-1.601 0-4.285-.577-6.102-1.312-5.79-2.341-10.057-7.601-11.125-13.713-.188-1.081-.23-2.686-.229-8.869l.001-7.549.345-.736c.447-.953 1.152-1.643 2.14-2.092.674-.306.948-.35 1.845-.292 1.226.08 1.981.416 2.78 1.239 1.104 1.136 1.068.845 1.156 9.357l.078 7.623.387 1.14c1.129 3.326 3.933 5.915 7.202 6.649l1.035.232v1.09c0 1.139.236 1.846.671 2.012.467.178 1.012.086 1.348-.228l.342-.319.006-20.02c.004-11.011.063-20.482.131-21.047.527-4.35 4.674-7.1 8.791-5.83Zm-6.057 13.594c-.342.34-.362.452-.362 2.026 0 1.588.017 1.684.367 2.01.218.204.55.343.813.343.264 0 .595-.14.813-.343.35-.326.368-.422.368-2.01 0-1.615-.013-1.678-.391-2.027-.507-.467-1.138-.467-1.608 0Zm25.81 2.13c-.631.254-.79.703-.79 2.226 0 1.57.146 2.059.687 2.304.553.25.916.196 1.311-.197.343-.34.363-.453.363-2.025 0-1.472-.035-1.701-.301-1.985-.166-.177-.359-.321-.431-.321-.071 0-.218-.029-.326-.064-.108-.035-.339-.007-.513.063Zm-19.373 5.959c-.268.337-.306.59-.306 1.985 0 1.503.022 1.621.362 1.96.228.226.531.36.818.36.288 0 .59-.134.819-.36.342-.34.362-.453.362-2.027 0-1.553-.024-1.689-.342-1.986-.498-.465-1.317-.433-1.713.067Zm-24.937 8.423c-.65.256-.742.539-.747 2.301-.004 1.566.015 1.676.358 2.016.396.393.809.453 1.308.189.602-.319.681-.574.686-2.203.004-1.424-.026-1.601-.327-1.931-.404-.441-.806-.558-1.278-.372Zm21.746 31.422c-.34.338-.362.457-.362 1.96 0 1.396.039 1.648.306 1.985.236.298.436.386.875.386.438 0 .639-.088.874-.386.267-.337.306-.589.306-1.985 0-1.503-.022-1.622-.362-1.96a1.195 1.195 0 0 0-.818-.359c-.288 0-.59.133-.819.359Z\"\n      clip-rule=\"evenodd\"\n    />\n    <path\n      fill=\"url(#desert-on__a)\"\n      fill-rule=\"evenodd\"\n      d=\"M0 103.293c25.807 23.47 60.71 35.205 104.71 35.205 66 0 251.38-117.265 399.29-10.881v150.922c-98.606.615-266.606.615-504 0\"\n      clip-rule=\"evenodd\"\n    />\n    <path\n      fill=\"#EDBF3B\"\n      fill-rule=\"evenodd\"\n      d=\"M401.689 193.438a79.41 79.41 0 0 1 1.105-1.688l.319-.474c.328-.485.607-.899.831-1.26l.022-.035c.662.427 1.226.936 1.653 1.563a19.998 19.998 0 0 1 1.66 2.97 73.036 73.036 0 0 0-5.59-1.076Zm-1.079-.164a243.3 243.3 0 0 0-6.035-.787h-.001l-.004-.001h-.001l-1.185-.145c-2.878-.354-5.596-.71-7.984-1.203a19.05 19.05 0 0 1 2.473-2.793c3.476-1.056 6.979-1.312 10.145-.483l.614.159.001.001h.002c1.249.322 2.534.654 3.712 1.135.256.105.505.216.746.334-.213.343-.477.734-.8 1.213l-.329.489c-.388.578-.839 1.26-1.354 2.081Zm3.832-4.175c.778.491 1.472 1.102 2.003 1.882a21.524 21.524 0 0 1 2.059 3.841c2.536.671 4.928 1.531 7.034 2.679.211.116.374.286.47.501.092.21.106.428.082.627-.047.384-.244.775-.476 1.109a4.84 4.84 0 0 1-.866.943c-.316.264-.68.495-1.039.602-.428.127-.878.253-1.346.379a43.304 43.304 0 0 1 3.626 3.38c.979-1.274 1.742-2.347 2.272-3.323-2.18-5.516-5.99-10.319-10.438-13.431a22.97 22.97 0 0 0-3.56-2.055c.41.948.569 1.658.325 2.473-.04.13-.088.261-.146.393Zm-1.551-3.437c.129.262.243.498.342.716.477 1.044.554 1.518.397 2.04a2.739 2.739 0 0 1-.067.19 12.602 12.602 0 0 0-.838-.377c-1.246-.509-2.605-.859-3.851-1.18l-.603-.156c-2.688-.704-5.571-.671-8.453-.077a13.32 13.32 0 0 1 4.625-1.948c2.755-.578 5.641-.254 8.448.792Zm-.636-1.275c-2.65-.83-5.375-1.05-8.018-.495-2.426.509-4.754 1.665-6.872 3.563-1.147.36-2.286.8-3.403 1.311-.853.39-1.694.821-2.52 1.289-1.902-.703-3.311-1.599-4.119-2.789l-.827.562c.846 1.246 2.192 2.165 3.858 2.872-.673.415-1.334.855-1.979 1.317-.489.096-.969.215-1.438.359-1.658.51-3.166 1.322-4.481 2.473-3.107 1.568-5.347 3.823-6.791 6.505a16.278 16.278 0 0 0-1.339 3.349 238.8 238.8 0 0 0-3.366-1.257l-.343.94c1.324.483 2.469.913 3.468 1.295-.715 3.295-.527 6.901.424 10.456.701 2.62 1.82 5.227 3.309 7.677a39.1 39.1 0 0 0 .577 2.356c.243.871.517 1.73.825 2.569a4.804 4.804 0 0 1-.338-.026c-2.527-.284-5.404-2.62-8.415-8.853l-.901.435c3.036 6.284 6.125 9.065 9.204 9.412.282.031.561.043.838.034.125.305.254.607.389.906a.903.903 0 0 0-.018.289c.024.301.165.746.339 1.184.181.456.422.966.686 1.416.254.434.56.87.886 1.122.296.229.601.453.914.671 2.376 2.983 5.597 5.115 9.904 5.693.855.115 1.683.039 2.487-.153a.53.53 0 0 1 .008.12c-.005.074-.032.165-.149.293-.271.296-.903.664-2.224 1.171-1.295.496-3.164 1.096-5.815 1.895l.289.958c2.65-.799 4.551-1.409 5.884-1.92 1.305-.5 2.154-.937 2.604-1.429.243-.266.386-.565.408-.9l.002-.026.001-.032c5.273 1.531 10.601 1.57 15.661.379.201-.023.402-.047.602-.072.34.225.727.456 1.187.718.464.264 1.009.564 1.658.92l.308.17.328.18c.94.518 2.08 1.15 3.482 1.953l.497-.868a246.287 246.287 0 0 0-3.497-1.961l-.315-.173-.327-.18a126.8 126.8 0 0 1-1.639-.91l-.133-.076a39.15 39.15 0 0 0 2.62-.521c1.875-.441 3.663-1.016 5.316-1.731 2.719.171 5.409.124 7.996-.207 1.513-.193 3.049-.917 4.117-2.024 1.19-1.234 2.369-2.937 2.436-4.795.099-2.727.053-5.829-1.08-8.457a42.882 42.882 0 0 0 2.947-5.997l-.929-.37a41.988 41.988 0 0 1-2.555 5.302 9.484 9.484 0 0 0-.229-.371c-.308-3.422-1.566-6.831-3.44-10.021.032-3.481-.647-6.908-1.858-10.11.208-.425.378-.842.506-1.258.5-1.631.33-3.189-.605-4.992-.919-1.774-2.589-3.803-5.103-6.42l-.721.693c2.507 2.609 4.088 4.551 4.937 6.187.833 1.606.948 2.894.536 4.239a7.657 7.657 0 0 1-.08.243c-2.305-5.34-6.079-9.957-10.43-13.001a23.337 23.337 0 0 0-4.782-2.599l-.247-.494-.214-.428c-.41-.82-.901-1.816-1.472-3.054l-.909.418a105.795 105.795 0 0 0 1.483 3.076Zm-2.218 9.815-.273.455c-1.894-.546-3.736-.825-5.452-.787-.501.011-.993.05-1.473.117a35.53 35.53 0 0 0-.466-.02 39.895 39.895 0 0 0-3.877-1.27 173.9 173.9 0 0 0 4.766.637l1.12.137c1.864.227 3.764.46 5.655.731Zm.71.76c.124-.208.246-.408.365-.601 2.272.347 4.517.76 6.654 1.301.43 1.092.786 2.222 1.084 3.373a16.878 16.878 0 0 0-.221-.146c-2.581-1.704-5.27-3.057-7.882-3.927Zm-1.708.935a31.461 31.461 0 0 0-3.735-.694 57.1 57.1 0 0 1 3.22 1.606c.176-.316.348-.62.515-.912Zm.362 1.393c.219-.394.432-.769.637-1.124 1.362.393 2.67.88 3.898 1.462 2.089.99 3.935 2.248 5.413 3.771l-.692.17-.378.093-1.547.381a68.358 68.358 0 0 0-7.331-4.753Zm-1.359.396-.093.172.88.475.09-.166a66.82 66.82 0 0 1 6.552 4.192c-.6.152-1.208.309-1.821.473a7.15 7.15 0 0 0-2.342-1.071c-.996-.632-2.046-.983-2.989-.825a2.408 2.408 0 0 0-1.465.836c-2.052-2.256-4.451-4.267-6.929-5.817a8.626 8.626 0 0 1 2.516-.889l.522.21c1.698.694 3.4 1.507 5.079 2.41Zm18.353 19.176c.953.504 1.908 1.008 2.826 1.557-.524 1.491-1.369 2.615-2.446 3.428-1.248.942-2.836 1.489-4.658 1.679-.406.042-.823.067-1.25.074a32.936 32.936 0 0 0-.12-4.757l.034-.033a10.627 10.627 0 0 0 2.233-3.157l.25.032c.834.117 1.494.302 1.948.547.392.212.788.421 1.183.63Zm5.759 9.587c.174-1.996-.063-4.186-.777-6.573.89.698 1.676 1.474 2.301 2.374.049.653.061 1.305.034 1.955a41.405 41.405 0 0 1-1.558 2.244Zm-18.676 13.463c-.297.089-.595.174-.895.254a5.86 5.86 0 0 1-.796-.716 7.968 7.968 0 0 1-.41-.48c1.387.191 2.795.318 4.034.294-.638.237-1.283.453-1.933.648Zm-2.269-1.976a43.961 43.961 0 0 1-.649-.1c-.162-.235-.337-.496-.532-.786l.346-.097a72.26 72.26 0 0 0 6.052 1.248l-.218.022c-1.394.124-3.193-.024-4.999-.287Zm-2.139-.519-.065-.096c-.186.047-.372.092-.557.136.243.048.492.096.744.143l-.122-.183Zm-.66-.979v-.001a89.363 89.363 0 0 1-5.044-1.557c-.069.672-.278 1.283-.663 1.774.386-.098.778-.17 1.174-.21a.518.518 0 0 1 .098-.001h.001l.033.005a.293.293 0 0 1 .033.006l.049.01.133.033.165.041.006.002.135.033.155.039c.341.085.804.198 1.356.326a39.457 39.457 0 0 0 2.369-.5Zm1.947-.52a88.708 88.708 0 0 1-1.327-.348 162.956 162.956 0 0 0-3.75-5.286c.351-.64.638-1.325.868-2.04a48.003 48.003 0 0 0 6.89 3.221l.026.054c.521 1.101 1.54 1.758 2.614 2.193l.21.082c-.395.286-.82.518-1.274.69a55.981 55.981 0 0 1-4.257 1.434Zm-2.828-.77a164.645 164.645 0 0 0-2.818-3.949 8.48 8.48 0 0 1-1.492 1.635c.073.341.123.671.15.99 1.348.465 2.739.91 4.16 1.324Zm-3.66-5.088.659-.49c.207-.403.388-.827.546-1.268-.25.135-.531.23-.843.282-.326.053-.644.091-.954.115-.47.213-.954.405-1.451.576.463.844.833 1.68 1.097 2.48a7.75 7.75 0 0 0 1.158-1.41l-.212-.285Zm7.185 10.071c-.349-.376-.683-.815-1.076-1.377a69.326 69.326 0 0 1-3.901-.781l-.063-.015a32.332 32.332 0 0 1-5.289.492c-.509.237-1.021.497-1.542.762l-.002.001-.003.002h-.002l-.003.002-.001.001c-.2.101-.4.203-.603.304-.281.141-.565.282-.853.417.166.029.332.057.499.084 4.331.706 8.863.853 13.133.406a7.525 7.525 0 0 1-.294-.298Zm-36.024-34.084c-.637 3.071-.458 6.454.445 9.831a27.832 27.832 0 0 0 1.798 4.837c-.709-5.016-.619-10.033-.148-13.84-.608-.244-1.299-.519-2.095-.828Zm2.234-.194c-.585-.234-1.246-.496-2-.788a15.195 15.195 0 0 1 1.282-3.237 14.034 14.034 0 0 1 3.64-4.351c-1.325 2.014-2.299 4.605-2.838 7.846l-.084.53Zm1.702 1.759c.197.616.499 1.257.899 1.917.035-.489.083-.994.146-1.515a39.783 39.783 0 0 1-1.045-.402Zm1.184-.614a74.689 74.689 0 0 1-1.433-.561 4.232 4.232 0 0 1 .025-1.045c.202-.565.437-1.13.703-1.693.181-.251.397-.496.651-.734.332-.312.841-.524 1.405-.589.096-.011.193-.017.288-.02a11.87 11.87 0 0 0-1.591 4.33l-.048.312Zm.83 1.338c-.104.908-.16 1.756-.173 2.548.885 1.137 2.013 2.288 3.315 3.413a33.065 33.065 0 0 1 2.19-3.698l.05-.074c-.444.318-.943.577-1.517.687-.104.02-.239.042-.359.03h-.002c-.04-.004-.231-.022-.373-.189a.523.523 0 0 1-.055-.593.662.662 0 0 1 .14-.174c.038-.035.08-.067.118-.095.077-.057.173-.118.276-.18.207-.126.505-.294.834-.479v-.001c.295-.165.614-.345.916-.522.215-.125.425-.252.624-.377l-.524.017h-.003c-.469.014-.89.027-1.272.037-1.559.041-2.501.029-3.466-.17a8.783 8.783 0 0 1-.719-.18Zm5.423-.687h-.001c-.468.015-.886.028-1.263.038-1.559.04-2.398.023-3.238-.15a8.182 8.182 0 0 1-.79-.205c.024-.161.048-.324.075-.488a10.885 10.885 0 0 1 1.672-4.306c.04.017.079.034.116.053l5.12 4.963-.053.046c-.608.017-1.15.034-1.638.049Zm6.106.87h.012l-.001-.003a2.18 2.18 0 0 1 .488-.061 18.94 18.94 0 0 1 2.368.127c.233.585.507 1.164.817 1.734-.269.007-.539.018-.809.032-.231.012-.406.143-.505.229a2.466 2.466 0 0 0-.325.363c-.208.276-.445.658-.704 1.109-.287.5-.616 1.111-.981 1.794a21.148 21.148 0 0 1-1.664-4.489c.388-.426.82-.715 1.304-.835Zm-3.062.047.561-.012c.035.184.072.367.112.549a7.934 7.934 0 0 0-.737 1.224c-.752 1.524-1.196 3.387-1.492 4.791a9.44 9.44 0 0 0-.194 1.919 43.739 43.739 0 0 1-2.179-1.593l.095-.851.001-.001c.041-.36.08-.703.113-1.024l1.925-2.801.072-.106.013-.127c.01-.097.024-.19.042-.278.367-.502.748-.992 1.139-1.467a4.044 4.044 0 0 1 .529-.223Zm6.502 31.032a26.786 26.786 0 0 1-.274-.059 22.902 22.902 0 0 0-.125-.208l-.058-.095c-.16-.265-.33-.545-.5-.859a10.023 10.023 0 0 1-.275-.549 26.172 26.172 0 0 0 3.883.558c-.161.082-.32.163-.479.242-.742.373-1.461.713-2.172.97Zm3.674-2.839a25.577 25.577 0 0 1-5.568-1.099 9.25 9.25 0 0 1-.113-1.306c2.764.64 5.039.533 6.882-.142.107-.039.213-.08.317-.123.411.152.827.302 1.247.451-.033.777-.269 1.343-.663 1.702-.407.372-1.069.603-2.102.517Zm-6.624-1.459a10.69 10.69 0 0 1-.058-1.204c-2.198-.625-4.685-1.697-7.485-3.295-1.011-.577-1.802-1.303-2.398-2.143a5.363 5.363 0 0 1-.144.084c2.784 2.827 6.189 5.137 10.085 6.558Zm6.652-1.776c-1.527.372-3.402.361-5.678-.19.043-.573.131-1.194.275-1.87.092-.427.205-.876.344-1.348.396.034.788.056 1.175.066.843 1.386 2.075 2.633 3.591 3.228l.117.046.176.068Zm-6.381-2.268c.086-.402.19-.82.314-1.255a21.92 21.92 0 0 1-4.468-1.129c-1.461-.533-2.504-1.415-3.238-2.497a15.596 15.596 0 0 1-1.982 1.733 6.41 6.41 0 0 0 2.055 1.825c2.665 1.521 5.001 2.533 7.041 3.136.05-.563.14-1.166.278-1.813Zm-3.811-3.324a20.77 20.77 0 0 0 4.425 1.101c.177-.529.383-1.082.619-1.66-.27-.734-.5-1.447-.69-2.14-1.598-.436-3.387-1.075-5.382-1.942a30.659 30.659 0 0 1-1.851 2.329c.644 1.027 1.571 1.835 2.879 2.312Zm5.767 1.227a17.284 17.284 0 0 1-.321-.021c.045-.13.091-.262.14-.395a44.284 44.284 0 0 0 .181.416Zm.841-.569a33.717 33.717 0 0 1-.489-1.198c.219-.516.463-1.053.736-1.612l.229.034c.283.369.596.714.941 1.028a7.05 7.05 0 0 0 2.611 1.513l.216.329a16.347 16.347 0 0 1-3.958.504 8.587 8.587 0 0 1-.286-.598Zm2.339-5.96-.323-.123.068-.116.255.239Zm-1.264-.496.272-.459c-.16-.16-.318-.321-.474-.483-.408.098-.813.189-1.215.272l.013.068c.469.21.937.411 1.404.602Zm2.137-1.569c-.123.192-.243.382-.361.569 1.228 1.026 2.627 1.825 4.079 2.169.123-.158.231-.325.326-.5.478-.883.633-2.01.481-3.283a15.462 15.462 0 0 0-.221-.398c-.971.362-1.943.702-2.909 1.013-.467.15-.932.294-1.395.43Zm2.499-3.66a84.413 84.413 0 0 0-1.64 2.352l.229-.073c.892-.288 1.789-.6 2.687-.932a17.415 17.415 0 0 0-.471-.689 30.672 30.672 0 0 1-.805-.658Zm-3.137 2.804a83.11 83.11 0 0 1 2.38-3.465 27.186 27.186 0 0 1-2.172-2.192 6.165 6.165 0 0 0-1.486-.591 6.932 6.932 0 0 0-1.028 1.674 9.531 9.531 0 0 0-.645 2.149c.5.889 1.18 1.821 1.997 2.688.317-.084.635-.171.954-.263Zm4.241-3.407a20.944 20.944 0 0 0-.352-.426l.094-.128c.091.185.177.37.258.554Zm-1.027-1.195.716.533a16.963 16.963 0 0 0-2.601-3.785l-.07.014a4.4 4.4 0 0 0-1.185.456l.007.009c.245.314.501.625.767.931.497.286.975.627 1.431 1.007.316.265.624.55.922.853l.013-.018Zm-6.103 9.558.025-.049a9.572 9.572 0 0 1-.417-.887c-.312-.056-.62-.115-.924-.179.058.284.123.572.195.864.388.097.761.18 1.121.251Zm-.659 1.356c.065-.142.132-.285.201-.429a29.538 29.538 0 0 1-.36-.078c.05.167.103.336.159.507Zm-.981 12.831a10.06 10.06 0 0 1-.6-1.322c-3.768-1.026-7.44-2.94-11.103-5.884a1.73 1.73 0 0 1-.268-.301 8.425 8.425 0 0 1-.304-.446 18.96 18.96 0 0 1-.788-1.374 6.555 6.555 0 0 1-.409.097c.103.246.21.49.32.732.057.042.108.09.154.137 3.944 4.009 8.142 6.797 12.412 8.523.263.071.527.14.793.207a14.839 14.839 0 0 1-.207-.369Zm-13.52-10.245c-.11.026-.22.048-.33.066a31.826 31.826 0 0 1-.808-2.434c.112.151.226.301.341.45.242.674.518 1.325.797 1.918Zm1.609-.614a30.134 30.134 0 0 1-1.516-1.787 16.09 16.09 0 0 1-.298-.951c-.384-1.386-.514-2.699-.197-3.691.154-.484.414-.889.805-1.199.266-.212.607-.39 1.042-.516a17.49 17.49 0 0 0-.373 2.131c-.233 2.134.005 4.151.873 5.824a9.474 9.474 0 0 1-.336.189Zm3.155-2.518c-.566-1.152-.867-2.458-1.006-3.779a17.13 17.13 0 0 1-.037-.39 20.642 20.642 0 0 1-1.39-.844 16.209 16.209 0 0 0-.265 1.626c-.213 1.954-.003 3.716.72 5.16a15.012 15.012 0 0 0 1.978-1.773Zm.728-.808c-.362-.849-.585-1.799-.709-2.806a68.07 68.07 0 0 0 2.123 1.014 29.27 29.27 0 0 1-1.324 1.687l-.09.105Zm2.934-2.212c1.666.717 3.167 1.263 4.516 1.66-.06-.274-.115-.544-.163-.812-1.206-.308-2.316-.7-3.268-1.213a18.515 18.515 0 0 1-.822-.025l-.263.39Zm-.931-.411.057-.082a12.449 12.449 0 0 1-.345-.049l.288.131Zm.708-1.059-.026.04c-1.22-.112-2.33-.371-3.307-.799l-.209-.095a21.212 21.212 0 0 1-.007-.564c1.017.027 2.007.153 2.965.364.153.376.346.733.584 1.054Zm1.258-.113.215-.346c.437.157.865.332 1.285.521-.405.026-.802.041-1.189.043a2.315 2.315 0 0 1-.311-.218Zm1.034-1.71a100.954 100.954 0 0 0 1.716-3.075l.08-.148c.192.32.391.637.598.951a13.665 13.665 0 0 0-.397 3.361 52.078 52.078 0 0 1-1.997-1.089Zm1.212-4.25-.376.701c-.518.96-1.086 1.993-1.699 3.043a48.115 48.115 0 0 1-1.499-.934 8.491 8.491 0 0 1 .144-2.398c.295-1.4.72-3.154 1.411-4.554.057-.117.116-.231.177-.34a22.772 22.772 0 0 0 1.842 4.482Zm1.137-.007c.138.244.282.487.429.728l.028-.075a4.422 4.422 0 0 1-.148-1.233l-.241.453-.068.127Zm1.239-2.284c.211-.119.451-.198.712-.238.088-.014.177-.026.265-.035.268-.359.554-.705.855-1.04-.328.007-.655.018-.983.034a1.647 1.647 0 0 0-.172.201c-.169.223-.38.56-.635 1.004l-.042.074Zm2.826-2.319-.167-.001c-.235-.399-.45-.803-.644-1.208.416.257.822.54 1.216.844-.137.12-.272.242-.405.365Zm.473 1.006c.167.003.334.008.501.013-.122.06-.242.125-.358.194a25.645 25.645 0 0 1-.143-.207Zm4.684.312.614.067c1.027 1.533 2.608 2.913 4.402 3.93.054.23.108.461.164.691-.617.271-1.238.537-1.863.796a17.219 17.219 0 0 0-.552-1.537c-.624-1.498-1.433-2.782-2.388-3.638a5.416 5.416 0 0 0-.377-.309Zm-.103-1.016a63.25 63.25 0 0 0-2.612-.217c-.153-.149-.31-.296-.469-.44.151-.116.305-.23.461-.342.883.289 1.757.625 2.62.999Zm4.164.507c-.372-.05-.744-.099-1.118-.147a38.082 38.082 0 0 0-2.166-1.064c-.307-.739-.443-1.477-.381-2.187.93-.481 1.902-.922 2.901-1.33.041.49.107 1.015.201 1.576.175 1.051.362 2.102.563 3.152Zm-2.08.738.653.083c.606.324 1.204.663 1.793 1.014.091.437.184.874.28 1.311-1.057-.697-1.996-1.521-2.726-2.408Zm3.332.44c1.042.14 2.087.279 3.132.402.114.608.182 1.215.209 1.817a57.711 57.711 0 0 0-3.336-2.193l-.005-.026Zm2.897-.633a241.856 241.856 0 0 1-3.103-.404 133.27 133.27 0 0 1-.623-3.457c-.11-.662-.179-1.26-.213-1.797.235-.09.472-.178.71-.265 1.633 1.885 2.683 3.898 3.229 5.923Zm1.977 1.225.733.069.088-.996a71.436 71.436 0 0 1-1.028-.099c-.547-2.283-1.665-4.586-3.149-6.759a77.61 77.61 0 0 1 3.105-.938c.289.311.573.649.848 1.013 1.409 1.865 2.534 4.345 2.808 7.021a132.034 132.034 0 0 1-3.28 1.698 13.264 13.264 0 0 0-.125-1.009Zm21.853 11.639.066-.105c.779 2.246.827 4.861.737 7.35-.054 1.482-1.018 2.956-2.156 4.137-.898.93-2.219 1.559-3.525 1.726a39.35 39.35 0 0 1-5.971.282 20.188 20.188 0 0 0 2.89-1.873c1.087-.023 2.158-.222 3.168-.709 1.498-.721 2.443-2.092 3.09-3.588.647-1.496 1.025-3.188 1.343-4.628.19-.859.307-1.724.358-2.592Zm-9.55 11.439a21.677 21.677 0 0 1-3.375 1.854 51.92 51.92 0 0 1-.786-.059 37.127 37.127 0 0 0 3.059-1.955l.36.06c.247.039.495.072.742.1Zm-6.69 1.391a.954.954 0 0 1-.086.124 67.117 67.117 0 0 1-6.107-1.099c.892-.291 1.793-.61 2.704-.956a6.483 6.483 0 0 0 1.686-.949l1.803 2.88Zm-16.37-4.911a6.87 6.87 0 0 1-.981.571 87.289 87.289 0 0 1-1.384-.531c-1.086-.426-2.039-1.282-2.765-2.305 1.36-.054 2.662-.26 3.891-.598.567 1.003.983 1.975 1.239 2.863Zm-6.512-11.965.581-.126c-.217-.243-.43-.487-.638-.735.008.287.028.575.057.861Zm3.17-11.228-.051.04-.069-.054-.035-.028.155.042Zm3.462.128a31.313 31.313 0 0 0-1.235-.471c.348-.221.705-.435 1.071-.643.015.374.071.746.164 1.114Zm1.198-2.954a39.516 39.516 0 0 1 2.498-1.095 9.435 9.435 0 0 1 .072-1.281l-.132-.117c-.296.194-.597.411-.903.653-.743.587-1.237 1.208-1.535 1.84Zm9.605 8.567c-.002.142-.006.282-.013.423a44.119 44.119 0 0 1 3.229-.544 11.609 11.609 0 0 0 .087-1.575 136.796 136.796 0 0 1-3.303 1.696Zm-1.832 2.056a11.613 11.613 0 0 1-.307-.082c-.642.186-1.216.38-1.698.578.169.654.344 1.306.526 1.956.254.112.506.214.756.307a13.39 13.39 0 0 0 .723-2.759Zm-2.923.941c.079.304.16.608.242.912-.19-.106-.381-.217-.573-.334a.827.827 0 0 1-.183-.147l.001-.002c.027-.05.101-.142.267-.265.071-.053.153-.108.246-.164Zm-.852 1.432c.49.299.977.563 1.459.794l.062.216a35.189 35.189 0 0 1-2.457-1.373c-.066-.331-.14-.658-.221-.98.242-.099.483-.2.724-.302a1.225 1.225 0 0 0-.109.17.961.961 0 0 0-.051.849c.115.271.342.473.593.626Zm5.701 2.026a11.62 11.62 0 0 1-2.082-.403c-.046.102-.093.203-.142.304.559.24 1.12.464 1.68.669.19-.189.371-.379.544-.57Zm-1.573-1.299c.457.121.905.21 1.345.268-.063-.29-.121-.58-.178-.866l-.001-.001c-.048-.239-.095-.475-.143-.702-.04-.186-.081-.367-.124-.543a9.513 9.513 0 0 1-.899 1.844Zm5.321-3.339a12.688 12.688 0 0 1-1.69 3.63 8.408 8.408 0 0 0 4.537-1.991 34.294 34.294 0 0 0-.438-2.859c-.204.011-.409.024-.616.039a6.136 6.136 0 0 1-1.793 1.181Zm-2.606 4.849.134-.163a9.411 9.411 0 0 0 5.43-1.856c.101 1.338.121 2.668.056 3.952-1.627-.071-3.363-.371-5.133-.87a5.581 5.581 0 0 1-.487-1.063Zm6.352-4.1a35.422 35.422 0 0 0-.326-2.008l.153-.003a23.429 23.429 0 0 1 1.517.023 9.667 9.667 0 0 1-1.344 1.988Zm-4.585-1.498.035-.157a43.946 43.946 0 0 0-2.775.476c.969.063 1.898-.035 2.74-.319Zm1.233-1.31c.318-.034.635-.064.951-.09.237-.254.458-.542.66-.864a30.78 30.78 0 0 0-.462-1.628c-.358.198-.724.398-1.099.601a13.164 13.164 0 0 1-.05 1.981Zm3.162-.202c-.113.001-.227.004-.342.007a29.374 29.374 0 0 0-.14-.603c.203-.37.384-.773.54-1.208l.546.398a131.028 131.028 0 0 1 2.114-2.82 11.344 11.344 0 0 1-.747 4.272 22.52 22.52 0 0 0-1.971-.046Zm5.77-7.052c-.209.154-.81.552-1.724 1.124l-.066.083c2.433 2.513 4.338 5.007 5.444 7.232a23.73 23.73 0 0 0 .376-3.778l-.126-.208a36.244 36.244 0 0 0-4.027-5.359l-.163.207-.117.149.403.55Zm-2.77 7.205a12.48 12.48 0 0 0 .703-4.84c2.313 2.454 4.064 4.841 5.013 6.911.091.198.179.394.263.59a69.898 69.898 0 0 0-2.554-1.394l-.002-.002c-.388-.205-.771-.407-1.145-.609-.603-.326-1.394-.532-2.278-.656Zm7.118 2.788c.105.256.205.511.3.764.942.628 1.834 1.328 2.613 2.142-.398-2.223-1.2-4.443-2.315-6.598a24.595 24.595 0 0 1-.598 3.692Zm-7.27-11.774c.253.688.448 1.377.589 2.061l.576-.729v-.001c.331-.418.647-.817.946-1.2a42.178 42.178 0 0 0-4.18-3.848 13.873 13.873 0 0 1 2.069 3.717Zm-.939.345a12.783 12.783 0 0 0-1.653-3.092c.129.838.238 1.673.332 2.499l.002.02c.554.485 1.092.974 1.612 1.464a13.425 13.425 0 0 0-.293-.891Zm2.741-7.676c-1.835-1.001-3.902-1.777-6.104-2.399a32.562 32.562 0 0 1 1.132 3.917c.441.318.878.647 1.311.986a61.455 61.455 0 0 0 2.026-.559c.178-.053.421-.192.684-.411.256-.214.5-.479.684-.744.191-.275.286-.508.305-.66.008-.07-.003-.099-.005-.103l-.003-.006c-.003-.002-.011-.01-.03-.021Zm-29.298-9.294c-.489.56-.964 1.166-1.423 1.82a31.455 31.455 0 0 1-1.598-.421 31.027 31.027 0 0 1 3.021-1.399Zm-5.188 2.657c.32-.202.643-.399.969-.59.48.164.979.315 1.495.455.232.063.467.124.707.183l-.012.019a20.723 20.723 0 0 0-3.159-.067Zm6.147 2.492a33.381 33.381 0 0 1 2.658-.243c-1.754-.536-3.475-.919-5.129-1.12-.075.124-.149.249-.222.375.888.251 1.79.585 2.693.988Zm2.908.746c-.414.019-.827.046-1.238.08.108.058.216.118.323.178l.236.133a8.83 8.83 0 0 1 .679-.391Zm-6.102-.834c.423.112.853.246 1.287.4a29.64 29.64 0 0 0-1.69.381c.133-.266.267-.526.403-.781Zm3.043 1.118c-1.379.195-2.722.48-4.004.853-1.424 3.235-2.005 6.355-1.903 9.321 1.268-1.209 2.602-2.258 3.958-3.076.063-.375.148-.75.255-1.125.651-2.287 1.747-4.012 3.188-5.217-.5-.274-.998-.527-1.494-.756Zm-4.661-.118-.067.145c-1.625.503-3.156 1.148-4.543 1.936-1.944 1.104-3.615 2.494-4.862 4.17a4.057 4.057 0 0 0-1.819.151 26.319 26.319 0 0 1 1.895-2.673 32.085 32.085 0 0 1 4.653-4.671 24.62 24.62 0 0 1 2.029-.399c1.022-.158 2.142-.113 3.323.11-.208.398-.411.808-.609 1.231Zm-4.117 2.951c-1.731.983-3.209 2.189-4.336 3.616l.05.026.062.033.05.049 5.253 5.093.052.035c.159-.094.324-.177.495-.248l.298-.316c-.252-3.13.219-6.436 1.597-9.868a21.467 21.467 0 0 0-3.521 1.58Zm-4.12 17.131a28.657 28.657 0 0 1-2.826-2.737c.09 1.338.326 2.487.684 3.466a7.955 7.955 0 0 0 1.052 1.996c.304-.906.67-1.819 1.09-2.725Zm-3.081 1.072c-.515-1.407-.786-3.091-.786-5.082a15.726 15.726 0 0 1-.44-.619c-.577-.856-1.029-1.72-1.316-2.576a12.19 12.19 0 0 0-.156 2.737c.155 2.593 1.222 5.087 3.519 7.246a9.296 9.296 0 0 1-.821-1.706Zm12.581 5.595c-.257.033-.513.061-.766.086.26.086.528.167.803.244-.013-.111-.026-.221-.037-.33Zm25.342-19.261-.754.185a69.915 69.915 0 0 1 2.061 1.654l.055.046a54.447 54.447 0 0 0-.318-2.141l-.661.163-.377.092-.006.001Zm-2 .494c-.62.155-1.25.314-1.887.481 1.825 1.656 3.283 4.191 4.332 7.095.377-.212.742-.419 1.094-.622.14-1.166.149-2.526-.006-4.104a67.114 67.114 0 0 0-3.533-2.85Zm3.006 9.291a34.656 34.656 0 0 0-.232-.752l.543-.306c-.088.377-.193.73-.311 1.058Zm1.231-.614c.089-.349.164-.716.224-1.1.377-.219.738-.43 1.081-.633-.421.55-.857 1.127-1.305 1.733Zm2.015-3.324a129.6 129.6 0 0 1-1.651.985c.056-.781.061-1.625.009-2.534a56.255 56.255 0 0 1 1.642 1.549Zm-8.373-3.709c1.5 1.546 2.752 3.804 3.681 6.427-.286.158-.578.319-.876.481-.35-2.629-1.447-5.042-2.805-6.908Zm-3.48-2.075c.282.189.568.408.854.657-.959.275-1.924.57-2.883.888a30.738 30.738 0 0 0-.997-1.278l-.035-.043a6.112 6.112 0 0 1 1.809-.338c.427-.012.845.027 1.252.114Zm-2.652 10.97c.744.471 1.472.957 2.182 1.453l-.777.363c-.38-.159-.753-.335-1.118-.528-.098-.428-.194-.858-.287-1.288Zm-6.654-6.309c.177-.1.355-.198.535-.295.248-1.183.953-2.298 2.18-3.268.243-.192.486-.371.727-.538a25.04 25.04 0 0 0-.8-.612c-2.412-1.761-5.419-1.468-8.52.232l-.187.104c-.169 1.424-.009 2.858.426 4.273.299.011.594.021.885.028 1.445.037 2.776.015 3.842-.215l.158.734c.248-.151.5-.299.754-.443Zm-1.84 1.144c.172-.118.347-.234.523-.348-.418.06-.857.098-1.311.119.264.072.526.149.788.229Zm-2.532 3.495c-.108.12-.214.241-.317.364l.092.013a5.91 5.91 0 0 1 .297-.274 3.212 3.212 0 0 1-.072-.103Zm-1.048 1.321a11.746 11.746 0 0 0-1.24 2.291c.021.07.045.141.07.213.115-.376.25-.741.405-1.091.221-.502.485-.977.791-1.413h-.026Zm8.269 4.399.591-.234a16.175 16.175 0 0 0-.547-1.531c-.59-1.418-1.325-2.556-2.131-3.278a3.761 3.761 0 0 0-.917-.621c1.408 1.762 2.463 3.751 3.004 5.664Zm-10.362 3.034c.166-.027.332-.056.498-.085a12.587 12.587 0 0 1-.046-2.271l-.28-.376a13.472 13.472 0 0 0-.172 2.732Zm25.594 17.885-.279-.031c-.246.126-.494.248-.743.367.346-.107.686-.219 1.022-.336Zm6.993-32.852a38.238 38.238 0 0 1 3.493 4.445 27.195 27.195 0 0 0-1.463-7.296c-.53.856-1.19 1.759-1.951 2.748l-.079.103Zm-35.703-13.061a19.605 19.605 0 0 1 2.173.041l-.133.232a12.853 12.853 0 0 0-2.04-.273Zm-9.244 5.525a26.46 26.46 0 0 0-2.608 3.878c.898-2.854 2.239-4.958 3.899-6.443a18.177 18.177 0 0 1 1.827-.782 32.183 32.183 0 0 0-3.118 3.347Zm-3.959 16.348c.074 2.861.373 5.899.988 8.847.109.176.219.352.332.527-.132-.95-.119-1.887.143-2.71a3.424 3.424 0 0 1 1.909-2.147c-1.573-1.371-2.679-2.894-3.372-4.517Zm4.906 15.764a17.483 17.483 0 0 1-.618-1.058c2.858 2.941 6.362 5.357 10.383 6.861-3.165-1.053-6.281-2.782-9.409-5.297.006.005.006.005-.001-.003-.011-.013-.041-.047-.092-.115a7 7 0 0 1-.263-.388Zm43.706 4.678a11.759 11.759 0 0 1-1.199-.081 39.7 39.7 0 0 0 4.816-4.376c-.243.499-.52.978-.827 1.436-.75 1.116-1.69 2.123-2.79 3.021Zm-2.578-.3a38.844 38.844 0 0 0 7.083-6.681c.586-2.559.391-5.55-.836-9.01-.592 1.524-1.509 2.716-2.677 3.598-1.428 1.078-3.203 1.672-5.157 1.876-.463.048-.937.074-1.421.08-.064.759-.159 1.5-.285 2.217a20.909 20.909 0 0 1-.335 1.553 9.3 9.3 0 0 1 .715 1.004c.346.565.644 1.549.716 2.366.035.402.023.844-.125 1.193a1.016 1.016 0 0 1-.417.496.984.984 0 0 1-.694.106 42.352 42.352 0 0 1-2.309-.506 8.79 8.79 0 0 1-.24.301c.364.088.729.168 1.086.246l.27.06c.66.146 1.318.313 1.976.48h.001v.001c.881.224 1.761.448 2.649.62Zm-4.01-10.154a22.63 22.63 0 0 1-4.09-.585c.607.675 1.306 1.299 2.032 1.946l.03.027c.534.476 1.082.966 1.598 1.494.059-.269.113-.543.162-.822a24.05 24.05 0 0 0 .268-2.06Zm-5.7-1.01c-.429-.127-.86-.265-1.29-.413-.419.386-.87.766-1.357 1.138-.064.049-.13.097-.198.143l.147.416a9.38 9.38 0 0 1 1.651.68c.859.466 1.545 1.079 1.921 1.902.353.774.405 1.672.15 2.698l.784 1.251c.58.179 1.16.346 1.739.5.595-.919 1.072-2.024 1.432-3.272-.588-.658-1.266-1.269-1.973-1.899l-.077-.069c-1.031-.919-2.115-1.886-2.929-3.075Zm-.412-4.191c.074.367.146.726.228 1.082a12.044 12.044 0 0 0 1.77-3.276 8.499 8.499 0 0 1-2.467.183c.127.417.226.843.316 1.261.054.254.104.503.153.75Zm-14.692-22.826c2.576 1.553 5.091 3.637 7.214 5.992-.088.047-.177.096-.266.146-.352-.291-.72-.577-1.105-.857-2.699-1.972-5.944-1.674-9.058-.116.018-.071.038-.141.058-.211.65-2.283 1.753-3.893 3.157-4.954Zm8.12 7.043c.18.218.356.438.528.66-.19-.195-.386-.389-.589-.581l.028-.119.033.04Zm-.028 20.404c.5-.196.998-.457 1.489-.787-.228.305-.47.602-.723.89a54.71 54.71 0 0 0-.766-.103Zm1.83-2.32c-.669.6-1.35 1.032-2.034 1.323a21.016 21.016 0 0 0-.195-2.66c.764.444 1.544.859 2.333 1.243l-.104.094Zm-19.951-2.625.058.036-.051-.013-.007-.023Zm-1.181-.758c.026.182.058.362.096.54a16.703 16.703 0 0 0-2.613-.275c.026-.665.074-1.321.132-1.952a45.768 45.768 0 0 0 2.385 1.687Zm-3.321-2.402a42.427 42.427 0 0 0-.196 2.672c-.283.01-.567.027-.853.052.285-.9.638-1.813 1.049-2.724Zm13.694 10.203a5.205 5.205 0 0 1-.153-.144l.215.009c.186.205.366.412.541.62a6.3 6.3 0 0 1-.603-.485Zm2.52 1.336a21.27 21.27 0 0 0-1.156-1.499c.482-.04.929-.114 1.343-.217.328-.083.635-.185.922-.305.79.582 1.604 1.138 2.437 1.668-.386.226-.785.435-1.197.628a7.356 7.356 0 0 1-2.308-.217l-.041-.058Zm-.057-2.686c.072-.019.144-.038.213-.058a43.32 43.32 0 0 1-.402-.319l-.022-.007a90.47 90.47 0 0 1-2.633-.28c.306.29.601.586.885.886a8.153 8.153 0 0 0 1.959-.222Zm4.539 1.74a42.391 42.391 0 0 1-2.19-1.454c.882.19 1.736.327 2.55.404a3.835 3.835 0 0 1-.133.891c-.075.054-.151.107-.227.159Zm7.282 3.67a46.762 46.762 0 0 1-6.015-2.911c.043-.178.083-.357.119-.538a15.62 15.62 0 0 0 1.391-1.235 9.197 9.197 0 0 0 1.136-.158c.554.104 1.075.22 1.559.353a69.184 69.184 0 0 0 1.81 4.489Zm-6.873-10.491c.112.631.197 1.276.25 1.927a17.84 17.84 0 0 0-.891-2.087l-.154-.3-.009-.063c.265.178.533.352.804.523Zm-.806 1.951c.235.625.419 1.236.547 1.816a6.062 6.062 0 0 1-1.218.035 5.354 5.354 0 0 0 .671-1.851Zm-7.595 3.265a22.977 22.977 0 0 0-.162-.154c.031.049.064.098.097.146l.065.008Zm11.839-.596.049.009c.356-.083.683-.191.981-.323a71.455 71.455 0 0 1-.247-.741c-.245.362-.506.714-.783 1.055Zm2.737-1.518c-.263.228-.54.455-.829.678a79.84 79.84 0 0 1-.382-1.17c.402.172.806.336 1.211.492Zm2.027 7.897a67.21 67.21 0 0 1-1.923-4.593c.26.105.503.218.727.34.737.4 1.231.874 1.488 1.439.256.559.311 1.275.04 2.226l-.061.214.118.188.261.417a84.17 84.17 0 0 1-.65-.231Zm1.012 1.409c.157.052.314.103.472.153l.159.255a4.357 4.357 0 0 1-.631-.408Zm3.907 2.473a51.707 51.707 0 0 1-.934-.21l1.686 2.693.118.189-.059.207a35.788 35.788 0 0 0 3.187-1.909 77.1 77.1 0 0 1-1.851-.454c-.646-.164-1.275-.324-1.87-.455l-.277-.061Zm-1.982-1.883.154.246.144-.163-.12-.033-.178-.05Zm-25.629-26.241c1.312-.025 2.589.22 3.803.667a11.3 11.3 0 0 1-.396-3.464c-1.162.772-2.31 1.72-3.407 2.797Zm29.483 26.125a40.51 40.51 0 0 1-1.898-.407c.465-.775.852-1.644 1.165-2.579.074.108.146.218.214.33.249.406.512 1.233.573 1.931.031.356.001.597-.049.715l-.005.01Zm9.445.021a12.758 12.758 0 0 0 1.806-4.062 42.685 42.685 0 0 0 1.666-2.182c-.035.189-.073.378-.114.566-.322 1.455-.682 3.053-1.285 4.447-.603 1.394-1.418 2.512-2.606 3.085a5.942 5.942 0 0 1-1.423.47 14.362 14.362 0 0 0 1.956-2.324Zm-47.502.623a40.014 40.014 0 0 0 4.127 3.235 26.275 26.275 0 0 1-3.137-1.841c-.348-.445-.678-.91-.99-1.394Zm10.704 6.767c-2.448-.666-4.772-1.522-6.877-2.564 1.809 1.361 3.961 2.289 6.51 2.631.218.029.434.044.649.045l-.282-.112Zm2.353-28.653-.006.005a.028.028 0 0 1 .006-.005Z\"\n      clip-rule=\"evenodd\"\n    />\n    <path\n      fill=\"#B3B3B3\"\n      fill-rule=\"evenodd\"\n      d=\"M345.924 210.763c.651.115 1.302.235 1.953.361a.501.501 0 0 0 .587-.396.498.498 0 0 0-.395-.585 123.56 123.56 0 0 0-1.969-.364.5.5 0 0 0-.176.984Zm-3.915-.628a.5.5 0 1 0 .145-.989c-1.325-.19-2.647-.358-3.966-.503a.502.502 0 0 0-.553.443.498.498 0 0 0 .441.551c1.308.143 2.619.31 3.933.498Zm-7.88-.863a.5.5 0 1 0 .078-.997c-1.335-.1-2.666-.176-3.993-.228a.499.499 0 1 0-.042.999c1.315.052 2.635.127 3.957.226Zm-7.919-.308a.5.5 0 1 0 .005-1c-1.338-.003-2.672.02-4 .067a.5.5 0 1 0 .033.999 104.39 104.39 0 0 1 3.962-.066Zm-7.919.286a.5.5 0 1 0-.073-.997 101.21 101.21 0 0 0-3.986.381.502.502 0 0 0-.44.554.498.498 0 0 0 .554.439 96.962 96.962 0 0 1 3.945-.377Zm-7.872.916a.5.5 0 0 0-.154-.987 94.49 94.49 0 0 0-3.942.712.5.5 0 1 0 .197.979 93.775 93.775 0 0 1 3.899-.704Zm-7.764 1.576a.502.502 0 0 0 .366-.606.498.498 0 0 0-.605-.364 90.02 90.02 0 0 0-3.866 1.054.5.5 0 1 0 .283.958 87.982 87.982 0 0 1 3.822-1.042Zm-7.594 2.254a.5.5 0 1 0-.326-.944 87.78 87.78 0 0 0-3.755 1.399.501.501 0 0 0 .369.929 87.135 87.135 0 0 1 3.712-1.384Zm-7.357 2.937a.5.5 0 1 0-.412-.91 85.43 85.43 0 0 0-3.61 1.742.5.5 0 1 0 .454.889 85.254 85.254 0 0 1 3.568-1.721Zm-7.051 3.606a.5.5 0 0 0 .187-.682.501.501 0 0 0-.683-.185c-1.155.661-2.3 1.35-3.432 2.069a.5.5 0 0 0 .535.844 85.755 85.755 0 0 1 3.393-2.046Zm-6.687 4.246a.5.5 0 1 0-.574-.818 87.857 87.857 0 0 0-3.227 2.376.5.5 0 1 0 .611.79 86.981 86.981 0 0 1 3.19-2.348Zm-6.272 4.839a.5.5 0 0 0-.646-.763 92.66 92.66 0 0 0-3.002 2.654.5.5 0 1 0 .678.733 89.608 89.608 0 0 1 2.97-2.624Zm-5.824 5.375a.5.5 0 1 0-.708-.704 96.586 96.586 0 0 0-2.765 2.899.499.499 0 1 0 .738.673 96.995 96.995 0 0 1 2.735-2.868Zm-5.352 5.846a.499.499 0 1 0-.764-.643 102.134 102.134 0 0 0-2.523 3.109.5.5 0 1 0 .789.613c.82-1.051 1.653-2.078 2.498-3.079Zm-4.876 6.251a.5.5 0 1 0-.812-.583 112.731 112.731 0 0 0-2.281 3.287.498.498 0 1 0 .831.554c.742-1.11 1.496-2.196 2.262-3.258Zm-4.407 6.593a.5.5 0 0 0-.85-.524c-.352.567-.7 1.14-1.045 1.719a.5.5 0 1 0 .859.51c.343-.574.688-1.142 1.036-1.705Zm-38.412-20.055c1.365.214 2.691.457 3.979.728a.5.5 0 0 0 .208-.978 79.055 79.055 0 0 0-4.029-.738.5.5 0 1 0-.158.988Zm8.171.711a.501.501 0 0 0-.266.964c1.33.364 2.614.763 3.851 1.196a.501.501 0 0 0 .333-.943 58.423 58.423 0 0 0-3.918-1.217Zm-12.188-1.247a.5.5 0 1 0 .113-.994 104.14 104.14 0 0 0-4.068-.369.502.502 0 0 0-.535.463.497.497 0 0 0 .462.534c1.374.098 2.717.22 4.028.366Zm-8.076-.582a.502.502 0 0 0 .519-.482.498.498 0 0 0-.481-.517 132.262 132.262 0 0 0-4.087-.085.5.5 0 1 0-.008 1c1.379.007 2.732.035 4.057.084Zm28.002 4.553a.501.501 0 0 0-.408.914 43.172 43.172 0 0 1 3.596 1.792.503.503 0 0 0 .682-.193.5.5 0 0 0-.192-.68 44.524 44.524 0 0 0-3.678-1.833Zm-36.115-4.603a.501.501 0 0 0 .49-.511.497.497 0 0 0-.509-.488c-.677.014-1.36.034-2.049.058a.5.5 0 1 0 .032.999 160.31 160.31 0 0 1 2.036-.058Zm43.277 8.626a.501.501 0 0 0-.579.817 34.172 34.172 0 0 1 3.134 2.496.502.502 0 0 0 .707-.038.499.499 0 0 0-.037-.706 35.173 35.173 0 0 0-3.225-2.569Zm6.116 5.51a.501.501 0 0 0-.758.655 31.154 31.154 0 0 1 2.418 3.184.5.5 0 0 0 .693.139.499.499 0 0 0 .141-.692 32.081 32.081 0 0 0-2.494-3.286Zm4.551 6.861a.5.5 0 0 0-.897.445c.295.594.573 1.202.835 1.821a.5.5 0 0 0 .922-.39 34.775 34.775 0 0 0-.86-1.876Z\"\n      clip-rule=\"evenodd\"\n    />\n    <defs>\n      <linearGradient\n        id=\"desert-on__a\"\n        x1=\"252\"\n        x2=\"252\"\n        y1=\"123.952\"\n        y2=\"277.054\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stop-color=\"#FFEBB3\" />\n        <stop offset=\"1\" stop-color=\"#fff\" stop-opacity=\"0\" />\n      </linearGradient>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template>\n  <div class=\"x-flex-1\">\n    <BaseIdModalClose modalId=\"my-history-aside\" #closing-element=\"{ closeModal }\">\n      <MyHistory\n        v-if=\"$x.isHistoryQueriesEnabled && $x.fullHistoryQueries.length\"\n        :animation=\"animation\"\n        class=\"x-px-16 x-pb-32 desktop:x-pl-32\"\n        queriesListClass=\"x-gap-16\"\n      >\n        <template #date=\"{ date }\">\n          <div class=\"x-title4 x-title4-sm x-py-16 x-text-neutral-75\">{{ date }}</div>\n        </template>\n\n        <template #suggestion=\"{ suggestion, formatTime }\">\n          <HistoryQuery\n            @click=\"closeModal\"\n            data-test=\"my-history-query\"\n            :suggestion=\"suggestion\"\n            suggestionClass=\"x-suggestion\"\n          >\n            <HistoryIcon class=\"max-desktop:x-icon-lg\" />\n\n            <div class=\"x-flex x-flex-col x-gap-2\">\n              <p>{{ suggestion.query }}</p>\n              <p class=\"x-text1 x-text1-sm x-text-neutral-75\">\n                {{ formatTime(suggestion.timestamp) }}\n                <template v-if=\"suggestion.totalResults !== undefined\">\n                  -\n                  {{ $t('myHistory.suggestionResults', { totalResults: suggestion.totalResults }) }}\n                </template>\n              </p>\n            </div>\n\n            <template #remove-button-content>\n              <CrossTinyIcon class=\"x-icon-lg\" />\n            </template>\n          </HistoryQuery>\n        </template>\n      </MyHistory>\n\n      <div v-else class=\"x-flex x-flex-1 x-flex-col x-items-center\">\n        <NoHistoryIcon\n          class=\"x-flex-no-shrink\"\n          :class=\"{ 'x-grayscale': !$x.isHistoryQueriesEnabled }\"\n        />\n        <p class=\"x-title3 x-py-16 x-text-neutral-75\">\n          {{ $t('myHistory.noHistory') }}\n        </p>\n      </div>\n    </BaseIdModalClose>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseIdModalClose,\n    CrossTinyIcon,\n    HistoryIcon,\n    StaggeredFadeAndSlide\n  } from '@empathyco/x-components';\n  import { MyHistory, HistoryQuery } from '@empathyco/x-components/history-queries';\n  import { defineComponent } from 'vue';\n  import NoHistoryIcon from './no-history-icon.vue';\n\n  export default defineComponent({\n    components: {\n      BaseIdModalClose,\n      CrossTinyIcon,\n      HistoryIcon,\n      MyHistory,\n      NoHistoryIcon,\n      HistoryQuery\n    },\n    setup() {\n      return {\n        animation: StaggeredFadeAndSlide\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseIdModalClose,\n    CrossTinyIcon,\n    HistoryIcon,\n    StaggeredFadeAndSlide\n  } from '@empathyco/x-components';\n  import { MyHistory, HistoryQuery } from '@empathyco/x-components/history-queries';\n  import { defineComponent } from 'vue';\n  import NoHistoryIcon from './no-history-icon.vue';\n\n  export default defineComponent({\n    components: {\n      BaseIdModalClose,\n      CrossTinyIcon,\n      HistoryIcon,\n      MyHistory,\n      NoHistoryIcon,\n      HistoryQuery\n    },\n    setup() {\n      return {\n        animation: StaggeredFadeAndSlide\n      };\n    }\n  });\n","<template functional>\n  <!-- eslint-disable max-len -->\n  <svg\n    :class=\"['x-icon-my-history-bw'].concat(data.staticClass, data.class)\"\n    fill=\"none\"\n    viewBox=\"0 0 252 120\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clip-path=\"url(#pepa-off__a)\">\n      <circle cx=\"56\" cy=\"58.5\" r=\"44.5\" fill=\"#BBC3C6\" />\n      <path\n        fill=\"#F5F6F7\"\n        d=\"M62.35 73.17V49.707c0-4.897 3.856-8.87 8.676-8.87h117.231c4.724 0 8.677 3.973 8.677 8.87v106.239c0 1.94-1.446 3.418-3.374 3.418H65.724c-1.832 0-3.374-1.571-3.374-3.418V87.12\"\n      />\n      <path\n        stroke=\"#929FA5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M62.35 73.17V49.707c0-4.897 3.856-8.87 8.676-8.87h117.231c4.724 0 8.677 3.973 8.677 8.87v106.239c0 1.94-1.446 3.418-3.374 3.418H65.724c-1.832 0-3.374-1.571-3.374-3.418V87.12\"\n      />\n      <path\n        fill=\"#F5F6F7\"\n        stroke=\"#929FA5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M196.934 49.486v9.28H62.35v-9.28c0-4.775 3.856-8.65 8.676-8.65h117.231c4.724 0 8.677 3.875 8.677 8.65Z\"\n      />\n      <rect width=\"94\" height=\"4\" x=\"70.5\" y=\"70\" fill=\"#CFD4D7\" rx=\"2\" />\n      <rect width=\"94\" height=\"3\" x=\"70.5\" y=\"82\" fill=\"#CFD4D7\" rx=\"1.5\" />\n      <rect width=\"94\" height=\"3\" x=\"70.5\" y=\"93\" fill=\"#CFD4D7\" rx=\"1.5\" />\n      <rect width=\"94\" height=\"4\" x=\"70.5\" y=\"104\" fill=\"#CFD4D7\" rx=\"2\" />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m183.974 77.689 2.345-7.526 10.321-.442 3.284 7.082-15.95.886Z\"\n      />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M205.774 50.541c.566-3.736-.709-7.61-3.402-10.239-2.835-2.628-6.662-3.874-10.631-3.32-1.276.138-2.409.415-3.543.553-5.812.969-10.064 5.811-10.064 11.484 0 3.32 0 7.195-.142 10.654 0 6.502 5.245 11.898 11.906 12.037h1.843c6.095.138 11.339-4.15 12.19-9.962.567-3.459 1.276-7.471 1.843-11.345v.138Z\"\n      />\n      <path\n        fill=\"#53B9C9\"\n        d=\"M182.618 49.25s12.083 9.646 27.292-2.236c14.214-11.043.995-26.14-18.337-18.732 0 0 1.99-10.204-3.98-10.344-5.97-.28-8.386 6.01-8.386 6.01s-14.925-7.129-22.459-.419c-7.533 6.57-4.975 19.57.711 24.464 5.544 5.032 10.519 5.451 10.519 5.451s1.279 14.12 9.239 15.237c7.818 1.119 5.686-19.43 5.686-19.43h-.285Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M183.833 50.75c0-.794-.421-1.718-.982-2.247a3.327 3.327 0 0 0-2.525-.66c-1.262.131-2.244.924-2.806 1.85-.561 1.056-.701 2.245-.28 3.302.421.925.701 1.718 1.122 2.643.281.793 1.263 1.718 2.104 1.982 1.263.397 2.385 0 3.508-1.19\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M183.833 50.75c0-.794-.421-1.718-.982-2.247a3.327 3.327 0 0 0-2.525-.66c-1.262.131-2.244.924-2.806 1.85-.561 1.056-.701 2.245-.28 3.302.421.925.701 1.718 1.122 2.643.281.793 1.263 1.718 2.104 1.982 1.263.397 2.385 0 3.508-1.19\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786l-14.561-13.82-9.708-8.292-10.192-.46 3.883 32.241Z\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786l-14.561-13.82-9.708-8.292-10.192-.46 3.883 32.241Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M229.832 87.65s-15.012-14.354-21.571-13.936c-6.559.418-7.34 2.315-7.34 2.315\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M229.832 87.65s-15.012-14.354-21.571-13.936c-6.559.418-7.34 2.315-7.34 2.315\"\n      />\n      <path\n        fill=\"#BBC3C6\"\n        d=\"M174.59 80.968c6.391-7.711 36.607-6.629 41.691 1.082 6.103 9.117 9.221 16.773 10.39 23.482-1.277 0-11.053 5.87-12.275 6.457 1.222 1.173 9.776 3.521 13.442 4.108-.819 10.08-6.571 16.735-10.685 25.337l-39.077-2.029s-13.219-46.804-3.486-58.302v-.135Z\"\n      />\n      <path\n        fill=\"#4F656E\"\n        d=\"M191.95 81.247v.606c0 .606 0 1.211-.436 1.817-.437.726-1.455 1.09-2.619.969-1.745-.243-4.218-1.575-4.8-1.938-1.309-.727-2.619-1.454-3.782-2.301-.437-.243-.437-.727 0-1.09.291-.364.872-.364 1.309 0 1.164.847 2.327 1.453 3.637 2.18.436.242 2.036 1.21 3.491 1.574.291 0 .582.121.873.121.145 0 .291 0 .436-.12.291-.485.291-1.091.291-1.575 0-.485 0-.97.291-1.454 0 0 .291-.484 1.018-.484.291 0 1.746.484 1.892.484.872.242 2.472.848 3.782.848h.727v-.242c0-.242 0-.485-.145-.848 0-.364-.437-.727-.582-1.09-.146-.363 0-.848.436-.97.437-.12 1.018 0 1.164.364.291.485.582.848.727 1.332.437 1.212.291 2.06-.145 2.423-.437.484-1.309.727-2.328.727-1.309 0-3.2-.606-4.218-.97l-.873-.242-.146-.12Z\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M201.955 53.785s.886 3.778 1.624 5.037c.886 1.26 0 3.498-2.658 2.799m-11.963 2.124s2.206 5.009 8.972 3.794\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M187.052 98.694c-.996-10.234-4.694-22.22-13.087-16.564-6.828 4.579-12.376 45.651-2.845 47.267 9.531 1.75 55.051-23.835 57.611-26.394 0 0 9.673-1.077 12.092-.269 3.414 1.077 5.832-1.347 5.405-2.963-.426-1.616-3.414-3.366-7.966-3.77 0 0 5.121-2.29 8.109-2.559 2.987-.27 3.414-5.252 0-5.656-3.414-.404-9.816 2.828-9.816 2.828s4.268-4.174 6.402-5.386c1.422-.808 2.276-4.579-.854-4.444-3.13.135-13.087 6.329-18.493 15.62 0 0-21.053 8.08-31.01 10.37\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M187.052 98.694c-.996-10.234-4.694-22.22-13.087-16.564-6.828 4.579-12.376 45.651-2.845 47.267 9.531 1.75 55.051-23.835 57.611-26.394 0 0 9.673-1.077 12.092-.269 3.414 1.077 5.832-1.347 5.405-2.963-.426-1.616-3.414-3.366-7.966-3.77 0 0 5.121-2.29 8.109-2.559 2.987-.27 3.414-5.252 0-5.656-3.414-.404-9.816 2.828-9.816 2.828s4.268-4.174 6.402-5.386c1.422-.808 2.276-4.579-.854-4.444-3.13.135-13.087 6.329-18.493 15.62 0 0-21.053 8.08-31.01 10.37\"\n      />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M213.882 99.947s-13.899-3.852-22.007-3.275c-8.107.578-18.242 11.986-18.821 15.163-.434 3.177 2.316 3.754 3.475 3.61 1.158-.145 3.764-5.488 3.764-5.488s-1.303 8.665.579 9.387c1.882.722 4.488-.867 4.343-2.744 0-1.877.579-6.065.579-6.065s1.303 4.91 3.62 4.765c2.316-.144 4.054-2.888 3.475-4.765-.4-1.296-.91-3.573-1.188-4.859l.77 1.91\"\n      />\n      <path\n        fill=\"#243D48\"\n        stroke=\"#243D48\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"3.723\"\n        d=\"M68.397 50.852 41.87 61.362a5.707 5.707 0 0 0-3.203 7.408l6.306 15.917a5.707 5.707 0 0 0 7.408 3.204l26.528-10.51a5.707 5.707 0 0 0 3.203-7.409l-6.306-15.916a5.707 5.707 0 0 0-7.408-3.204Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M62.352 74.325a5.328 5.328 0 1 0-3.924-9.906 5.328 5.328 0 0 0 3.925 9.906Z\"\n      />\n      <path\n        stroke=\"#243D48\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"3.723\"\n        d=\"m44.523 60.312-4.205-10.61a11.414 11.414 0 1 1 21.223-8.41l4.204 10.612\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"m45.452 1.745 2.294 18.716c.444.663-.716 1.846-1.628 1.94-.913.095-1.925-.686-2.023-1.561L41.8 2.124c-.098-.876.716-1.846 1.629-1.94.912-.095 1.924.686 2.022 1.561ZM8.99 22.353l16.8 9.773c.789.45 1.11 1.656.64 2.413-.69.426-1.726 1.065-2.515.615l-16.8-9.773c-.444-.662-1.11-1.656-.641-2.413.69-.426 1.727-1.065 2.516-.615Zm75.736-6.433L71.28 29.359c-.69.426-1.381.852-2.393.07-.444-.662-.888-1.324-.074-2.294l13.446-13.44c.69-.425 1.381-.851 2.393-.07.444.662.888 1.325.074 2.295ZM3.166 62.458l18.33-6.15c.69-.427 2.048.141 2.146 1.017.444.662-.148 1.964-1.06 2.058l-18.33 6.151c-.69.426-2.048-.142-2.146-1.017-.444-.663.148-1.964 1.06-2.058Z\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"pepa-off__a\">\n        <path fill=\"#fff\" d=\"M0 0h251v137H0z\" transform=\"translate(.5)\" />\n      </clipPath>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template functional>\n  <!-- eslint-disable max-len -->\n  <svg\n    :class=\"['x-icon-my-history'].concat(data.staticClass, data.class)\"\n    fill=\"none\"\n    viewBox=\"0 0 252 120\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g clip-path=\"url(#pepa-on__a)\">\n      <circle cx=\"56\" cy=\"58.5\" r=\"44.5\" fill=\"#EDBF3B\" />\n      <path\n        fill=\"#F5F6F7\"\n        d=\"M62.35 73.17V49.707c0-4.897 3.856-8.87 8.676-8.87h117.231c4.724 0 8.677 3.973 8.677 8.87v106.239c0 1.94-1.446 3.418-3.374 3.418H65.724c-1.832 0-3.374-1.571-3.374-3.418V87.12\"\n      />\n      <path\n        stroke=\"#929FA5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M62.35 73.17V49.707c0-4.897 3.856-8.87 8.676-8.87h117.231c4.724 0 8.677 3.973 8.677 8.87v106.239c0 1.94-1.446 3.418-3.374 3.418H65.724c-1.832 0-3.374-1.571-3.374-3.418V87.12\"\n      />\n      <path\n        fill=\"#F5F6F7\"\n        stroke=\"#929FA5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"2\"\n        d=\"M196.934 49.486v9.28H62.35v-9.28c0-4.775 3.856-8.65 8.676-8.65h117.231c4.724 0 8.677 3.875 8.677 8.65Z\"\n      />\n      <rect width=\"94\" height=\"4\" x=\"70.5\" y=\"70\" fill=\"#CFD4D7\" rx=\"2\" />\n      <rect width=\"94\" height=\"3\" x=\"70.5\" y=\"82\" fill=\"#CFD4D7\" rx=\"1.5\" />\n      <rect width=\"94\" height=\"3\" x=\"70.5\" y=\"93\" fill=\"#CFD4D7\" rx=\"1.5\" />\n      <rect width=\"94\" height=\"4\" x=\"70.5\" y=\"104\" fill=\"#CFD4D7\" rx=\"2\" />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"m183.974 77.689 2.345-7.526 10.321-.442 3.284 7.082-15.95.886Z\"\n      />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M205.774 50.541c.566-3.736-.709-7.61-3.402-10.239-2.835-2.628-6.662-3.874-10.631-3.32-1.276.138-2.409.415-3.543.553-5.812.969-10.064 5.811-10.064 11.484 0 3.32 0 7.195-.142 10.654 0 6.502 5.245 11.898 11.906 12.037h1.843c6.095.138 11.339-4.15 12.19-9.962.567-3.459 1.276-7.471 1.843-11.345v.138Z\"\n      />\n      <path\n        fill=\"#53B9C9\"\n        d=\"M182.618 49.25s12.083 9.646 27.292-2.236c14.214-11.043.995-26.14-18.337-18.732 0 0 1.99-10.204-3.98-10.344-5.97-.28-8.386 6.01-8.386 6.01s-14.925-7.129-22.459-.419c-7.533 6.57-4.975 19.57.711 24.464 5.544 5.032 10.519 5.451 10.519 5.451s1.279 14.12 9.239 15.237c7.818 1.119 5.686-19.43 5.686-19.43h-.285Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M183.833 50.75c0-.794-.421-1.718-.982-2.247a3.327 3.327 0 0 0-2.525-.66c-1.262.131-2.244.924-2.806 1.85-.561 1.056-.701 2.245-.28 3.302.421.925.701 1.718 1.122 2.643.281.793 1.263 1.718 2.104 1.982 1.263.397 2.385 0 3.508-1.19\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M183.833 50.75c0-.794-.421-1.718-.982-2.247a3.327 3.327 0 0 0-2.525-.66c-1.262.131-2.244.924-2.806 1.85-.561 1.056-.701 2.245-.28 3.302.421.925.701 1.718 1.122 2.643.281.793 1.263 1.718 2.104 1.982 1.263.397 2.385 0 3.508-1.19\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786l-14.561-13.82-9.708-8.292-10.192-.46 3.883 32.241Z\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M214.774 111.923s19.751 7.793 27.593 3.117c7.698-4.817 2.985-12.786 2.985-12.786l-14.561-13.82-9.708-8.292-10.192-.46 3.883 32.241Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M229.832 87.65s-15.012-14.354-21.571-13.936c-6.559.418-7.34 2.315-7.34 2.315\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M229.832 87.65s-15.012-14.354-21.571-13.936c-6.559.418-7.34 2.315-7.34 2.315\"\n      />\n      <path\n        fill=\"#EDBF3B\"\n        d=\"M174.59 80.968c6.391-7.711 36.607-6.629 41.691 1.082 6.103 9.117 9.221 16.773 10.39 23.482-1.277 0-11.053 5.87-12.275 6.457 1.222 1.173 9.776 3.521 13.442 4.108-.819 10.08-6.571 16.735-10.685 25.337l-39.077-2.029s-13.219-46.804-3.486-58.302v-.135Z\"\n      />\n      <path\n        fill=\"#4F656E\"\n        d=\"M191.95 81.247v.606c0 .606 0 1.211-.436 1.817-.437.726-1.455 1.09-2.619.969-1.745-.243-4.218-1.575-4.8-1.938-1.309-.727-2.619-1.454-3.782-2.301-.437-.243-.437-.727 0-1.09.291-.364.872-.364 1.309 0 1.164.847 2.327 1.453 3.637 2.18.436.242 2.036 1.21 3.491 1.574.291 0 .582.121.873.121.145 0 .291 0 .436-.12.291-.485.291-1.091.291-1.575 0-.485 0-.97.291-1.454 0 0 .291-.484 1.018-.484.291 0 1.746.484 1.892.484.872.242 2.472.848 3.782.848h.727v-.242c0-.242 0-.485-.145-.848 0-.364-.437-.727-.582-1.09-.146-.363 0-.848.436-.97.437-.12 1.018 0 1.164.364.291.485.582.848.727 1.332.437 1.212.291 2.06-.145 2.423-.437.484-1.309.727-2.328.727-1.309 0-3.2-.606-4.218-.97l-.873-.242-.146-.12Z\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M201.955 53.785s.886 3.778 1.624 5.037c.886 1.26 0 3.498-2.658 2.799m-11.963 2.124s2.206 5.009 8.972 3.794\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M187.052 98.694c-.996-10.234-4.694-22.22-13.087-16.564-6.828 4.579-12.376 45.651-2.845 47.267 9.531 1.75 55.051-23.835 57.611-26.394 0 0 9.673-1.077 12.092-.269 3.414 1.077 5.832-1.347 5.405-2.963-.426-1.616-3.414-3.366-7.966-3.77 0 0 5.121-2.29 8.109-2.559 2.987-.27 3.414-5.252 0-5.656-3.414-.404-9.816 2.828-9.816 2.828s4.268-4.174 6.402-5.386c1.422-.808 2.276-4.579-.854-4.444-3.13.135-13.087 6.329-18.493 15.62 0 0-21.053 8.08-31.01 10.37\"\n      />\n      <path\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M187.052 98.694c-.996-10.234-4.694-22.22-13.087-16.564-6.828 4.579-12.376 45.651-2.845 47.267 9.531 1.75 55.051-23.835 57.611-26.394 0 0 9.673-1.077 12.092-.269 3.414 1.077 5.832-1.347 5.405-2.963-.426-1.616-3.414-3.366-7.966-3.77 0 0 5.121-2.29 8.109-2.559 2.987-.27 3.414-5.252 0-5.656-3.414-.404-9.816 2.828-9.816 2.828s4.268-4.174 6.402-5.386c1.422-.808 2.276-4.579-.854-4.444-3.13.135-13.087 6.329-18.493 15.62 0 0-21.053 8.08-31.01 10.37\"\n      />\n      <path\n        fill=\"#fff\"\n        stroke=\"#4F656E\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M213.882 99.947s-13.899-3.852-22.007-3.275c-8.107.578-18.242 11.986-18.821 15.163-.434 3.177 2.316 3.754 3.475 3.61 1.158-.145 3.764-5.488 3.764-5.488s-1.303 8.665.579 9.387c1.882.722 4.488-.867 4.343-2.744 0-1.877.579-6.065.579-6.065s1.303 4.91 3.62 4.765c2.316-.144 4.054-2.888 3.475-4.765-.4-1.296-.91-3.573-1.188-4.859l.77 1.91\"\n      />\n      <path\n        fill=\"#243D48\"\n        stroke=\"#243D48\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"3.723\"\n        d=\"M68.397 50.852 41.87 61.362a5.707 5.707 0 0 0-3.203 7.408l6.306 15.917a5.707 5.707 0 0 0 7.408 3.204l26.528-10.51a5.707 5.707 0 0 0 3.203-7.409l-6.306-15.916a5.707 5.707 0 0 0-7.408-3.204Z\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"M62.352 74.325a5.328 5.328 0 1 0-3.924-9.906 5.328 5.328 0 0 0 3.925 9.906Z\"\n      />\n      <path\n        stroke=\"#243D48\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        stroke-width=\"3.723\"\n        d=\"m44.523 60.312-4.205-10.61a11.414 11.414 0 1 1 21.223-8.41l4.204 10.612\"\n      />\n      <path\n        fill=\"#fff\"\n        d=\"m45.452 1.745 2.294 18.716c.444.663-.716 1.846-1.628 1.94-.913.095-1.925-.686-2.023-1.561L41.8 2.124c-.098-.876.716-1.846 1.629-1.94.912-.095 1.924.686 2.022 1.561ZM8.99 22.353l16.8 9.773c.789.45 1.11 1.656.64 2.413-.69.426-1.726 1.065-2.515.615l-16.8-9.773c-.444-.662-1.11-1.656-.641-2.413.69-.426 1.727-1.065 2.516-.615Zm75.736-6.433L71.28 29.359c-.69.426-1.381.852-2.393.07-.444-.662-.888-1.324-.074-2.294l13.446-13.44c.69-.425 1.381-.851 2.393-.07.444.662.888 1.325.074 2.295ZM3.166 62.458l18.33-6.15c.69-.427 2.048.141 2.146 1.017.444.662-.148 1.964-1.06 2.058l-18.33 6.151c-.69.426-2.048-.142-2.146-1.017-.444-.663.148-1.964 1.06-2.058Z\"\n      />\n    </g>\n    <defs>\n      <clipPath id=\"pepa-on__a\">\n        <path fill=\"#fff\" d=\"M0 0h251v137H0z\" transform=\"translate(.5)\" />\n      </clipPath>\n    </defs>\n  </svg>\n</template>\n\n<script lang=\"ts\">\n  export default {};\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  export default {};\n","<template>\n  <div\n    class=\"x-scroll x-flex x-min-h-0 x-flex-1 x-flex-col x-bg-neutral-0 desktop:x-overflow-hidden\"\n  >\n    <div\n      class=\"x-sticky x-top-0 x-z-10 x-flex x-flex-row x-items-center x-gap-16 x-bg-neutral-90 x-p-16 desktop:x-p-32\"\n    >\n      <BaseIdModalClose\n        class=\"x-button-circle x-button-ghost hover:x-button-lead desktop:x-order-1 desktop:x-ml-auto\"\n        modalId=\"my-history-aside\"\n      >\n        <ArrowLeftIcon v-if=\"isTabletOrLess\" class=\"x-icon-lg x-text-neutral-0\" />\n        <CrossIcon v-else class=\"x-icon-lg x-text-neutral-0\" />\n      </BaseIdModalClose>\n      <h1 class=\"desktop:x-title-md x-title2 x-title2-sm x-text-neutral-0\">\n        {{ $t('myHistory.title') }}\n      </h1>\n    </div>\n\n    <div class=\"x-flex x-justify-end x-bg-neutral-90 x-px-16 desktop:x-justify-center\">\n      <MyHistoryIcon v-if=\"$x.isHistoryQueriesEnabled\" class=\"x-w-256\" />\n      <MyHistoryIconBw v-else class=\"x-w-256\" />\n    </div>\n\n    <div\n      class=\"x-flex x-flex-col x-divide-y-1 x-divide-neutral-10 desktop:x-flex-1 desktop:x-overflow-auto desktop:x-scroll\"\n    >\n      <section class=\"x-flex x-flex-col x-gap-16 x-px-16 x-pt-24 x-pb-32 desktop:x-pl-32\">\n        <h2 class=\"x-title3 x-mb-8\">{{ $t('myHistory.subtitle') }}</h2>\n        <p class=\"x-text1 x-text1-lg x-text-neutral-75\">{{ $t('myHistory.message.header') }}</p>\n        <p class=\"x-text1 x-text1-lg x-text-neutral-75\">{{ $t('myHistory.message.body') }}</p>\n        <p class=\"x-title3 x-text-neutral-75\">{{ $t('myHistory.message.footer') }}</p>\n      </section>\n\n      <section\n        class=\"x-flex x-items-center x-justify-between x-px-16 x-pt-24 x-pb-32 desktop:x-pl-32\"\n      >\n        <div class=\"x-flex x-flex-col x-gap-4\">\n          <span class=\"x-title3\">{{ $t('myHistory.switch.title') }}</span>\n          <span class=\"x-text1 x-text1-lg x-text-neutral-75\">\n            {{\n              $x.isHistoryQueriesEnabled\n                ? $t('myHistory.switch.disable')\n                : $t('myHistory.switch.enable')\n            }}\n          </span>\n        </div>\n        <HistoryQueriesSwitch />\n      </section>\n\n      <CustomMyHistory />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { ArrowLeftIcon, BaseIdModalClose, CrossIcon } from '@empathyco/x-components';\n  import { HistoryQueriesSwitch } from '@empathyco/x-components/history-queries';\n  import { defineComponent, onMounted } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import CustomMyHistory from './custom-my-history.vue';\n  import MyHistoryIconBw from './my-history-icon-bw.vue';\n  import MyHistoryIcon from './my-history-icon.vue';\n\n  export default defineComponent({\n    components: {\n      ArrowLeftIcon,\n      CrossIcon,\n      BaseIdModalClose,\n      CustomMyHistory,\n      HistoryQueriesSwitch,\n      MyHistoryIcon,\n      MyHistoryIconBw\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      onMounted(() => {\n        const activeElement = document.activeElement as HTMLElement;\n        if (activeElement.classList.contains('x-search-input')) {\n          activeElement.blur();\n        }\n      });\n\n      return {\n        isTabletOrLess\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { ArrowLeftIcon, BaseIdModalClose, CrossIcon } from '@empathyco/x-components';\n  import { HistoryQueriesSwitch } from '@empathyco/x-components/history-queries';\n  import { defineComponent, onMounted } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import CustomMyHistory from './custom-my-history.vue';\n  import MyHistoryIconBw from './my-history-icon-bw.vue';\n  import MyHistoryIcon from './my-history-icon.vue';\n\n  export default defineComponent({\n    components: {\n      ArrowLeftIcon,\n      CrossIcon,\n      BaseIdModalClose,\n      CustomMyHistory,\n      HistoryQueriesSwitch,\n      MyHistoryIcon,\n      MyHistoryIconBw\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      onMounted(() => {\n        const activeElement = document.activeElement as HTMLElement;\n        if (activeElement.classList.contains('x-search-input')) {\n          activeElement.blur();\n        }\n      });\n\n      return {\n        isTabletOrLess\n      };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { BaseEventsModal, BaseEventButton } from '@empathyco/x-components';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseEventsModal,\n      BaseEventButton\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      return {\n        isTabletOrLess,\n        eventsToOpenModal: ['UserClickedDisableHistoryQueries'],\n        eventsToCloseModal: [\n          'UserClickedConfirmDisableHistoryQueries',\n          'UserClickedDismissDisableHistoryQueries'\n        ],\n        dismissEvents: { UserClickedDismissDisableHistoryQueries: undefined },\n        confirmEvents: { UserClickedConfirmDisableHistoryQueries: undefined }\n      };\n    }\n  });\n","<template>\n  <BaseEventsModal\n    @focusin.native.stop\n    class=\"x-my-history-confirm-disable-modal x-z-10\"\n    :eventsToOpenModal=\"eventsToOpenModal\"\n    :eventsToCloseModal=\"eventsToCloseModal\"\n  >\n    <div\n      class=\"x-my-history-confirm-disable-modal-content x-flex x-max-w-[322px] x-flex-col x-gap-16 x-bg-neutral-0\"\n      :class=\"isTabletOrLess ? 'x-rounded-lg x-p-24 x-pb-8' : 'x-p-56'\"\n    >\n      <h1 class=\"x-title3\">{{ $t('myHistory.confirmDisableModal.title') }}</h1>\n      <span class=\"x-text1 x-text1-lg x-text-neutral-75\">\n        {{ $t('myHistory.confirmDisableModal.message') }}\n      </span>\n      <div class=\"x-flex x-justify-end desktop:x-justify-center\">\n        <BaseEventButton class=\"x-button-ghost x-button\" :events=\"dismissEvents\">\n          {{ $t('myHistory.confirmDisableModal.dismiss') }}\n        </BaseEventButton>\n        <BaseEventButton class=\"x-button-lead x-button-ghost x-button\" :events=\"confirmEvents\">\n          {{ $t('myHistory.confirmDisableModal.confirm') }}\n        </BaseEventButton>\n      </div>\n    </div>\n  </BaseEventsModal>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { BaseEventsModal, BaseEventButton } from '@empathyco/x-components';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseEventsModal,\n      BaseEventButton\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      return {\n        isTabletOrLess,\n        eventsToOpenModal: ['UserClickedDisableHistoryQueries'],\n        eventsToCloseModal: [\n          'UserClickedConfirmDisableHistoryQueries',\n          'UserClickedDismissDisableHistoryQueries'\n        ],\n        dismissEvents: { UserClickedDismissDisableHistoryQueries: undefined },\n        confirmEvents: { UserClickedConfirmDisableHistoryQueries: undefined }\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\">\n  .x-my-history-confirm-disable-modal {\n    &.x-modal {\n      .x-modal__content {\n        background: transparent;\n        justify-content: center;\n        align-items: center;\n      }\n    }\n  }\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BaseIdModalOpen, FiltersIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: { BaseIdModalOpen, FiltersIcon }\n  })\n  export default class MobileOpenAside extends Vue {}\n","<template>\n  <BaseIdModalOpen\n    data-test=\"toggle-facets-button\"\n    modalId=\"aside-modal\"\n    class=\"x-button-lead x-rounded-full x-p-12 x-px-16\"\n  >\n    <FiltersIcon class=\"x-icon-lg\" />\n    <span>{{ $t('toggleAside.showAside') }}</span>\n    <span\n      v-if=\"$x.selectedFilters.length > 0\"\n      :class=\"{ 'x-badge-circle': $x.selectedFilters.length <= 9 }\"\n      class=\"x-badge x-badge-lead\"\n    >\n      {{ $x.selectedFilters.length }}\n    </span>\n  </BaseIdModalOpen>\n</template>\n\n<script lang=\"ts\">\n  import { BaseIdModalOpen, FiltersIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: { BaseIdModalOpen, FiltersIcon }\n  })\n  export default class MobileOpenAside extends Vue {}\n</script>\n","<template>\n  <div class=\"x-flex x-items-center x-gap-8\">\n    <span class=\"x-title4 x-uppercase\">{{ $t('columnPicker.message') }}</span>\n    <BaseColumnPickerList\n      :columns=\"values\"\n      buttonClass=\"x-button-sm x-button-square x-button-tight x-text-neutral-25\n      selected:x-text-neutral-90\"\n    >\n      <template #divider>\n        <span class=\"x-button-group-divider x-text-neutral-25\" />\n      </template>\n      <template #default=\"{ column }\">\n        <component :is=\"icons[column]\" class=\"x-icon-lg\" />\n      </template>\n    </BaseColumnPickerList>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { computed, defineComponent } from 'vue';\n  import {\n    BaseColumnPickerList,\n    Grid1ColIcon,\n    Grid2ColIcon,\n    Grid4ColIcon\n  } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseColumnPickerList,\n      Grid1ColIcon,\n      Grid2ColIcon,\n      Grid4ColIcon\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return {\n        values: computed(() => (isMobile.value ? [2, 1] : [4, 2])),\n        icons: { 1: 'Grid1ColIcon', 2: 'Grid2ColIcon', 4: 'Grid4ColIcon' }\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { computed, defineComponent } from 'vue';\n  import {\n    BaseColumnPickerList,\n    Grid1ColIcon,\n    Grid2ColIcon,\n    Grid4ColIcon\n  } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      BaseColumnPickerList,\n      Grid1ColIcon,\n      Grid2ColIcon,\n      Grid4ColIcon\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return {\n        values: computed(() => (isMobile.value ? [2, 1] : [4, 2])),\n        icons: { 1: 'Grid1ColIcon', 2: 'Grid2ColIcon', 4: 'Grid4ColIcon' }\n      };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Vue } from 'vue-property-decorator';\n  import ColumnPicker from '../column-picker.vue';\n\n  @Component({\n    components: {\n      ColumnPicker\n    }\n  })\n  export default class MobileToolbar extends Vue {}\n","<template>\n  <div v-if=\"$x.totalResults\" class=\"x-flex x-flex-auto x-items-center\">\n    <i18n class=\"x-text1 x-flex-auto\" path=\"totalResults.message\" tag=\"span\">\n      <template #totalResults>\n        {{ $x.totalResults }}\n      </template>\n      <template #query>\n        <span class=\"x-title3\">\n          {{ $x.spellcheckedQuery || $x.query.search }}\n        </span>\n      </template>\n    </i18n>\n\n    <ColumnPicker v-if=\"$x.totalResults\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n  import ColumnPicker from '../column-picker.vue';\n\n  @Component({\n    components: {\n      ColumnPicker\n    }\n  })\n  export default class MobileToolbar extends Vue {}\n</script>\n","import { SearchRequest, SearchResponse } from '@empathyco/x-types';\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { InternalSearchRequest } from '../../types';\nimport { SearchActionContext, SearchState } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  SearchActionContext,\n  InternalSearchRequest | null,\n  SearchResponse | null\n>({\n  fetch({ dispatch, state }, request) {\n    return request\n      ? dispatch('fetchSearchResponse', enrichRequest(request, state))\n      : Promise.resolve(null);\n  },\n  onSuccess({ dispatch }, response) {\n    if (response !== null) {\n      dispatch('saveSearchResponse', response);\n    }\n  }\n});\n\n/**\n * Enriches the {@link SearchRequest} object with the origin and page properties taken from the\n * {@link SearchState | search state}.\n *\n * @param request - The {@link InternalSearchRequest}.\n * @param state - {@link SearchState}.\n *\n * @returns The search request.\n * @internal\n */\nfunction enrichRequest(request: InternalSearchRequest, state: SearchState): SearchRequest {\n  const { page, ...restRequest } = request;\n  const {\n    config: { pageSize },\n    origin,\n    results\n  } = state;\n  const start = page === 1 ? 0 : results.length;\n\n  return {\n    ...restRequest,\n    ...(origin && { origin }),\n    start,\n    rows: pageSize * page - start\n  };\n}\n\n/**\n * Default implementation for {@link SearchActions.fetchAndSaveSearchResponse} action.\n *\n * @public\n */\nexport const fetchAndSaveSearchResponse = fetchAndSave;\n\n/**\n * Default implementation for {@link SearchActions.cancelFetchAndSaveSearchResponse} action.\n *\n * @public\n */\nexport const cancelFetchAndSaveSearchResponse = cancelPrevious;\n","import { createRelatedTagsQueryGetter } from '../../../../store/utils/query.utils';\nimport { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchState.query} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the related\n * tags' module.\n *\n * @returns The query with the selected related tags concatenated.\n *\n * @public\n */\nexport const query: SearchXStoreModule['getters']['query'] = createRelatedTagsQueryGetter({\n  getRelatedTags: state => state.relatedTags\n});\n","import { isFacetFilter } from '@empathyco/x-types';\nimport { setQuery } from '../../../store/utils/query.utils';\nimport { setStatus } from '../../../store/utils/status-store.utils';\nimport { groupItemsBy } from '../../../utils/array';\n// eslint-disable-next-line max-len\nimport {\n  cancelFetchAndSaveSearchResponse,\n  fetchAndSaveSearchResponse\n} from './actions/fetch-and-save-search-response.action';\nimport { fetchSearchResponse } from './actions/fetch-search-response.action';\nimport { increasePageAppendingResults } from './actions/increase-page-apending-results.action';\nimport { resetRequestOnRefinement } from './actions/reset-request-on-refinement.action';\nimport { saveOrigin } from './actions/save-origin.action';\nimport { saveSearchResponse } from './actions/save-search-response.action';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { query } from './getters/query.getter';\nimport { request } from './getters/request.getter';\nimport { SearchXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the search module.\n *\n * @internal\n */\nexport const searchXStoreModule: SearchXStoreModule = {\n  state: () => ({\n    ...resettableState(),\n    selectedFilters: {},\n    params: {},\n    config: {\n      pageSize: 24\n    },\n    status: 'initial',\n    isNoResults: false,\n    fromNoResultsWithFilters: false\n  }),\n  getters: {\n    request,\n    query\n  },\n  mutations: {\n    appendResults(state, results) {\n      state.results.push(...results);\n    },\n    resetState(state) {\n      Object.assign(state, resettableState());\n    },\n    setQuery,\n    setResults(state, results) {\n      state.results = results;\n    },\n    setPartialResults(state, partialResults) {\n      state.partialResults = partialResults;\n    },\n    setFacets(state, facets) {\n      state.facets = facets;\n    },\n    setRelatedTags(state, relatedTags) {\n      state.relatedTags = relatedTags;\n    },\n    setSelectedFilters(state, selectedFilters) {\n      state.selectedFilters = groupItemsBy(selectedFilters, filter =>\n        isFacetFilter(filter) ? filter.facetId : '__unknown__'\n      );\n    },\n    setBanners(state, banners) {\n      state.banners = banners;\n    },\n    setPromoteds(state, promoteds) {\n      state.promoteds = promoteds;\n    },\n    setSpellcheck(state, spellcheckedQuery) {\n      state.spellcheckedQuery = spellcheckedQuery;\n    },\n    setTotalResults(state, totalResults) {\n      state.totalResults = totalResults;\n    },\n    setSort(state, sort) {\n      state.sort = sort;\n    },\n    setPage(state, page) {\n      state.page = page;\n    },\n    setPageSize(state, pageSize) {\n      state.config.pageSize = pageSize;\n    },\n    setIsAppendResults(state, isAppendResults) {\n      state.isAppendResults = isAppendResults;\n    },\n    setIsNoResults(state, isNoResults) {\n      state.isNoResults = isNoResults;\n    },\n    setFromNoResultsWithFilters(state, fromNoResultsWithFilters) {\n      state.fromNoResultsWithFilters = fromNoResultsWithFilters;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    },\n    setOrigin(state, origin = null) {\n      state.origin = origin;\n    },\n    setRedirections(state, redirections) {\n      state.redirections = redirections;\n    },\n    setQueryTagging(state, queryTagging) {\n      state.queryTagging = queryTagging;\n    },\n    updateResult(state, result) {\n      const stateResult = state.results.find(stateResult => result.id === stateResult.id);\n      if (stateResult) {\n        Object.assign(stateResult, result);\n      }\n    }\n  },\n  actions: {\n    cancelFetchAndSaveSearchResponse,\n    fetchSearchResponse,\n    fetchAndSaveSearchResponse,\n    increasePageAppendingResults,\n    resetRequestOnRefinement,\n    saveSearchResponse,\n    setUrlParams,\n    saveOrigin\n  }\n};\n\n/**\n * Function to return the \"resettable\" part of the state. This will be used in the `resetState`\n * mutation to reset to the initial state.\n *\n * @returns The \"resettable\" part of the {@link SearchState}.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function resettableState() {\n  return {\n    query: '',\n    results: [],\n    partialResults: [],\n    facets: [],\n    relatedTags: [],\n    banners: [],\n    promoteds: [],\n    totalResults: 0,\n    spellcheckedQuery: '',\n    sort: '',\n    page: 1,\n    origin: null,\n    isAppendResults: false,\n    redirections: [],\n    queryTagging: {\n      url: '',\n      params: {}\n    }\n  };\n}\n","import { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the search\n * module.\n * @param getters - Current {@link https://vuex.vuejs.org/guide/getters.html | getters} of the\n * search module.\n * @returns The search request to fetch data from the API.\n *\n * @public\n */\nexport const request: SearchXStoreModule['getters']['request'] = (\n  { page, params, selectedFilters: filters, sort },\n  { query }\n) => {\n  return query\n    ? {\n        query,\n        sort,\n        page,\n        filters,\n        extraParams: params\n      }\n    : null;\n};\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.fetchSearchResponse}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The search request to make.\n * @returns A Promise of search response that resolves when it fetches search response.\n *\n * @public\n */\nexport const fetchSearchResponse: SearchXStoreModule['actions']['fetchSearchResponse'] = (\n  _context,\n  request\n) => XPlugin.adapter.search(request);\n","import { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.increasePageAppendingResults}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @public\n */\n// eslint-disable-next-line max-len\nexport const increasePageAppendingResults: SearchXStoreModule['actions']['increasePageAppendingResults'] =\n  ({ commit, state }) => {\n    const newPage = state.page + 1;\n    if (newPage >= 1 && state.page * state.config.pageSize < state.totalResults) {\n      commit('setPage', newPage);\n      commit('setIsAppendResults', true);\n    }\n  };\n","import { getNewAndUpdatedKeys } from '@empathyco/x-utils';\nimport { isArrayEmpty } from '../../../../utils/array';\nimport { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.resetRequestOnRefinement}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param watchedRequest - The {@link WatchedInternalSearchRequest} object.\n * @public\n */\nexport const resetRequestOnRefinement: SearchXStoreModule['actions']['resetRequestOnRefinement'] = (\n  { commit, state },\n  { newRequest, oldRequest }\n) => {\n  if (state.fromNoResultsWithFilters && state.results.length) {\n    commit('setFromNoResultsWithFilters', false);\n  }\n  // is refining request\n  if (!!newRequest && !!oldRequest) {\n    const changedKeys = getNewAndUpdatedKeys(newRequest, oldRequest).filter(\n      value => value !== 'extraParams'\n    );\n    const changedExtraParams = getNewAndUpdatedKeys(newRequest.extraParams, oldRequest.extraParams);\n\n    if (!isArrayEmpty(changedKeys)) {\n      if (!changedKeys.includes('page')) {\n        commit('setPage', 1);\n      }\n      if (changedKeys.includes('query')) {\n        commit('setSort', '');\n      }\n    }\n    if (!isArrayEmpty(changedExtraParams)) {\n      commit('setPage', 1);\n      commit('setSort', '');\n    }\n  }\n};\n","import { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.saveSearchResponse}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param response - The {@link @empathyco/x-types#SearchResponse} to save.\n *\n * @public\n */\nexport const saveSearchResponse: SearchXStoreModule['actions']['saveSearchResponse'] = (\n  { commit, state, getters },\n  {\n    results,\n    partialResults,\n    facets,\n    banners,\n    promoteds,\n    totalResults,\n    spellcheck,\n    redirections,\n    queryTagging\n  }\n) => {\n  if (totalResults === 0) {\n    commit('setIsNoResults', true);\n    if (getters.request && Object.keys(getters.request.filters!).length > 0) {\n      commit('setFromNoResultsWithFilters', true);\n    }\n  } else {\n    commit('setIsNoResults', false);\n  }\n\n  if (state.isAppendResults) {\n    commit('appendResults', results);\n  } else {\n    commit('setResults', results);\n    commit('setBanners', banners ?? []);\n    commit('setPromoteds', promoteds ?? []);\n    commit('setRedirections', redirections ?? []);\n  }\n\n  commit('setPartialResults', partialResults ?? []);\n\n  if (facets) {\n    commit('setFacets', facets);\n  }\n\n  if (queryTagging) {\n    commit('setQueryTagging', queryTagging);\n  }\n  commit('setTotalResults', totalResults);\n  commit('setSpellcheck', spellcheck ?? '');\n};\n","import { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n *\n * @param urlParams - List of params from the url.\n *\n * @public\n */\nexport const setUrlParams: SearchXStoreModule['actions']['setUrlParams'] = (\n  { commit, state },\n  { query, page, sort }\n) => {\n  const currentQuery = state.query;\n\n  commit('setQuery', query);\n  commit('setPage', !currentQuery || currentQuery === query ? page : 1);\n  commit('setSort', sort);\n};\n","import { QueryOrigin } from '../../../../types/origin';\nimport { createOrigin } from '../../../../utils/origin';\nimport { SearchXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link SearchActions.saveOrigin}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param queryOriginInit - The object to create the {@link QueryOrigin} with.\n *\n * @public\n */\nexport const saveOrigin: SearchXStoreModule['actions']['saveOrigin'] = (\n  { commit },\n  queryOriginInit\n) => {\n  commit('setOrigin', createOrigin(queryOriginInit) as QueryOrigin | null);\n};\n","import { createStoreEmitters } from '../../../store';\nimport { isStringEmpty } from '../../../utils/string';\nimport { searchXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the search module.\n *\n * @internal\n */\nexport const searchEmitters = createStoreEmitters(searchXStoreModule, {\n  FacetsChanged: {\n    selector: state => state.facets,\n    filter(newValue, oldValue): boolean {\n      return newValue.length !== 0 || oldValue.length !== 0;\n    }\n  },\n  PageChanged: state => state.page,\n  ResultsChanged: state => state.results,\n  SearchRequestChanged: (_, getters) => getters.request,\n  SearchRequestUpdated: (_, getters) => getters.request,\n  SearchResponseChanged: {\n    selector: (state, getters) => {\n      return {\n        request: getters.request!,\n        status: state.status,\n        banners: state.banners,\n        facets: state.facets,\n        partialResults: state.partialResults,\n        promoteds: state.promoteds,\n        queryTagging: state.queryTagging,\n        redirections: state.redirections,\n        results: state.results,\n        spellcheck: state.spellcheckedQuery,\n        totalResults: state.totalResults\n      };\n    },\n    filter: (newValue, oldValue) => {\n      return (\n        newValue.status !== oldValue.status && oldValue.status === 'loading' && !!newValue.request\n      );\n    }\n  },\n  SearchTaggingChanged: {\n    selector: state => state.queryTagging,\n    filter: ({ url }) => !isStringEmpty(url)\n  },\n  SpellcheckChanged: state => state.spellcheckedQuery,\n  SortChanged: state => state.sort\n});\n","import { filterTruthyPayload, namespacedWireCommitWithoutPayload } from '../../wiring';\nimport {\n  namespacedWireCommit,\n  namespacedWireDispatch,\n  namespacedWireDispatchWithoutPayload\n} from '../../wiring/namespaced-wires.factory';\nimport { WirePayload } from '../../wiring/wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\nimport { InternalSearchRequest } from './types';\n\n/**\n * `search` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'search';\n/**\n * WireCommit for {@link SearchXModule}.\n *\n * @internal\n */\nconst wireCommit = namespacedWireCommit(moduleName);\n\n/**\n * WireCommit without Payload for {@link SearchXModule}.\n *\n * @internal\n */\nconst wireCommitWithoutPayload = namespacedWireCommitWithoutPayload(moduleName);\n\n/**\n * WireDispatch for {@link SearchXModule}.\n *\n * @internal\n */\nconst wireDispatch = namespacedWireDispatch(moduleName);\n\n/**\n * WireDispatchWithoutPayload for {@link SearchXModule}.\n *\n * @internal\n */\nconst wireDispatchWithoutPayload = namespacedWireDispatchWithoutPayload(moduleName);\n\n/**\n * Cancels the {@link SearchActions.fetchAndSaveSearchResponse} request promise.\n *\n * @public\n */\nexport const cancelFetchAndSaveSearchResponseWire = wireDispatchWithoutPayload(\n  'cancelFetchAndSaveSearchResponse'\n);\n\n/**\n * Sets the search state `origin`.\n *\n * @public\n */\nexport const saveOriginWire = wireDispatch('saveOrigin', ({ metadata }) => metadata);\n\n/**\n * Requests and stores the search response.\n *\n * @public\n */\nexport const fetchAndSaveSearchResponseWire = wireDispatch('fetchAndSaveSearchResponse');\n\n/**\n * Resets the search state `spellcheckedQuery` to its initial value, an empty string.\n *\n * @public\n */\nexport const resetSpellcheckQuery = wireCommit('setSpellcheck', '');\n\n/**\n * Sets the search state `relatedTags`.\n *\n * @public\n */\nexport const setRelatedTags = wireCommit('setRelatedTags');\n\n/**\n * Sets the search state `query`.\n *\n * @public\n */\nexport const setSearchQuery = wireCommit('setQuery');\n\n/**\n * Clears the search state `query`.\n *\n * @public\n */\nexport const clearSearchQuery = wireCommit('setQuery', '');\n\n/**\n * Sets the search state `selectedFilters`.\n *\n * @public\n */\nexport const setSelectedFilters = wireCommit('setSelectedFilters');\n\n/**\n * Sets the search state `sort`.\n *\n * @public\n */\nexport const setSort = wireCommit('setSort');\n\n/**\n * Sets the search state `query`.\n *\n * @public\n */\nexport const setUrlParams = wireDispatch('setUrlParams');\n\n/**\n * Sets the search state `page`.\n *\n * @public\n */\nexport const setSearchPage = wireCommit('setPage');\n\n/**\n * Sets the search state `params`.\n *\n * @public\n */\nexport const setSearchExtraParams = wireCommit('setParams');\n\n/**\n * Resets the search state `isNoResults`.\n *\n * @public\n */\nexport const resetIsNoResults = wireCommit('setIsNoResults', false);\n\n/**\n * Resets the search state `fromNoResultsWithFilters`.\n *\n * @public\n */\nexport const resetFromNoResultsWithFilters = wireCommit('setFromNoResultsWithFilters', false);\n\n/**\n * Increases the current search state `page` by one.\n *\n * @public\n */\nexport const increasePageAppendingResultsWire = wireDispatchWithoutPayload(\n  'increasePageAppendingResults'\n);\n\n/**\n * Resets the search state `isAppendingResults`.\n *\n * @public\n */\nexport const resetAppending = wireCommit('setIsAppendResults', false);\n\n/**\n * Resets the {@link SearchGetters.request} parameters when refining request and before the actual\n * request is launched.\n *\n * @public\n */\nexport const resetRequestOnRefinementWire = wireDispatch(\n  'resetRequestOnRefinement',\n  ({ eventPayload: newRequest, metadata: { oldValue } }: WirePayload<InternalSearchRequest>) => ({\n    newRequest,\n    oldRequest: oldValue as InternalSearchRequest\n  })\n);\n\n/**\n * Resets the search state when the request is changed to null. See the\n * {@link searchXStoreModule} for details.\n *\n * @public\n */\nexport const resetStateIfNoRequestWire = filterTruthyPayload<InternalSearchRequest | null>(\n  wireCommitWithoutPayload('resetState')\n);\n\n/**\n * Search wiring.\n *\n * @internal\n */\nexport const searchWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParams,\n    saveOriginWire\n  },\n  UserAcceptedAQuery: {\n    setSearchQuery,\n    saveOriginWire\n  },\n  UserAcceptedSpellcheckQuery: {\n    resetSpellcheckQuery\n  },\n  UserClearedQuery: {\n    setSearchQuery,\n    cancelFetchAndSaveSearchResponseWire,\n    resetFromNoResultsWithFilters,\n    resetIsNoResults\n  },\n  UserClickedASort: {\n    setSort\n  },\n  UserPickedARelatedTag: {\n    saveOriginWire\n  },\n  UserReachedResultsListEnd: {\n    increasePageAppendingResultsWire\n  },\n  SearchRequestUpdated: {\n    resetStateIfNoRequestWire,\n    fetchAndSaveSearchResponseWire\n  },\n  SearchRequestChanged: {\n    resetRequestOnRefinementWire\n  },\n  SelectedRelatedTagsChanged: {\n    setRelatedTags\n  },\n  SelectedFiltersForRequestChanged: {\n    setSelectedFilters\n  },\n  ResultsChanged: {\n    resetAppending\n  },\n  SelectedSortProvided: {\n    setSort\n  },\n  ExtraParamsChanged: {\n    setSearchExtraParams\n  },\n  UserClickedCloseX: {\n    clearSearchQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearSearchQuery\n  }\n});\n","// XModule\nimport { XModule } from '../x-modules.types';\nimport { searchEmitters } from './store/emitters';\nimport { searchXStoreModule } from './store/module';\nimport { SearchXStoreModule } from './store/types';\nimport { searchWiring } from './wiring';\n\n/**\n * Search {@link XModule} alias.\n *\n * @public\n */\nexport type SearchXModule = XModule<SearchXStoreModule>;\n\n/**\n * Search {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `search` entry point.\n *\n * @public\n */\nexport const searchXModule: SearchXModule = {\n  name: 'search',\n  storeModule: searchXStoreModule,\n  storeEmitters: searchEmitters,\n  wiring: searchWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Banner as BannerModel } from '@empathyco/x-types';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n\n  /**.\n   * A banner result is just an item that has been inserted into the search results to advertise\n   * something. Usually it is the first item in the grid or it can be placed in the middle of them\n   * and fill the whole row where appears.\n   * The banner may be clickable or non-clickable depending on whether it has an associated URL\n   * or not. It contains an image and, optionally, a title. In case the image does not\n   * load due to an error the banner will not be rendered.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `titleClass`.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['titleClass'])]\n  })\n  export default class Banner extends Vue {\n    /**\n     * The banner data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public banner!: BannerModel;\n\n    /**\n     * Flag to handle banner image errors.\n     *\n     * @public\n     */\n    protected imageFailed = false;\n\n    /**\n     * Emits the banner click event.\n     *\n     * @internal\n     */\n    protected emitClickEvent(): void {\n      this.$x.emit('UserClickedABanner', this.banner);\n    }\n\n    /**\n     * Returns the events supported by the anchor.\n     *\n     * @returns Events supported by the anchor.\n     *\n     * @internal\n     */\n    protected anchorEvents(): Partial<{\n      [key in keyof GlobalEventHandlersEventMap]: () => void;\n    }> {\n      return {\n        click: () => this.emitClickEvent(),\n        auxclick: () => this.emitClickEvent(),\n        contextmenu: () => this.emitClickEvent()\n      };\n    }\n  }\n","<template>\n  <component\n    :is=\"banner.url ? 'a' : 'figure'\"\n    v-if=\"!imageFailed\"\n    v-on=\"banner.url ? anchorEvents() : {}\"\n    :href=\"banner.url\"\n    class=\"x-banner\"\n    data-test=\"banner\"\n  >\n    <img\n      @error=\"imageFailed = true\"\n      :src=\"banner.image\"\n      :alt=\"banner.title ? banner.title : 'Banner'\"\n      class=\"x-banner__image\"\n      data-test=\"banner-image\"\n    />\n    <h2 v-if=\"banner.title\" class=\"x-banner__title\" :class=\"titleClass\" data-test=\"banner-title\">\n      {{ banner.title }}\n    </h2>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { Banner as BannerModel } from '@empathyco/x-types';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n\n  /**.\n   * A banner result is just an item that has been inserted into the search results to advertise\n   * something. Usually it is the first item in the grid or it can be placed in the middle of them\n   * and fill the whole row where appears.\n   * The banner may be clickable or non-clickable depending on whether it has an associated URL\n   * or not. It contains an image and, optionally, a title. In case the image does not\n   * load due to an error the banner will not be rendered.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `titleClass`.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['titleClass'])]\n  })\n  export default class Banner extends Vue {\n    /**\n     * The banner data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public banner!: BannerModel;\n\n    /**\n     * Flag to handle banner image errors.\n     *\n     * @public\n     */\n    protected imageFailed = false;\n\n    /**\n     * Emits the banner click event.\n     *\n     * @internal\n     */\n    protected emitClickEvent(): void {\n      this.$x.emit('UserClickedABanner', this.banner);\n    }\n\n    /**\n     * Returns the events supported by the anchor.\n     *\n     * @returns Events supported by the anchor.\n     *\n     * @internal\n     */\n    protected anchorEvents(): Partial<{\n      [key in keyof GlobalEventHandlersEventMap]: () => void;\n    }> {\n      return {\n        click: () => this.emitClickEvent(),\n        auxclick: () => this.emitClickEvent(),\n        contextmenu: () => this.emitClickEvent()\n      };\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  .x-banner {\n    display: flex;\n    flex-flow: column nowrap;\n    text-decoration: none;\n\n    &__image {\n      width: 100%;\n      object-fit: contain;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\nIn this example banned data is passed as a prop.\n\n_Here you can see how the `Banner` component is rendered._\n\n```vue\n<template>\n  <Banner :banner=\"banner\" />\n</template>\n\n<script>\n  import { Banner } from '@empathyco/x-components/search';\n  export default {\n    name: 'BannerDemo',\n    components: {\n      Banner\n    },\n    data() {\n      return {\n        banner: {\n          modelName: 'Banner',\n          id: 'banner-example',\n          url: 'https://my-website.com/summer-shirts',\n          image: 'https://my-website.com/images/summer-shirts.jpg',\n          title: 'Trendy summer shirts',\n          position: 1\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the items with classes\n\nThe `titleClass` prop can be used to add classes to the banner title.\n\n```vue\n<template>\n  <Banner :banner=\"banner\" titleClass=\"x-bg-neutral-50\" />\n</template>\n\n<script>\n  import { Banner } from '@empathyco/x-components/search';\n  export default {\n    name: 'BannerDemo',\n    components: {\n      Banner\n    },\n    data() {\n      return {\n        banner: {\n          modelName: 'Banner',\n          id: 'banner-example',\n          url: 'https://my-website.com/summer-shirts',\n          image: 'https://my-website.com/images/summer-shirts.jpg',\n          title: 'Trendy summer shirts',\n          position: 1\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Banner } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Inject, Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { FeatureLocation } from '../../../types/origin';\n  import { ListItem } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a {@link ItemsList} list of banners from {@link SearchState.banners} by\n   * default using the `ItemsInjectionMixin`.\n   *\n   * The component provides a default slot which wraps the whole component with the `banners`\n   * plus the `searchInjectedItems` which also contains the injected list items from\n   * the ancestor.\n   *\n   * It also provides the parent slots to customize the items.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      ItemsList,\n      NoElement\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class BannersList extends ItemsListInjectionMixin {\n    /**\n     * The banners to render from the state.\n     *\n     * @public\n     */\n    @State('search', 'banners')\n    public stateItems!: Banner[];\n\n    /**\n     * Animation component that will be used to animate the banners.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The provided {@link FeatureLocation} for the component.\n     *\n     * @internal\n     */\n    @Inject({ default: undefined })\n    protected location?: FeatureLocation;\n\n    /**\n     * Number of columns the grid is being divided into.\n     *\n     * @internal\n     */\n    protected columnsNumber = 0;\n\n    /**\n     * Handler to update the number of columns when it changes.\n     *\n     * @param newColumnsNumber - The new columns value.\n     * @param metadata - The {@link @empathyco/x-bus#SubjectPayload.metadata}.\n     *\n     * @internal\n     */\n    @XOn(['RenderedColumnsNumberChanged'])\n    setColumnsNumber(newColumnsNumber: number, { location }: WireMetadata): void {\n      if (location === this.location) {\n        this.columnsNumber = newColumnsNumber;\n      }\n    }\n\n    /**\n     * The `stateItems` concatenated with the `injectedListItems` if there are.\n     *\n     * @remarks This computed defines the merging strategy of the `stateItems` and the\n     * `injectedListItems`.\n     *\n     * @returns List of {@link ListItem}.\n     *\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems?.length) {\n        return this.stateItems;\n      }\n      const items = [...this.injectedListItems];\n      let index = 0,\n        previousBannerRow = -1;\n      for (const item of this.stateItems) {\n        const position = item.position ?? 1;\n        let row = position - 1;\n        if (row <= previousBannerRow) {\n          row = previousBannerRow + 1;\n        }\n        const rowsDiff = row - previousBannerRow;\n        if (rowsDiff > 1) {\n          index += (rowsDiff - 1) * this.columnsNumber;\n        }\n        const isIndexInLoadedPages = index <= items.length;\n        const areAllPagesLoaded = this.$x.results.length === this.$x.totalResults;\n        if (!isIndexInLoadedPages && !areAllPagesLoaded) {\n          break;\n        }\n        items.splice(index, 0, item);\n        index++;\n        previousBannerRow = row;\n      }\n      return items;\n    }\n  }\n","<template>\n  <NoElement>\n    <!--\n      @slot Customized BannersList layout.\n        @binding {Banner[]} items - Banners plus the injected list items to render.\n        @binding {Vue | string} animation - Animation to animate the elements.\n    -->\n    <slot v-bind=\"{ items, animation }\">\n      <ItemsList :animation=\"animation\" :items=\"items\">\n        <template v-for=\"(_, slotName) in $scopedSlots\" v-slot:[slotName]=\"{ item }\">\n          <slot :name=\"slotName\" :item=\"item\" />\n        </template>\n      </ItemsList>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { Banner } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Inject, Prop } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { FeatureLocation } from '../../../types/origin';\n  import { ListItem } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a {@link ItemsList} list of banners from {@link SearchState.banners} by\n   * default using the `ItemsInjectionMixin`.\n   *\n   * The component provides a default slot which wraps the whole component with the `banners`\n   * plus the `searchInjectedItems` which also contains the injected list items from\n   * the ancestor.\n   *\n   * It also provides the parent slots to customize the items.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      ItemsList,\n      NoElement\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class BannersList extends ItemsListInjectionMixin {\n    /**\n     * The banners to render from the state.\n     *\n     * @public\n     */\n    @State('search', 'banners')\n    public stateItems!: Banner[];\n\n    /**\n     * Animation component that will be used to animate the banners.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The provided {@link FeatureLocation} for the component.\n     *\n     * @internal\n     */\n    @Inject({ default: undefined })\n    protected location?: FeatureLocation;\n\n    /**\n     * Number of columns the grid is being divided into.\n     *\n     * @internal\n     */\n    protected columnsNumber = 0;\n\n    /**\n     * Handler to update the number of columns when it changes.\n     *\n     * @param newColumnsNumber - The new columns value.\n     * @param metadata - The {@link @empathyco/x-bus#SubjectPayload.metadata}.\n     *\n     * @internal\n     */\n    @XOn(['RenderedColumnsNumberChanged'])\n    setColumnsNumber(newColumnsNumber: number, { location }: WireMetadata): void {\n      if (location === this.location) {\n        this.columnsNumber = newColumnsNumber;\n      }\n    }\n\n    /**\n     * The `stateItems` concatenated with the `injectedListItems` if there are.\n     *\n     * @remarks This computed defines the merging strategy of the `stateItems` and the\n     * `injectedListItems`.\n     *\n     * @returns List of {@link ListItem}.\n     *\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems?.length) {\n        return this.stateItems;\n      }\n      const items = [...this.injectedListItems];\n      let index = 0,\n        previousBannerRow = -1;\n      for (const item of this.stateItems) {\n        const position = item.position ?? 1;\n        let row = position - 1;\n        if (row <= previousBannerRow) {\n          row = previousBannerRow + 1;\n        }\n        const rowsDiff = row - previousBannerRow;\n        if (rowsDiff > 1) {\n          index += (rowsDiff - 1) * this.columnsNumber;\n        }\n        const isIndexInLoadedPages = index <= items.length;\n        const areAllPagesLoaded = this.$x.results.length === this.$x.totalResults;\n        if (!isIndexInLoadedPages && !areAllPagesLoaded) {\n          break;\n        }\n        items.splice(index, 0, item);\n        index++;\n        previousBannerRow = row;\n      }\n      return items;\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nTo use this component, the Search service must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you have a basic example of how the BannersList is rendered.\n\n_Type any term in the input field to try it out!_\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <BannersList />\n  </div>\n</template>\n\n<script>\n  import { BannersList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'BannersListDemo',\n    components: {\n      SearchInput,\n      BannersList\n    }\n  };\n</script>\n```\n\n### Play with the animation\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <BannersList :animation=\"fadeAndSlide\" />\n  </div>\n</template>\n\n<script>\n  import { BannersList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { FadeAndSlide } from '@empathyco/x-components/animations';\n\n  export default {\n    name: 'BannersListDemo',\n    components: {\n      SearchInput,\n      BannersList\n    },\n    data() {\n      return {\n        fadeAndSlide: FadeAndSlide\n      };\n    }\n  };\n</script>\n```\n\n### Overriding default content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <BannersList #default=\"{ items, animation }\">\n      <BaseGrid :items=\"items\" :animation=\"animation\">\n        <template #banner=\"{ item }\">\n          <span>Banner: {{ item.title }}</span>\n        </template>\n        <template #default=\"{ item }\">\n          <span>Default: {{ item }}</span>\n        </template>\n      </BaseGrid>\n    </BannersList>\n  </div>\n</template>\n\n<script>\n  import { BannersList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'BannersListDemo',\n    components: {\n      SearchInput,\n      BannersList\n    }\n  };\n</script>\n```\n\n### Overriding banner content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <BannersList #banner=\"{ item }\">\n      <span class=\"banner\">\n        {{ item.title }}\n      </span>\n    </BannersList>\n  </div>\n</template>\n\n<script>\n  import { BannersList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'BannersListDemo',\n    components: {\n      SearchInput,\n      BannersList\n    }\n  };\n</script>\n```\n\n### Data injection\n\nStarting with the `ResultsList` component as root element, you can concat the list of results and\nbanners in order to be injected by the `BaseGrid` (or components that extend it).\n\n### Data injection\n\nStarting with the `ResultsList` component as root element, you can concat the list of list items\nusing `BannersList`, `PromotedsList`, `BaseGrid` or any component that injects the `listItems`\nvalue.\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <BannersList>\n        <template #banner=\"{ item }\">Banner: {{ item.id }}</template>\n        <template #result=\"{ item }\">Result: {{ item.id }}</template>\n      </BannersList>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { ResultsList, BannersList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'BannersListDemo',\n    components: {\n      SearchInput,\n      ResultsList,\n      BannersList\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\n   * and {@link SearchXEvents.UserClickedPartialQuery} events, expressing the user\n   * intention to set the partial query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PartialQueryButton extends Vue {\n    /**\n     * The query property.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public query!: string;\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'partial_result'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      this.$x.emit('UserAcceptedAQuery', this.query, this.createEventMetadata());\n      this.$x.emit('UserClickedPartialQuery', this.query, this.createEventMetadata());\n    }\n  }\n","<template>\n  <button\n    @click=\"emitEvents\"\n    class=\"x-partial-query-button x-button\"\n    data-test=\"partial-query-button\"\n  >\n    <slot v-bind=\"{ query }\">{{ query }}</slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\n   * and {@link SearchXEvents.UserClickedPartialQuery} events, expressing the user\n   * intention to set the partial query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PartialQueryButton extends Vue {\n    /**\n     * The query property.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public query!: string;\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'partial_result'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      this.$x.emit('UserAcceptedAQuery', this.query, this.createEventMetadata());\n      this.$x.emit('UserClickedPartialQuery', this.query, this.createEventMetadata());\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nA button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery} and {@link\nSearchXEvents.UserClickedPartialQuery} events, expressing the user intention to set the partial\nquery.\n\nThe component sets the current query as the new query and emits the `UserAcceptedAQuery` and\n`UserClickedPartialQuery` events when is clicked.\n\n```vue\n<template>\n  <PartialQueryButton :query=\"query\" />\n</template>\n```\n\n### Customizing its contents\n\n```vue\n<template>\n  <PartialQueryButton>\n    <template #default=\"{ query }\">\n      <span class=\"x-partial-query-button__text\">\n        Set the Partial query as the new query: {{ query }}!\n      </span>\n    </template>\n  </PartialQueryButton>\n</template>\n\n<script>\n  import { PartialQueryButton } from '@empathyco/x-components/search';\n\n  export default {\n    components: {\n      PartialQueryButton\n    }\n  };\n</script>\n```\n\n## Events\n\nThis component emits 2 different events:\n\n- UserAcceptedAQuery: the event is emitted after the user clicks the partial query. The event\n  payload is the partial query data.\n- UserClickedPartialQuery: the event is emitted after the user clicks the partial query. The event\n  payload is the partial query data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { PartialResult } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a list of partial results from {@link SearchState.partialResults} by default.\n   * It also provides the partial result slot to customize the item with the partial result bound.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PartialResultsList extends Vue {\n    /**\n     * Animation component that will be used to animate the partial results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n    /**\n     * The partials results from the search state.\n     *\n     * @public\n     */\n    @State('search', 'partialResults')\n    public items!: PartialResult[];\n    /**\n     * Maximum number of partial results to show.\n     *\n     * @public\n     */\n    @Prop({ default: 5 })\n    protected maxItemsToRender!: number;\n    /**\n     * A limited number of partial results.\n     *\n     * @returns The partial results sliced by the maxItemsToRender.\n     *\n     * @internal\n     */\n    protected get partialResults(): PartialResult[] {\n      return this.items.slice(0, this.maxItemsToRender);\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    v-if=\"partialResults.length\"\n    class=\"x-partial-results-list\"\n    data-test=\"partial-results\"\n    tag=\"ul\"\n  >\n    <li\n      v-for=\"(partialResult, index) in partialResults\"\n      :key=\"`${partialResult.query}-${index}`\"\n      class=\"x-partial-result\"\n      data-test=\"partial-result\"\n    >\n      <!--\n       @slot (Required) Partial results item content\n           @binding {Partial} partialResult - Partial Result data\n      -->\n      <slot :partialResult=\"partialResult\" />\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { PartialResult } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a list of partial results from {@link SearchState.partialResults} by default.\n   * It also provides the partial result slot to customize the item with the partial result bound.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PartialResultsList extends Vue {\n    /**\n     * Animation component that will be used to animate the partial results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n    /**\n     * The partials results from the search state.\n     *\n     * @public\n     */\n    @State('search', 'partialResults')\n    public items!: PartialResult[];\n    /**\n     * Maximum number of partial results to show.\n     *\n     * @public\n     */\n    @Prop({ default: 5 })\n    protected maxItemsToRender!: number;\n    /**\n     * A limited number of partial results.\n     *\n     * @returns The partial results sliced by the maxItemsToRender.\n     *\n     * @internal\n     */\n    protected get partialResults(): PartialResult[] {\n      return this.items.slice(0, this.maxItemsToRender);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-partial-results-list {\n    display: flex;\n    flex-flow: column nowrap;\n    list-style-type: none;\n    padding: 0;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component loops through an array of partials an exposed a slot to use customize each partial.\n\n### Basic example\n\nIt renders a list of partial results using the default slot:\n\n```vue\n<template>\n  <PartialResultsList>\n    <template #default=\"{ partialResult }\">\n      <ResultsList :results=\"partialResult.results\" />\n    </template>\n  </PartialResultsList>\n</template>\n```\n\n### Configuring the number of partials\n\nIt sets the maximum partials to show to 3.\n\n```vue\n<template>\n  <PartialResultsList :maxItemsToRender=\"3\">\n    <template #default=\"{ partialResult }\">\n      <ResultsList :results=\"partialResult.results\" />\n    </template>\n  </PartialResultsList>\n</template>\n```\n\n### Rendering usage\n\nIt renders a list of partial results using the default slot. It will show the query, the partial\nresults and a button to update the query with the partial one.\n\n```vue\n<template>\n  <PartialResultsList>\n    <template #default=\"{ partialResult }\">\n      <span>{{ partialResult.query }}</span>\n      <BaseGrid :columns=\"4\" :items=\"partialResult.results\">\n        <template #result=\"{ item }\">\n          <BaseResultLink :result=\"item\">\n            <template #default=\"{ item }\">\n              <BaseResultImage :result=\"item\" />\n              <span class=\"x-result__title\">{{ item.name }}</span>\n            </template>\n          </BaseResultLink>\n        </template>\n      </BaseGrid>\n      <PartialQueryButton :query=\"partialResult.query\">\n        <template #default=\"{ query }\">Ver todos {{ query }}</template>\n      </PartialQueryButton>\n    </template>\n  </PartialResultsList>\n</template>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n  import { Promoted as PromotedModel } from '@empathyco/x-types';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n\n  /**\n   * A promoted result is just an item that has been inserted into the search results to advertise\n   * something. Usually it is one of the first items in the grid, and has the same shape as a\n   * result. It just contains a link to the promoted content, an image, and a title.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `titleClass`.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['titleClass'])]\n  })\n  export default class Promoted extends Vue {\n    /**\n     * The promoted data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public promoted!: PromotedModel;\n\n    /**\n     * Emits the promoted click event.\n     *\n     * @internal\n     */\n    protected emitClickEvent(): void {\n      this.$x.emit('UserClickedAPromoted', this.promoted);\n    }\n  }\n","<template>\n  <a @click=\"emitClickEvent\" :href=\"promoted.url\" class=\"x-promoted\" data-test=\"promoted\">\n    <img :src=\"promoted.image\" class=\"x-promoted__image\" :alt=\"promoted.title\" />\n    <h2 class=\"x-promoted__title\" :class=\"titleClass\" data-test=\"promoted-title\">\n      {{ promoted.title }}\n    </h2>\n  </a>\n</template>\n\n<script lang=\"ts\">\n  import { Promoted as PromotedModel } from '@empathyco/x-types';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n\n  /**\n   * A promoted result is just an item that has been inserted into the search results to advertise\n   * something. Usually it is one of the first items in the grid, and has the same shape as a\n   * result. It just contains a link to the promoted content, an image, and a title.\n   *\n   * Additionally, this component exposes the following props to modify the classes of the\n   * elements: `titleClass`.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['titleClass'])]\n  })\n  export default class Promoted extends Vue {\n    /**\n     * The promoted data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    public promoted!: PromotedModel;\n\n    /**\n     * Emits the promoted click event.\n     *\n     * @internal\n     */\n    protected emitClickEvent(): void {\n      this.$x.emit('UserClickedAPromoted', this.promoted);\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n  .x-promoted {\n    display: flex;\n    flex-flow: column nowrap;\n    text-decoration: none;\n\n    &__image {\n      width: 100%;\n      object-fit: contain;\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\nIn this example promoted data is passed as a prop.\n\n_Here you can see how the `Promoted` component is rendered._\n\n```vue\n<template>\n  <Promoted :promoted=\"promoted\" />\n</template>\n\n<script>\n  import { Promoted } from '@empathyco/x-components/search';\n\n  export default {\n    name: 'PromotedDemo',\n    components: {\n      Promoted\n    },\n    data() {\n      return {\n        promoted: {\n          modelName: 'Promoted',\n          id: 'promoted-example',\n          url: 'https://my-website.com/summer-shirts',\n          image: 'https://my-website.com/images/summer-shirts.jpg',\n          title: 'Trendy summer shirts',\n          position: 1\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the items with classes\n\nThe `titleClass` prop can be used to add classes to the promoted title.\n\n```vue\n<template>\n  <Promoted :promoted=\"promoted\" titleClass=\"x-bg-neutral-50\" />\n</template>\n\n<script>\n  import { Promoted } from '@empathyco/x-components/search';\n\n  export default {\n    name: 'PromotedDemo',\n    components: {\n      Promoted\n    },\n    data() {\n      return {\n        promoted: {\n          modelName: 'Promoted',\n          id: 'promoted-example',\n          url: 'https://my-website.com/summer-shirts',\n          image: 'https://my-website.com/images/summer-shirts.jpg',\n          title: 'Trendy summer shirts',\n          position: 1\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Promoted } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { ListItem } from '../../../utils/types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a {@link ItemsList} of promoteds from {@link SearchState.promoteds} by default\n   * using the `ItemsInjectionMixin`.\n   *\n   * The component provides a default slot which wraps the whole component with the `promoteds`\n   * plus the `searchInjectedItems` which also contains the injected list items from\n   * the ancestor.\n   *\n   * It also provides the parent slots to customize the items.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PromotedsList extends ItemsListInjectionMixin {\n    /**\n     * The promoteds to render from the state.\n     *\n     * @public\n     */\n    @State('search', 'promoteds')\n    public stateItems!: Promoted[];\n\n    /**\n     * Animation component that will be used to animate the promoteds.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The `stateItems` concatenated with the `injectedListItems` if there are.\n     *\n     * @remarks This computed defines the merging strategy of the `stateItems` and the\n     * `injectedListItems`.\n     *\n     * @returns List of {@link ListItem}.\n     *\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems?.length) {\n        return this.stateItems;\n      }\n      const items = [...this.injectedListItems];\n      for (const item of this.stateItems) {\n        const position = item.position ?? 1;\n        let index = position - 1;\n        while (items.at(index)?.modelName === 'Promoted') {\n          index++;\n        }\n        const isIndexInLoadedPages = index <= items.length;\n        const areAllPagesLoaded = this.$x.results.length === this.$x.totalResults;\n        if (!isIndexInLoadedPages && !areAllPagesLoaded) {\n          break;\n        }\n        items.splice(index, 0, item);\n      }\n      return items;\n    }\n  }\n","<template>\n  <NoElement>\n    <!--\n      @slot Customized Promoteds List layout.\n        @binding {Promoted[]} items - Promoteds plus the injected list items to render.\n        @binding {Vue | string} animation - Animation to animate the elements.\n    -->\n    <slot v-bind=\"{ items, animation }\">\n      <ItemsList :animation=\"animation\" :items=\"items\">\n        <template v-for=\"(_, slotName) in $scopedSlots\" v-slot:[slotName]=\"{ item }\">\n          <slot :name=\"slotName\" :item=\"item\" />\n        </template>\n      </ItemsList>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { Promoted } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import { ItemsListInjectionMixin } from '../../../components/items-list-injection.mixin';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { ListItem } from '../../../utils/types';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * It renders a {@link ItemsList} of promoteds from {@link SearchState.promoteds} by default\n   * using the `ItemsInjectionMixin`.\n   *\n   * The component provides a default slot which wraps the whole component with the `promoteds`\n   * plus the `searchInjectedItems` which also contains the injected list items from\n   * the ancestor.\n   *\n   * It also provides the parent slots to customize the items.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class PromotedsList extends ItemsListInjectionMixin {\n    /**\n     * The promoteds to render from the state.\n     *\n     * @public\n     */\n    @State('search', 'promoteds')\n    public stateItems!: Promoted[];\n\n    /**\n     * Animation component that will be used to animate the promoteds.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * The `stateItems` concatenated with the `injectedListItems` if there are.\n     *\n     * @remarks This computed defines the merging strategy of the `stateItems` and the\n     * `injectedListItems`.\n     *\n     * @returns List of {@link ListItem}.\n     *\n     * @internal\n     */\n    public override get items(): ListItem[] {\n      if (!this.injectedListItems?.length) {\n        return this.stateItems;\n      }\n      const items = [...this.injectedListItems];\n      for (const item of this.stateItems) {\n        const position = item.position ?? 1;\n        let index = position - 1;\n        while (items.at(index)?.modelName === 'Promoted') {\n          index++;\n        }\n        const isIndexInLoadedPages = index <= items.length;\n        const areAllPagesLoaded = this.$x.results.length === this.$x.totalResults;\n        if (!isIndexInLoadedPages && !areAllPagesLoaded) {\n          break;\n        }\n        items.splice(index, 0, item);\n      }\n      return items;\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nTo use this component, the Search service must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you have a basic example of how the PromotedsList is rendered.\n\n_Type any term in the input field to try it out!_\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n\n    <PromotedsList />\n  </div>\n</template>\n\n<script>\n  import { PromotedsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'PromotedsListDemo',\n    components: {\n      SearchInput,\n      PromotedsList\n    }\n  };\n</script>\n```\n\n### Play with the animation\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <PromotedsList :animation=\"fadeAndSlide\" />\n  </div>\n</template>\n\n<script>\n  import { PromotedsList } from '@empathyco/x-components/search';\n  import { FadeAndSlide } from '@empathyco/x-components/animations';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'PromotedsListDemo',\n    components: {\n      SearchInput,\n      PromotedsList\n    },\n    data() {\n      return {\n        fadeAndSlide: FadeAndSlide\n      };\n    }\n  };\n</script>\n```\n\n### Overriding default content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <PromotedsList #default=\"{ items, animation }\">\n      <BaseGrid :items=\"items\" :animation=\"animation\">\n        <template #promoted=\"{ item }\">\n          <span>Promoted: {{ item.title }}</span>\n        </template>\n        <template #default=\"{ item }\">\n          <span>Default: {{ item }}</span>\n        </template>\n      </BaseGrid>\n    </PromotedsList>\n  </div>\n</template>\n\n<script>\n  import { PromotedsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { BaseGrid } from '@empathyco/x-components';\n\n  export default {\n    name: 'PromotedsListDemo',\n    components: {\n      SearchInput,\n      PromotedsList,\n      BaseGrid\n    }\n  };\n</script>\n```\n\n### Overriding promoted content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <PromotedsList #promoted=\"{ item }\">\n      <span class=\"promoted\">\n        {{ item.title }}\n      </span>\n    </PromotedsList>\n  </div>\n</template>\n\n<script>\n  import { PromotedsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'PromotedsListDemo',\n    components: {\n      SearchInput,\n      PromotedsList\n    }\n  };\n</script>\n```\n\n### Data injection\n\nStarting with the `ResultsList` component as root element, you can concat the list of list items\nusing `BannersList`, `PromotedsList`, `BaseGrid` or any component that injects the `listItems`\nvalue.\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <PromotedsList>\n        <template #promoted=\"{ item }\">Promoted: {{ item.id }}</template>\n        <template #result=\"{ item }\">Result: {{ item.id }}</template>\n      </PromotedsList>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { ResultsList, PromotedsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'PromotedsListDemo',\n    components: {\n      SearchInput,\n      ResultsList,\n      PromotedsList\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n  import { Redirection as RedirectionModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * A redirection is a component that sends the user to a link in the website. It is helpful when\n   * there are queries like `help`, `shipping costs`, `my account`, where a link to a section in the\n   * website will be more helpful than the set of results returned.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class Redirection extends Vue {\n    @State('search', 'redirections')\n    public redirections!: RedirectionModel[];\n\n    /**\n     * The redirection mode. Auto for auto redirection and manual for an user interaction.\n     *\n     * @public\n     */\n    @Prop({ default: 'auto' })\n    public mode!: 'auto' | 'manual';\n\n    /**\n     * The waiting time in seconds until the redirection is made.\n     *\n     * @remarks this delay only works in auto mode.\n     *\n     * @public\n     */\n    @Prop({ default: 0 })\n    public delayInSeconds!: number;\n\n    /**\n     * The timeout id, used to cancel the redirection.\n     *\n     * @internal\n     */\n    protected timeoutId?: number;\n\n    /**\n     * Boolean flag which indicates if the redirection is running.\n     *\n     * @public\n     */\n    protected isRedirecting = true;\n\n    /**\n     * Computed property which returns the first recommendation of the state, if any returns null.\n     *\n     * @returns The first redirection of the state.\n     *\n     * @internal\n     */\n    protected get redirection(): RedirectionModel | null {\n      return this.redirections?.[0] ?? null;\n    }\n\n    /**\n     * Watcher function which adds a setTimeout to the redirect method is the component\n     * is in auto mode and there are redirections.\n     *\n     * @internal\n     */\n    @Watch('redirections', { immediate: true })\n    protected redirectWithDelay(): void {\n      this.isRedirecting = true;\n      if (this.mode === 'auto' && this.redirection) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.timeoutId = window.setTimeout(this.redirect, this.delayInSeconds * 1000);\n      }\n    }\n\n    /**\n     * Dispatches the redirection, updating the url.\n     *\n     * @public\n     */\n    protected redirect(): void {\n      clearTimeout(this.timeoutId);\n      this.$x.emit('UserClickedARedirection', this.redirection!);\n      window.location.replace(this.redirection!.url);\n    }\n\n    /**\n     * Stops the redirection, emitting `UserClickedAbortARedirection` event.\n     *\n     * @public\n     */\n    protected abortRedirect(): void {\n      this.cancelRedirect();\n      this.$x.emit('UserClickedAbortARedirection');\n    }\n\n    /**\n     * Stops the animation if the user search another query.\n     *\n     * @internal\n     */\n    @XOn(['UserAcceptedAQuery', 'UserClearedQuery', 'UserSelectedARelatedTag'])\n    cancelRedirect(): void {\n      clearTimeout(this.timeoutId);\n      this.isRedirecting = false;\n    }\n  }\n","<template>\n  <div v-if=\"redirection && $scopedSlots.default\" class=\"x-redirection\" data-test=\"redirection\">\n    <slot v-bind=\"{ redirection, redirect, abortRedirect, isRedirecting, delayInSeconds }\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Redirection as RedirectionModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { XOn } from '../../../components/decorators/bus.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * A redirection is a component that sends the user to a link in the website. It is helpful when\n   * there are queries like `help`, `shipping costs`, `my account`, where a link to a section in the\n   * website will be more helpful than the set of results returned.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class Redirection extends Vue {\n    @State('search', 'redirections')\n    public redirections!: RedirectionModel[];\n\n    /**\n     * The redirection mode. Auto for auto redirection and manual for an user interaction.\n     *\n     * @public\n     */\n    @Prop({ default: 'auto' })\n    public mode!: 'auto' | 'manual';\n\n    /**\n     * The waiting time in seconds until the redirection is made.\n     *\n     * @remarks this delay only works in auto mode.\n     *\n     * @public\n     */\n    @Prop({ default: 0 })\n    public delayInSeconds!: number;\n\n    /**\n     * The timeout id, used to cancel the redirection.\n     *\n     * @internal\n     */\n    protected timeoutId?: number;\n\n    /**\n     * Boolean flag which indicates if the redirection is running.\n     *\n     * @public\n     */\n    protected isRedirecting = true;\n\n    /**\n     * Computed property which returns the first recommendation of the state, if any returns null.\n     *\n     * @returns The first redirection of the state.\n     *\n     * @internal\n     */\n    protected get redirection(): RedirectionModel | null {\n      return this.redirections?.[0] ?? null;\n    }\n\n    /**\n     * Watcher function which adds a setTimeout to the redirect method is the component\n     * is in auto mode and there are redirections.\n     *\n     * @internal\n     */\n    @Watch('redirections', { immediate: true })\n    protected redirectWithDelay(): void {\n      this.isRedirecting = true;\n      if (this.mode === 'auto' && this.redirection) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.timeoutId = window.setTimeout(this.redirect, this.delayInSeconds * 1000);\n      }\n    }\n\n    /**\n     * Dispatches the redirection, updating the url.\n     *\n     * @public\n     */\n    protected redirect(): void {\n      clearTimeout(this.timeoutId);\n      this.$x.emit('UserClickedARedirection', this.redirection!);\n      window.location.replace(this.redirection!.url);\n    }\n\n    /**\n     * Stops the redirection, emitting `UserClickedAbortARedirection` event.\n     *\n     * @public\n     */\n    protected abortRedirect(): void {\n      this.cancelRedirect();\n      this.$x.emit('UserClickedAbortARedirection');\n    }\n\n    /**\n     * Stops the animation if the user search another query.\n     *\n     * @internal\n     */\n    @XOn(['UserAcceptedAQuery', 'UserClearedQuery', 'UserSelectedARelatedTag'])\n    cancelRedirect(): void {\n      clearTimeout(this.timeoutId);\n      this.isRedirecting = false;\n    }\n  }\n</script>\n\n<style lang=\"scss\"></style>\n\n<docs lang=\"mdx\">\n## Play with the component\n\nIn this example, a query has been searched in the search input resulting in a case where the\nresponse has a redirection.\n\nA text box appears bellow the search box indicating that you're going to be redirected to another\nweb page.\n\nThis component has two modes:\n\n- Auto mode means that the redirection will occur after a certain number of seconds passed as a\n  property.\n- If the value is 0 the redirection will be instantly.\n- Manual mode means that the user have to click the redirect button or nothing will happen.\n\n_Type any term in the input field to try it out!_\n\n```vue\n<template>\n  <Redirection #default=\"{ redirection, redirect, abortRedirect }\">\n    <span>In a few seconds you're going to be redirected!</span>\n    <span>{{ redirection.url }}</span>\n    <button @click=\"redirection\">Redirect now!</button>\n    <button @click=\"abortRedirect\">Abort redirection!</button>\n  </Redirection>\n</template>\n\n<script>\n  import { Redirection } from '@empathyco/x-components/search';\n  export default {\n    name: 'RedirectionDemo',\n    components: {\n      Redirection\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents behaviour can be changed, in this example the mode of the component will be manual\nforcing the user to accept the redirection\n\n```vue\n<template>\n  <Redirection #default=\"{ redirection, redirect }\">\n    <span>{{ redirection.url }}</span>\n    <button @click=\"redirect\">Redirect now!</button>\n  </Redirection>\n</template>\n\n<script>\n  import { Redirection } from '@empathyco/x-components/search';\n  export default {\n    name: 'RedirectionDemo',\n    components: {\n      Redirection\n    },\n    data() {\n      return {\n        mode: 'manual'\n      };\n    }\n  };\n</script>\n```\n\n## Events\n\nThis component emits the following events:\n\n- `UserClickedARedirection` after the user clicks the redirection button.\n- `UserClickedAbortARedirection` after the user clicks the abort redirection button.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import {\n    HAS_MORE_ITEMS_KEY,\n    LIST_ITEMS_KEY,\n    QUERY_KEY\n  } from '../../../components/decorators/injection.consts';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { InfiniteScroll } from '../../../directives/infinite-scroll/infinite-scroll.types';\n  import { searchXModule } from '../x-module';\n  import { RequestStatus } from '../../../store/utils/status-store.utils';\n\n  /**\n   * It renders a {@link ItemsList} list with the results from {@link SearchState.results} by\n   * default.\n   *\n   * The component provides a default slot which wraps the whole component with the `results` bound.\n   *\n   * It also provides the slot result to customize the item, which is within the default slot, with\n   * the result bound.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class ResultsList extends Vue implements InfiniteScroll {\n    /**\n     * The results to render from the state.\n     *\n     * @remarks The results list are provided with `items` key. It can be\n     * concatenated with list items from components such as `BannersList`, `PromotedsList`,\n     * `BaseGrid` or any component that injects the list.\n     *\n     * @public\n     */\n    @XProvide(LIST_ITEMS_KEY)\n    @State('search', 'results')\n    public items!: Result[];\n\n    /**\n     * It provides the search query.\n     * This query is updated only when the search request has succeeded.\n     */\n    @XProvide(QUERY_KEY)\n    public providedQuery = '';\n\n    /**\n     * Indicates if there are more available results that have not been injected.\n     *\n     * @returns Boolean.\n     * @public\n     */\n    @XProvide(HAS_MORE_ITEMS_KEY)\n    public get hasMoreItems(): boolean {\n      return this.items.length < this.totalResults;\n    }\n\n    /**\n     * The total number of results, taken from the state.\n     */\n    @State('search', 'totalResults')\n    public totalResults!: number;\n\n    /**\n     * The status of the search request, taken from the state.\n     */\n    @State('search', 'status')\n    public searchStatus!: RequestStatus;\n\n    /**\n     * The query of the search request, taken from the state.\n     */\n    @State('search', 'query')\n    public searchQuery!: string;\n\n    /**\n     * Animation component that will be used to animate the results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Updates the query to be provided to the child components\n     * when the search request has succeeded.\n     *\n     * @param status - The status of the search request.\n     */\n    @Watch('searchStatus')\n    updateQuery(status: RequestStatus): void {\n      if (status === 'success') {\n        this.providedQuery = this.searchQuery;\n      }\n    }\n\n    /**\n     * It emits an {@link SearchXEvents.UserReachedResultsListEnd} event.\n     *\n     * @internal\n     */\n    onInfiniteScrollEnd(): void {\n      this.$x.emit('UserReachedResultsListEnd');\n    }\n  }\n","<template>\n  <NoElement>\n    <!--\n      @slot Customize ResultsList.\n        @binding {Result[]} items - Results to render.\n        @binding {Vue | string} animation - Animation to animate the elements.\n    -->\n    <slot v-bind=\"{ items, animation }\">\n      <ItemsList :animation=\"animation\" :items=\"items\">\n        <template v-for=\"(_, slotName) in $scopedSlots\" v-slot:[slotName]=\"{ item }\">\n          <slot :name=\"slotName\" :item=\"item\" />\n        </template>\n      </ItemsList>\n    </slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import { Result } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import {\n    HAS_MORE_ITEMS_KEY,\n    LIST_ITEMS_KEY,\n    QUERY_KEY\n  } from '../../../components/decorators/injection.consts';\n  import { XProvide } from '../../../components/decorators/injection.decorators';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { NoElement } from '../../../components/no-element';\n  import ItemsList from '../../../components/items-list.vue';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { InfiniteScroll } from '../../../directives/infinite-scroll/infinite-scroll.types';\n  import { searchXModule } from '../x-module';\n  import { RequestStatus } from '../../../store/utils/status-store.utils';\n\n  /**\n   * It renders a {@link ItemsList} list with the results from {@link SearchState.results} by\n   * default.\n   *\n   * The component provides a default slot which wraps the whole component with the `results` bound.\n   *\n   * It also provides the slot result to customize the item, which is within the default slot, with\n   * the result bound.\n   *\n   * @public\n   */\n  @Component({\n    components: {\n      NoElement,\n      ItemsList\n    },\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class ResultsList extends Vue implements InfiniteScroll {\n    /**\n     * The results to render from the state.\n     *\n     * @remarks The results list are provided with `items` key. It can be\n     * concatenated with list items from components such as `BannersList`, `PromotedsList`,\n     * `BaseGrid` or any component that injects the list.\n     *\n     * @public\n     */\n    @XProvide(LIST_ITEMS_KEY)\n    @State('search', 'results')\n    public items!: Result[];\n\n    /**\n     * It provides the search query.\n     * This query is updated only when the search request has succeeded.\n     */\n    @XProvide(QUERY_KEY)\n    public providedQuery = '';\n\n    /**\n     * Indicates if there are more available results that have not been injected.\n     *\n     * @returns Boolean.\n     * @public\n     */\n    @XProvide(HAS_MORE_ITEMS_KEY)\n    public get hasMoreItems(): boolean {\n      return this.items.length < this.totalResults;\n    }\n\n    /**\n     * The total number of results, taken from the state.\n     */\n    @State('search', 'totalResults')\n    public totalResults!: number;\n\n    /**\n     * The status of the search request, taken from the state.\n     */\n    @State('search', 'status')\n    public searchStatus!: RequestStatus;\n\n    /**\n     * The query of the search request, taken from the state.\n     */\n    @State('search', 'query')\n    public searchQuery!: string;\n\n    /**\n     * Animation component that will be used to animate the results.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Updates the query to be provided to the child components\n     * when the search request has succeeded.\n     *\n     * @param status - The status of the search request.\n     */\n    @Watch('searchStatus')\n    updateQuery(status: RequestStatus): void {\n      if (status === 'success') {\n        this.providedQuery = this.searchQuery;\n      }\n    }\n\n    /**\n     * It emits an {@link SearchXEvents.UserReachedResultsListEnd} event.\n     *\n     * @internal\n     */\n    onInfiniteScrollEnd(): void {\n      this.$x.emit('UserReachedResultsListEnd');\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component doesn't emit events.\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nTo use this component, the Search service must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nHere you have a basic example of how the ResultsList is rendered.\n\n_Type any term in the input field to try it out!_\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList />\n  </div>\n</template>\n\n<script>\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ResultsListDemo',\n    components: {\n      SearchInput,\n      ResultsList\n    }\n  };\n</script>\n```\n\n### Play with the animation\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList :animation=\"fadeAndSlide\" />\n  </div>\n</template>\n\n<script>\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { FadeAndSlide } from '@empathyco/x-components/animations';\n\n  export default {\n    name: 'ResultsListDemo',\n    components: {\n      SearchInput,\n      ResultsList\n    },\n    data() {\n      return {\n        fadeAndSlide: FadeAndSlide\n      };\n    }\n  };\n</script>\n```\n\n### Overriding default content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList #default=\"{ items, animation }\">\n      <BaseGrid :items=\"items\" :animation=\"animation\">\n        <template #result=\"{ item }\">\n          <span>Result: {{ item.name }}</span>\n        </template>\n        <template #default=\"{ item }\">\n          <span>Default: {{ item }}</span>\n        </template>\n      </BaseGrid>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { ResultsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { BaseGrid } from '@empathyco/x-components';\n\n  export default {\n    name: 'ResultsListDemo',\n    components: {\n      SearchInput,\n      ResultsList,\n      BaseGrid\n    }\n  };\n</script>\n```\n\n### Overriding result content\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList #result=\"{ item }\">\n      <span class=\"result\">\n        {{ item.name }}\n      </span>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { SearchInput, ResultsList } from '@empathyco/x-components/search';\n\n  export default {\n    name: 'ResultsListDemo',\n    components: {\n      SearchInput,\n      ResultsList\n    }\n  };\n</script>\n```\n\n### Data injection\n\nStarting with the `ResultsList` component as root element, you can concat the list of list items\nusing `BannersList`, `PromotedsList`, `BaseGrid` or any component that injects the `listItems`\nvalue.\n\nThe order in which elements are placed in the template will define the concat strategy of the items,\nso it is important to define it properly; for example, Promoteds will be usually before Banners so\nfirst promoted items are inserted within the results and then banner items are placed on top of\nthat, occupying the rows.\n\n```vue\n<template>\n  <div>\n    <SearchInput />\n    <ResultsList>\n      <PromotedsList>\n        <BannersList>\n          <template #result=\"{ item }\">Result: {{ item.id }}</template>\n          <template #banner=\"{ item }\">Banner: {{ item.id }}</template>\n          <template #promoted=\"{ item }\">Promoted: {{ item.id }}</template>\n        </BannersList>\n      </PromotedsList>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { ResultsList, BannersList, PromotedsList } from '@empathyco/x-components/search';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n\n  export default {\n    name: 'ResultsListDemo',\n    components: {\n      SearchInput,\n      ResultsList,\n      BannersList,\n      PromotedsList\n    }\n  };\n</script>\n```\n</docs>\n","import { Sort } from '@empathyco/x-types';\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { Prop } from 'vue-property-decorator';\nimport { State, XEmit } from '../../../components';\n\n/**\n * Mixin to share Sort logic.\n *\n * @public\n */\n@Component\nexport default class SortMixin extends Vue {\n  /**\n   * The list of possible sort values. If there are no values selected, the first item of\n   * this list will be selected.\n   *\n   * @public\n   */\n  @Prop({ required: true })\n  public items!: Sort[];\n\n  /**\n   * The search module selected sort. This is the source of truth when checking which\n   * sort is selected.\n   *\n   * @internal\n   */\n  @State('search', 'sort')\n  public selectedSort!: Sort;\n\n  /**\n   * Emits the {@link SearchXEvents.SelectedSortProvided | SelectedSortProvided} event whenever the\n   * provided {@link SortMixin.selectedSort} changes. If no value is provided, the first item of the\n   * {@link SortMixin.items} will be used as fallback.\n   *\n   * @returns The sorting value.\n   *\n   * @public\n   */\n  @XEmit('SelectedSortProvided')\n  public get providedSelectedSort(): Sort {\n    return this.selectedSort;\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Sort } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { BaseEventButton } from '../../../components';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils';\n  import { XEventsTypes } from '../../../wiring';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import SortMixin from './sort.mixin';\n\n  /**\n   * Sort Picker item options.\n   *\n   * @public\n   */\n  interface SortPickerItem {\n    item: Sort;\n    cssClasses: VueCSSClasses;\n    event: Partial<XEventsTypes>;\n  }\n  /**\n   * The `SortPickerList` component allows user to select the search results order. This component\n   * also allows to change the selected sort programmatically.\n   *\n   * @remarks It extends {@link SortMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['buttonClass'])],\n    components: {\n      BaseEventButton\n    }\n  })\n  export default class SortPickerList extends mixins(SortMixin) {\n    /**\n     * The transition to use for rendering the list.\n     *\n     * @public\n     */\n    @Prop({ default: 'div' })\n    public animation?: string | typeof Vue;\n    /**\n     * Sort list items.\n     *\n     * @returns A list of items with their css class and the event associate to it.\n     *\n     * @internal\n     */\n    protected get listItems(): SortPickerItem[] {\n      return this.items.map(item => ({\n        item,\n        cssClasses: [\n          {\n            'x-selected': item === this.selectedSort\n          }\n        ],\n        event: { UserClickedASort: item }\n      }));\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    tag=\"div\"\n    class=\"x-sort-picker-list\"\n    data-test=\"sort-picker\"\n    role=\"list\"\n  >\n    <BaseEventButton\n      v-for=\"{ item, cssClasses, event } in listItems\"\n      :key=\"item\"\n      :class=\"[cssClasses, buttonClass]\"\n      data-test=\"sort-picker-button\"\n      :events=\"event\"\n      :aria-pressed=\"item === selectedSort\"\n      role=\"listitem\"\n    >\n      <slot v-bind=\"{ item, isSelected: item === selectedSort }\">\n        {{ item }}\n      </slot>\n    </BaseEventButton>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { Sort } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import Vue from 'vue';\n  import { BaseEventButton } from '../../../components';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils';\n  import { XEventsTypes } from '../../../wiring';\n  import { searchXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import SortMixin from './sort.mixin';\n\n  /**\n   * Sort Picker item options.\n   *\n   * @public\n   */\n  interface SortPickerItem {\n    item: Sort;\n    cssClasses: VueCSSClasses;\n    event: Partial<XEventsTypes>;\n  }\n  /**\n   * The `SortPickerList` component allows user to select the search results order. This component\n   * also allows to change the selected sort programmatically.\n   *\n   * @remarks It extends {@link SortMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule), dynamicPropsMixin(['buttonClass'])],\n    components: {\n      BaseEventButton\n    }\n  })\n  export default class SortPickerList extends mixins(SortMixin) {\n    /**\n     * The transition to use for rendering the list.\n     *\n     * @public\n     */\n    @Prop({ default: 'div' })\n    public animation?: string | typeof Vue;\n    /**\n     * Sort list items.\n     *\n     * @returns A list of items with their css class and the event associate to it.\n     *\n     * @internal\n     */\n    protected get listItems(): SortPickerItem[] {\n      return this.items.map(item => ({\n        item,\n        cssClasses: [\n          {\n            'x-selected': item === this.selectedSort\n          }\n        ],\n        event: { UserClickedASort: item }\n      }));\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Sort Picker List\n\nThe `SortPickerList` component can be used to change the way the search results are ordered.\n\nTo do so, the list of valid sort values has to be provided using the `items` prop. These are the\nvalues that can then be received in the `SearchAdapter`.\n\nThe component also optionally accepts the selected sort, which can be set using the `value` prop.\nThis prop allows changing programmatically the selected sort, as it will be synced with the store\nimmediately. If this prop is not provided, the first item from the `items` prop will be the one\nselected by default.\n\nThis component also allows customizing each one of the possible sort values. This can be done with\nthe `default` slot.\n\n## Examples\n\n### Only providing the list of items\n\n```vue\n<template>\n  <SortPickerList :items=\"sortValues\">\n    <template #item=\"{ item, isSelected }\">Item: {{ item }}</template>\n  </SortPickerList>\n</template>\n\n<script>\n  import { SortPickerList } from '@empathyco/x-components/search';\n\n  export default {\n    components: {\n      SortPickerList\n    },\n    data() {\n      return { sortValues: ['Relevance', 'Price asc', 'Price desc'] };\n    }\n  };\n</script>\n```\n\n### Providing also the selected value\n\n```vue\n<template>\n  <SortPickerList v-model=\"selectedSort\" :items=\"sortValues\">\n    <template #item=\"{ item, isSelected }\">\n      <span v-if=\"isSelected\">✅</span>\n      {{ item }}\n    </template>\n  </SortPickerList>\n</template>\n\n<script>\n  import { SortPickerList } from '@empathyco/x-components/search';\n\n  export default {\n    components: {\n      SortPickerList\n    },\n    data() {\n      return {\n        selectedSort: 'Price asc',\n        sortValues: ['Relevance', 'Price asc', 'Price desc']\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the items with classes\n\nThe `buttonClass` prop can be used to add classes to the sort items.\n\n```vue\n<template>\n  <SortPickerList :items=\"sortValues\" buttonClass=\"x-button-outlined\" />\n</template>\n\n<script>\n  import { SortPickerList } from '@empathyco/x-components/search';\n\n  export default {\n    components: {\n      SortPickerList\n    },\n    data() {\n      return { sortValues: ['Relevance', 'Price asc', 'Price desc'] };\n    }\n  };\n</script>\n```\n\n## Events\n\nThis component emits 2 different events:\n\n- SelectedSortProvided: To sync the selected sort with the store state value. This event is emitted\n  as soon as the list of items is received, whenever this list changes if there is no provided\n  value, and when the provided value changes.\n- UserClickedASort: As its name suggest, the event is emitted after the user clicks one of the sort\n  options. This does not mean that the sort has changed, only that the user has clicked it.\n</docs>\n","\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State, xComponentMixin } from '../../../components';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * The `Spellcheck` component allows to inform the user with a friendly message that he\n   * might have misspelled the search query. This message can be set using the default slot\n   * of the component, which gives access to the searched query using the `query` scope property,\n   * and the spellchecked query proposal, using the `spellcheckedQuery` scope property.\n   *\n   * The component will only render itself if the `spellcheckedQuery` property has value.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class Spellcheck extends Vue {\n    /**\n     * The query from the search state.\n     *\n     * @public\n     */\n    @State('search', 'query')\n    public query!: string;\n\n    /**\n     * The spellcheckedQuery from the search state.\n     *\n     * @public\n     */\n    @State('search', 'spellcheckedQuery')\n    public spellcheckedQuery!: string;\n  }\n","<template>\n  <div v-if=\"spellcheckedQuery\" class=\"x-spellcheck\" data-test=\"spellcheck\">\n    <slot v-bind=\"{ query, spellcheckedQuery }\">{{ query }} - {{ spellcheckedQuery }}</slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State, xComponentMixin } from '../../../components';\n  import { searchXModule } from '../x-module';\n\n  /**\n   * The `Spellcheck` component allows to inform the user with a friendly message that he\n   * might have misspelled the search query. This message can be set using the default slot\n   * of the component, which gives access to the searched query using the `query` scope property,\n   * and the spellchecked query proposal, using the `spellcheckedQuery` scope property.\n   *\n   * The component will only render itself if the `spellcheckedQuery` property has value.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class Spellcheck extends Vue {\n    /**\n     * The query from the search state.\n     *\n     * @public\n     */\n    @State('search', 'query')\n    public query!: string;\n\n    /**\n     * The spellcheckedQuery from the search state.\n     *\n     * @public\n     */\n    @State('search', 'spellcheckedQuery')\n    public spellcheckedQuery!: string;\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis default spellcheck component expects a query and a spellcheckedQuery to render and pass to its\ndefault slot.\n\nThis two props should be show like a message comparing them.\n\n### Basic usage\n\n```vue\n<Spellcheck />\n```\n\n### Customizing its contents\n\n```vue\n<Spellcheck>\n  <template #default=\"{ query, spellcheckedQuery }\">\n    No results found for '{{ query }}'. We show you results for '{{ spellcheckedQuery }}'\n  </template>\n</Spellcheck>\n\n<script>\n  import { Spellcheck } from '@empathyco/x-components/search';\n\n  export default {\n    components: {\n      Spellcheck\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n  /**\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\n   * and {@link XEventsTypes.UserAcceptedSpellcheckQuery} events, expressing the user\n   * intention to set the spellchecked query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class SpellcheckButton extends Vue {\n    /**\n     * The spellcheckedQuery from the search state.\n     *\n     * @public\n     */\n    @State('search', 'spellcheckedQuery')\n    public spellcheckedQuery!: string;\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'spellcheck'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      this.$x.emit('UserAcceptedAQuery', this.spellcheckedQuery, this.createEventMetadata());\n      this.$x.emit(\n        'UserAcceptedSpellcheckQuery',\n        this.spellcheckedQuery,\n        this.createEventMetadata()\n      );\n    }\n  }\n","<template>\n  <button\n    v-if=\"spellcheckedQuery\"\n    @click=\"emitEvents\"\n    class=\"x-spellcheck-button\"\n    data-test=\"set-spellcheck\"\n  >\n    <slot v-bind=\"{ spellcheckedQuery }\">{{ spellcheckedQuery }}</slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { searchXModule } from '../x-module';\n  /**\n   * A button that when pressed emits the {@link XEventsTypes.UserAcceptedAQuery}\n   * and {@link XEventsTypes.UserAcceptedSpellcheckQuery} events, expressing the user\n   * intention to set the spellchecked query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(searchXModule)]\n  })\n  export default class SpellcheckButton extends Vue {\n    /**\n     * The spellcheckedQuery from the search state.\n     *\n     * @public\n     */\n    @State('search', 'spellcheckedQuery')\n    public spellcheckedQuery!: string;\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'spellcheck'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      this.$x.emit('UserAcceptedAQuery', this.spellcheckedQuery, this.createEventMetadata());\n      this.$x.emit(\n        'UserAcceptedSpellcheckQuery',\n        this.spellcheckedQuery,\n        this.createEventMetadata()\n      );\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\n### Basic example\n\nThe component sets the current spellcheckedQuery as the new query and emits the `UserAcceptedAQuery`\nand `UserAcceptedSpellcheckQuery` events.\n\n```vue\n<SpellcheckButton />\n```\n\n### Customizing its contents\n\n```vue\n<SpellcheckButton>\n  <template #default=\"{ spellcheckedQuery }\">\n    <span class=\"x-spellcheck__text\">\n      Set the Spellcheck as the new query: {{ spellcheckedQuery}}!\n    </span>\n  </template>\n</SpellcheckButton>\n```\n\n## Events\n\nThis component emits 2 different events:\n\n- UserAcceptedAQuery: the event is emitted after the user clicks the button. The event payload is\n  the spellchecked query data.\n- UserAcceptedSpellcheckQuery: the event is emitted after the user clicks the button. The event\n  payload is the spellchecked query data.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { computed, defineComponent, PropType } from 'vue';\n  import { ArrowRightIcon, ItemsList } from '@empathyco/x-components';\n  import { NextQuery, NextQueryPreview } from '@empathyco/x-components/next-queries';\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import Result from '../../results/result.vue';\n  import CustomSlidingPanel from '../../custom-sliding-panel.vue';\n\n  export default defineComponent({\n    components: {\n      CustomSlidingPanel,\n      NextQuery,\n      Result,\n      ArrowRightIcon,\n      ItemsList,\n      NextQueryPreview\n    },\n    props: {\n      nextQuery: { type: Object as PropType<NextQueryModel>, required: true }\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      const maxItemsToRender = computed(() => (isTabletOrLess.value ? undefined : 5));\n      return {\n        maxItemsToRender\n      };\n    }\n  });\n","<template>\n  <NextQueryPreview\n    #default=\"{ results, totalResults, suggestion }\"\n    class=\"x-flex x-flex-col x-gap-4 x-bg-neutral-10 x-py-24 desktop:x-px-24\"\n    :suggestion=\"nextQuery\"\n    :maxItemsToRender=\"maxItemsToRender\"\n  >\n    <i18n class=\"x-text1 x-text1-lg max-desktop:x-px-16\" tag=\"span\" path=\"nextQueryPreview.message\">\n      <template #query>\n        <span class=\"x-title3\">{{ $x.query.nextQueries }}</span>\n      </template>\n    </i18n>\n    <CustomSlidingPanel>\n      <template #header>\n        <NextQuery :suggestion=\"nextQuery\" class=\"x-button-tight x-button max-desktop:x-px-16\">\n          {{ $t('nextQueryPreview.query', { query: suggestion.query }) }}\n          {{ $t('nextQueryPreview.totalResults', { totalResults }) }}\n          <ArrowRightIcon class=\"x-icon-lg\" />\n        </NextQuery>\n      </template>\n      <ItemsList\n        :items=\"results\"\n        class=\"x-flex x-gap-16 x-pt-4 max-desktop:x-px-16 desktop:x-w-full\"\n        itemClass=\"x-flex-shrink-0\"\n      >\n        <template #result=\"{ item: result }\">\n          <Result :result=\"result\" class=\"x-w-[calc(38vw-16px)] desktop:x-max-w-[265px]\" />\n        </template>\n      </ItemsList>\n    </CustomSlidingPanel>\n  </NextQueryPreview>\n</template>\n\n<script lang=\"ts\">\n  import { computed, defineComponent, PropType } from 'vue';\n  import { ArrowRightIcon, ItemsList } from '@empathyco/x-components';\n  import { NextQuery, NextQueryPreview } from '@empathyco/x-components/next-queries';\n  import { NextQuery as NextQueryModel } from '@empathyco/x-types';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import Result from '../../results/result.vue';\n  import CustomSlidingPanel from '../../custom-sliding-panel.vue';\n\n  export default defineComponent({\n    components: {\n      CustomSlidingPanel,\n      NextQuery,\n      Result,\n      ArrowRightIcon,\n      ItemsList,\n      NextQueryPreview\n    },\n    props: {\n      nextQuery: { type: Object as PropType<NextQueryModel>, required: true }\n    },\n    setup() {\n      const { isTabletOrLess } = useDevice();\n      const maxItemsToRender = computed(() => (isTabletOrLess.value ? undefined : 5));\n      return {\n        maxItemsToRender\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\">\n  .x-mobile {\n    .x-next-query-preview {\n      margin-left: calc(-1 * var(--x-margin-left));\n    }\n  }\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseVariableColumnGrid,\n    infiniteScroll,\n    StaggeredFadeAndSlide\n  } from '@empathyco/x-components';\n  import { MainScrollItem } from '@empathyco/x-components/scroll';\n  import {\n    Banner,\n    BannersList,\n    Promoted,\n    PromotedsList,\n    ResultsList\n  } from '@empathyco/x-components/search';\n  import { defineComponent } from 'vue';\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import Result from '../../results/result.vue';\n  import NextQueryPreview from './custom-next-query-preview.vue';\n\n  export default defineComponent({\n    components: {\n      Banner,\n      BannersList,\n      BaseVariableColumnGrid,\n      MainScrollItem,\n      NextQueryPreview,\n      NextQueriesList,\n      Promoted,\n      PromotedsList,\n      Result,\n      ResultsList\n    },\n    directives: {\n      'infinite-scroll': infiniteScroll\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return { staggeredFadeAndSlide: StaggeredFadeAndSlide, columns: isMobile.value ? 2 : 4 };\n    }\n  });\n","<template>\n  <ResultsList v-if=\"$x.totalResults\" v-infinite-scroll:main-scroll>\n    <PromotedsList>\n      <BannersList>\n        <NextQueriesList\n          :offset=\"24\"\n          :frequency=\"48\"\n          :maxNextQueriesPerGroup=\"1\"\n          :showOnlyAfterOffset=\"$x.partialResults.length > 0\"\n        >\n          <BaseVariableColumnGrid\n            class=\"x-gap-y-32 x-gap-x-16\"\n            :animation=\"staggeredFadeAndSlide\"\n            :columns=\"columns\"\n            data-test=\"base-grid\"\n          >\n            <template #result=\"{ item: result }\">\n              <Result :result=\"result\" data-test=\"search-grid-result\" />\n            </template>\n            <template #banner=\"{ item: banner }\">\n              <MainScrollItem :item=\"banner\" tag=\"article\">\n                <Banner :banner=\"banner\" />\n              </MainScrollItem>\n            </template>\n            <template #promoted=\"{ item: promoted }\">\n              <MainScrollItem :item=\"promoted\" tag=\"article\">\n                <Promoted :promoted=\"promoted\" />\n              </MainScrollItem>\n            </template>\n            <template #next-queries-group=\"{ item: { nextQueries } }\">\n              <NextQueryPreview :nextQuery=\"nextQueries[0]\" />\n            </template>\n          </BaseVariableColumnGrid>\n        </NextQueriesList>\n      </BannersList>\n    </PromotedsList>\n  </ResultsList>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseVariableColumnGrid,\n    infiniteScroll,\n    StaggeredFadeAndSlide\n  } from '@empathyco/x-components';\n  import { MainScrollItem } from '@empathyco/x-components/scroll';\n  import {\n    Banner,\n    BannersList,\n    Promoted,\n    PromotedsList,\n    ResultsList\n  } from '@empathyco/x-components/search';\n  import { defineComponent } from 'vue';\n  import { NextQueriesList } from '@empathyco/x-components/next-queries';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import Result from '../../results/result.vue';\n  import NextQueryPreview from './custom-next-query-preview.vue';\n\n  export default defineComponent({\n    components: {\n      Banner,\n      BannersList,\n      BaseVariableColumnGrid,\n      MainScrollItem,\n      NextQueryPreview,\n      NextQueriesList,\n      Promoted,\n      PromotedsList,\n      Result,\n      ResultsList\n    },\n    directives: {\n      'infinite-scroll': infiniteScroll\n    },\n    setup() {\n      const { isMobile } = useDevice();\n      return { staggeredFadeAndSlide: StaggeredFadeAndSlide, columns: isMobile.value ? 2 : 4 };\n    }\n  });\n</script>\n\n<style lang=\"scss\">\n  .x-base-grid__next-queries-group {\n    grid-column-start: 1;\n    grid-column-end: -1;\n  }\n</style>\n","<template>\n  <PartialResultsList class=\"x-mb-24 x-gap-40 desktop:x-gap-80\">\n    <template #default=\"{ partialResult }\">\n      <CustomSlidingPanel>\n        <template #header>\n          <PartialQueryButton\n            :query=\"partialResult.query\"\n            class=\"x-button-tight x-button max-desktop:x-px-16\"\n          >\n            {{ $t('partialResults.query', { query: partialResult.query }) }}\n            {{ $t('partialResults.totalResults', { totalResults: partialResult.totalResults }) }}\n            <ArrowRightIcon class=\"x-icon-lg\" />\n          </PartialQueryButton>\n        </template>\n        <ItemsList\n          :items=\"partialResult.results\"\n          class=\"x-flex x-gap-16 x-pt-4 max-desktop:x-px-16\"\n        >\n          <template #result=\"{ item: result }\">\n            <Result\n              :result=\"result\"\n              class=\"x-w-[calc(38vw-16px)] x-min-w-[142px] desktop:x-w-[224px]\"\n              :showDescription=\"isTabletOrGreater\"\n              showCompactPrices\n            />\n          </template>\n        </ItemsList>\n      </CustomSlidingPanel>\n    </template>\n  </PartialResultsList>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { ArrowRightIcon, ItemsList } from '@empathyco/x-components';\n  import { PartialQueryButton, PartialResultsList } from '@empathyco/x-components/search';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import ResultComponent from '../../results/result.vue';\n  import CustomSlidingPanel from '../../custom-sliding-panel.vue';\n\n  export default defineComponent({\n    components: {\n      ArrowRightIcon,\n      CustomSlidingPanel,\n      ItemsList,\n      Result: ResultComponent,\n      PartialResultsList,\n      PartialQueryButton\n    },\n    setup() {\n      const { isTabletOrGreater } = useDevice();\n\n      return { isTabletOrGreater };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { ArrowRightIcon, ItemsList } from '@empathyco/x-components';\n  import { PartialQueryButton, PartialResultsList } from '@empathyco/x-components/search';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import ResultComponent from '../../results/result.vue';\n  import CustomSlidingPanel from '../../custom-sliding-panel.vue';\n\n  export default defineComponent({\n    components: {\n      ArrowRightIcon,\n      CustomSlidingPanel,\n      ItemsList,\n      Result: ResultComponent,\n      PartialResultsList,\n      PartialQueryButton\n    },\n    setup() {\n      const { isTabletOrGreater } = useDevice();\n\n      return { isTabletOrGreater };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Vue, Component } from 'vue-property-decorator';\n  import {\n    BaseHeaderTogglePanel,\n    animateScale,\n    ChevronDownIcon,\n    ChevronUpIcon\n  } from '@empathyco/x-components';\n\n  @Component({\n    components: {\n      BaseHeaderTogglePanel,\n      ChevronDownIcon,\n      ChevronUpIcon\n    }\n  })\n  export default class CustomHeaderTogglePanel extends Vue {\n    public animation = animateScale();\n  }\n","<template>\n  <BaseHeaderTogglePanel\n    headerClass=\"x-flex x-w-full x-gap-8 x-py-24\"\n    :startCollapsed=\"true\"\n    :animation=\"animation\"\n  >\n    <template #header-content=\"{ open }\">\n      <slot name=\"header\" />\n      <ChevronUpIcon v-if=\"open\" class=\"x-icon-lg x-ml-auto\" />\n      <ChevronDownIcon v-else class=\"x-icon-lg x-ml-auto\" />\n    </template>\n    <slot />\n  </BaseHeaderTogglePanel>\n</template>\n\n<script lang=\"ts\">\n  import { Vue, Component } from 'vue-property-decorator';\n  import {\n    BaseHeaderTogglePanel,\n    animateScale,\n    ChevronDownIcon,\n    ChevronUpIcon\n  } from '@empathyco/x-components';\n\n  @Component({\n    components: {\n      BaseHeaderTogglePanel,\n      ChevronDownIcon,\n      ChevronUpIcon\n    }\n  })\n  export default class CustomHeaderTogglePanel extends Vue {\n    public animation = animateScale();\n  }\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Sort } from '@empathyco/x-types';\n  import { SortPickerList } from '@empathyco/x-components/search';\n  import {\n    RadioButtonSelectedIcon,\n    RadioButtonUnselectedIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import CustomHeaderTogglePanel from '../custom-header-toggle-panel.vue';\n\n  export default defineComponent({\n    components: {\n      SortPickerList,\n      CustomHeaderTogglePanel,\n      RadioButtonSelectedIcon,\n      RadioButtonUnselectedIcon\n    },\n    setup() {\n      const animation = animateScale();\n      const sortValues: Sort[] = ['', 'price asc', 'price desc'];\n      return {\n        animation,\n        sortValues\n      };\n    }\n  });\n","<template>\n  <CustomHeaderTogglePanel :data-test=\"'sort'\" class=\"x-border-0 x-border-b x-border-neutral-10\">\n    <template #header>\n      <span class=\"x-title3\">\n        {{ $t('sort.label') }}\n      </span>\n      <span>{{ $t(`sort.values.${$x.selectedSort || 'default'}`) }}</span>\n    </template>\n    <template #default>\n      <SortPickerList\n        v-if=\"$x.totalResults\"\n        class=\"x-flex x-flex-col x-gap-8 x-pb-24\"\n        :items=\"sortValues\"\n        buttonClass=\"x-facet-filter x-facet-filter-lg\"\n      >\n        <template #default=\"{ item, isSelected }\">\n          <RadioButtonSelectedIcon v-if=\"isSelected\" class=\"x-icon-lg\" />\n          <RadioButtonUnselectedIcon v-else class=\"x-icon-lg\" />\n          {{ $t(`sort.values.${item || 'default'}`) }}\n        </template>\n      </SortPickerList>\n    </template>\n  </CustomHeaderTogglePanel>\n</template>\n\n<script lang=\"ts\">\n  import { Sort } from '@empathyco/x-types';\n  import { SortPickerList } from '@empathyco/x-components/search';\n  import {\n    RadioButtonSelectedIcon,\n    RadioButtonUnselectedIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import CustomHeaderTogglePanel from '../custom-header-toggle-panel.vue';\n\n  export default defineComponent({\n    components: {\n      SortPickerList,\n      CustomHeaderTogglePanel,\n      RadioButtonSelectedIcon,\n      RadioButtonUnselectedIcon\n    },\n    setup() {\n      const animation = animateScale();\n      const sortValues: Sort[] = ['', 'price asc', 'price desc'];\n      return {\n        animation,\n        sortValues\n      };\n    }\n  });\n</script>\n\n<style lang=\"scss\">\n  // TODO: Remove when implementing buttonClass prop in the SortList buttons\n  .x-sort-list__button {\n    @apply x-button-ghost;\n  }\n</style>\n","import { isFacetFilter } from '@empathyco/x-types';\nimport { map } from '@empathyco/x-utils';\nimport { groupItemsBy } from '../../../../utils/array';\nimport { FacetsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link FacetsGetters.facets} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the facets'\n * module.\n * @returns An array containing the facets with the filters.\n *\n * @public\n */\nexport const facets: FacetsXStoreModule['getters']['facets'] = state => {\n  const filtersByFacet = groupItemsBy(Object.values(state.filters), filter =>\n    isFacetFilter(filter) ? filter.facetId : '__unknown-facet__'\n  );\n  return map(state.facets, (_id, facet) => ({\n    ...facet,\n    filters: filtersByFacet[facet.id] ?? []\n  }));\n};\n","import { Facet } from '@empathyco/x-types';\nimport Vue from 'vue';\nimport { facets } from './getters/facets.getter';\nimport { selectedFiltersByFacet } from './getters/selected-filters-by-facet.getter';\nimport { selectedFilters } from './getters/selected-filters.getter';\nimport { FacetGroupEntry, FacetsConfig, FacetsXStoreModule } from './types';\nimport { selectedFiltersForRequest } from './getters/selected-filters-for-request.getter';\n\n/**\n * {@link XStoreModule} For the facets module.\n *\n * @internal\n */\nexport const facetsXStoreModule: FacetsXStoreModule = {\n  state: () => ({\n    query: '',\n    filters: {},\n    groups: {},\n    facets: {},\n    preselectedFilters: [],\n    stickyFilters: {},\n    config: {\n      filtersStrategyForRequest: 'all'\n    }\n  }),\n  getters: {\n    selectedFilters,\n    selectedFiltersForRequest,\n    selectedFiltersByFacet,\n    facets\n  },\n  mutations: {\n    mutateFilter(state, { filter, newFilterState }) {\n      const newFilter = Object.assign(filter, newFilterState);\n      Vue.set(state.filters, newFilter.id, newFilter);\n    },\n    setFilters(state, filters) {\n      filters.forEach(filter => Vue.set(state.filters, filter.id, filter));\n    },\n    setPreselectedFilters(state, filters) {\n      state.preselectedFilters = filters;\n    },\n    removeFilter(state, { id }) {\n      Vue.delete(state.filters, id);\n    },\n    removeFilters(state, filters) {\n      filters.forEach(({ id }) => Vue.delete(state.filters, id));\n    },\n    setFacetGroup(state, { facetId, groupId }: FacetGroupEntry) {\n      Vue.set(state.groups, facetId, groupId);\n    },\n    removeFacet(state, { id }) {\n      Vue.delete(state.facets, id);\n    },\n    setFacet(state, facet: Facet) {\n      Vue.set(state.facets, facet.id, facet);\n    },\n    setFacetsConfig(state, config: FacetsConfig) {\n      state.config = config;\n    },\n    setQuery(state, query) {\n      state.query = query;\n    },\n    setStickyFilter(state, filter) {\n      if (!state.stickyFilters[filter.id]) {\n        Vue.set(state.stickyFilters, filter.id, filter);\n      }\n    },\n    removeStickyFilter(state, filter) {\n      Vue.delete(state.stickyFilters, filter.id);\n    },\n    clearStickyFilters(state) {\n      state.stickyFilters = {};\n    }\n  },\n  actions: {}\n};\n","import { FacetsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link FacetsGetters.selectedFilters} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the facets'\n * module.\n *\n * @returns A list containing the selected filters.\n *\n * @public\n */\nexport const selectedFilters: FacetsXStoreModule['getters']['selectedFilters'] = state => {\n  const selectedFilters = Object.values(state.filters).filter(filter => filter.selected);\n  Object.keys(state.stickyFilters).forEach(stickyFilterId => {\n    const isSelected = selectedFilters.some(selectedFilter => selectedFilter.id === stickyFilterId);\n    if (!isSelected) {\n      selectedFilters.push(state.stickyFilters[stickyFilterId]);\n    }\n  });\n  return selectedFilters;\n};\n","import { isHierarchicalFilter } from '@empathyco/x-types';\nimport { FacetsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link FacetsGetters.selectedFiltersForRequest} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the facets'\n * module.\n *\n * @returns A list containing the selected filters that conform to the filters for request strategy.\n *\n * @public\n */\nexport const selectedFiltersForRequest: FacetsXStoreModule['getters']['selectedFiltersForRequest'] =\n  state => {\n    const selectedFilters = Object.values(state.filters).filter(filter => filter.selected);\n\n    if (state.config.filtersStrategyForRequest === 'leaves-only') {\n      return selectedFilters.filter((filter, _, filters) => {\n        if (isHierarchicalFilter(filter)) {\n          const childrenIds = filter.children?.map(child => child.id);\n\n          return !filters.some(newFilter => childrenIds?.includes(newFilter.id));\n        }\n\n        return true;\n      });\n    }\n\n    return selectedFilters;\n  };\n","import { isFacetFilter } from '@empathyco/x-types';\nimport { map } from '@empathyco/x-utils';\nimport { groupItemsBy } from '../../../../utils/array';\nimport { FacetsXStoreModule, FiltersByFacet } from '../types';\n\n/**\n * Default implementation for the {@link FacetsGetters.selectedFiltersByFacet} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the facets\n * module.\n * @param getters - Current {@link https://vuex.vuejs.org/guide/getters.html | getters} of the\n * facets' module.\n *\n * @returns A record containing the selected filters indexed by its facet id.\n * @remarks If there are filters without facet Id (RawFilter), they will be grouped under\n * `__unknown-facet__` key.\n *\n * @public\n */\nexport const selectedFiltersByFacet: FacetsXStoreModule['getters']['selectedFiltersByFacet'] = (\n  state,\n  getters\n): FiltersByFacet => {\n  // The `emptyRecord` is to return an empty array for those facets that haven't selected filters.\n  const emptyRecord: FiltersByFacet = map(state.facets, () => []);\n  const filtersByFacet = groupItemsBy(getters.selectedFilters, filter =>\n    isFacetFilter(filter) ? filter.facetId : '__unknown-facet__'\n  );\n  return Object.assign(emptyRecord, filtersByFacet);\n};\n","import { createStoreEmitters } from '../../../store/utils/store-emitters.utils';\nimport { areFiltersDifferent } from '../../../utils/filters';\nimport { isNewQuery } from '../../../utils/is-new-query';\nimport { facetsXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the facets module.\n *\n * @internal\n */\nexport const facetsEmitters = createStoreEmitters(facetsXStoreModule, {\n  SelectedFiltersChanged: {\n    selector: (_, getters) => getters.selectedFilters,\n    filter: areFiltersDifferent,\n    metadata: {\n      priority: 12\n    }\n  },\n  SelectedFiltersForRequestChanged: {\n    selector: (_, getters) => getters.selectedFiltersForRequest,\n    filter: areFiltersDifferent,\n    metadata: {\n      priority: 12\n    }\n  },\n  FacetsQueryChanged: {\n    selector: state => state.query,\n    filter: isNewQuery\n  }\n});\n","import { Store } from 'vuex';\nimport { Facet, FacetModelName } from '@empathyco/x-types';\nimport { RootXStoreState } from '../../../store/store.types';\n\n/**\n * Adds an {@link Facet} to the store in case it doesn't exist for the passed facetId.\n *\n * @param store - The {@link https://vuex.vuejs.org/guide/ | Vuex Store}.\n * @param facetId - The Facet id for the Facet that will be created.\n * @param facetModelName - The {@link FacetModelName} for  the Facet that will be created.\n * @internal\n */\nexport function addFacetIfNotPresent(\n  store: Store<RootXStoreState>,\n  facetId: Facet['id'],\n  facetModelName: FacetModelName\n): void {\n  if (!store.state.x.facets.facets[facetId]) {\n    store.commit('x/facets/setFacet', {\n      modelName: facetModelName,\n      id: facetId,\n      label: facetId\n    } as Omit<Facet, 'filters'>);\n  }\n}\n","import {\n  EditableNumberRangeFilter,\n  Facet,\n  Filter,\n  isEditableNumberRangeFilter\n} from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { RootXStoreState } from '../../../store/store.types';\nimport { addFacetIfNotPresent } from './add-facet-if-not-present';\nimport { FilterEntity } from './types';\n\n/**\n * Allows selecting and deselecting a filter of {@link @empathyco/x-types#EditableNumberRangeFilter\n * | EditableNumberRangeFilter}.\n *\n * @internal\n */\nexport class EditableNumberRangeFilterEntity implements FilterEntity {\n  public constructor(protected store: Store<RootXStoreState>) {}\n\n  static accepts(filter: Filter): boolean {\n    return isEditableNumberRangeFilter(filter);\n  }\n\n  /**\n   * It sets {@link @empathyco/x-types#EditableNumberRangeFilter | EditableNumberRangeFilter} to\n   * false. Range values are kept to be able to update the {@link FacetsGetters.selectedFilters}\n   * getter accordingly (as the id is built using the range).\n   *\n   * @param filter - The filter to deselect.\n   */\n  deselect(filter: EditableNumberRangeFilter): void {\n    const newFilterState: Pick<EditableNumberRangeFilter, 'range' | 'facetId' | 'selected'> = {\n      facetId: filter.facetId,\n      range: { min: filter.range.min, max: filter.range.max },\n      selected: false\n    };\n    this.removePreviousFilter(filter.facetId);\n    this.store.commit('x/facets/mutateFilter', {\n      filter,\n      newFilterState: Object.assign(newFilterState, { id: this.getNewFilterId(newFilterState) })\n    });\n    addFacetIfNotPresent(this.store, filter.facetId, 'EditableNumberRangeFacet');\n  }\n\n  /**\n   * It selects the {@link @empathyco/x-types#EditableNumberRangeFilter\n   * | EditableNumberRangeFilter}.\n   *\n   * @param filter - The filter to select.\n   * @remarks If the filter has no selected range, then filter is deselected when this\n   * method is called.\n   */\n  select(filter: EditableNumberRangeFilter): void {\n    const newFilterId = this.getNewFilterId(filter);\n    this.removePreviousFilter(filter.facetId);\n    this.store.commit('x/facets/mutateFilter', {\n      filter,\n      newFilterState: {\n        id: newFilterId,\n        selected: this.isSelected(filter)\n      }\n    });\n    addFacetIfNotPresent(this.store, filter.facetId, 'EditableNumberRangeFacet');\n  }\n\n  /**\n   * Generates a new filter id using the range values.\n   *\n   * @param filter - The filter to generate its new id.\n   * @returns The new filter id.\n   * @internal\n   */\n  protected getNewFilterId(filter: Pick<EditableNumberRangeFilter, 'range' | 'facetId'>): string {\n    return `${filter.facetId}:${String(filter.range.min ?? '*')}-${String(\n      filter.range.max ?? '*'\n    )}`;\n  }\n\n  /**\n   * It returns if the filter range min or the filter range max is not null.\n   *\n   * @param filter - The filter to determine if it is selected or not.\n   * @returns True if filter range min or filter range max is not null.\n   * @internal\n   */\n  protected isSelected(filter: EditableNumberRangeFilter): boolean {\n    return filter.range.min !== null || filter.range.max !== null;\n  }\n\n  /**\n   * Removes the previous filter of this facet from the store, only if it exists.\n   *\n   * @param facetId - The facet to remove its only filter.\n   * @internal\n   */\n  protected removePreviousFilter(facetId: Facet['id']): void {\n    const previousFilter = this.getFilterByFacet(facetId);\n    if (previousFilter) {\n      this.store.commit('x/facets/removeFilter', previousFilter);\n    }\n  }\n\n  /**\n   * Retrieves the filter of the given facet id from the store.\n   *\n   * @param facetId -  The facet id to retrieve its filter.\n   * @returns The filter of the facet if it exists.\n   * @internal\n   */\n  protected getFilterByFacet(facetId: Facet['id']): EditableNumberRangeFilter | undefined {\n    return this.store.getters['x/facets/facets'][facetId]?.filters?.[0];\n  }\n}\n","/**\r\n * Type guard to check if a filter is an {@link EditableNumberRangeFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns True if the filter is an {@link EditableNumberRangeFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isEditableNumberRangeFilter(filter) {\r\n    return filter.modelName === 'EditableNumberRangeFilter';\r\n}\n\nexport { isEditableNumberRangeFilter };\n","import { HierarchicalFilter, isHierarchicalFilter } from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { RootXStoreState } from '../../../store/store.types';\nimport { addFacetIfNotPresent } from './add-facet-if-not-present';\nimport { FilterEntity } from './types';\n\n/**\n * Allows selecting and deselecting a filter of {@link @empathyco/x-types#HierarchicalFilter\n * | HierarchicalFilter}.\n *\n * @internal\n */\nexport class HierarchicalFilterEntity implements FilterEntity {\n  public static accepts = isHierarchicalFilter;\n\n  public constructor(protected store: Store<RootXStoreState>) {}\n\n  /**\n   * Deselects the hierarchical filter and all of its descendants.\n   *\n   * @param filter - The filter to deselect.\n   */\n  deselect(filter: HierarchicalFilter): void {\n    this.saveFilter(filter, { selected: false });\n    this.deselectDescendants(filter);\n    addFacetIfNotPresent(this.store, filter.facetId, 'HierarchicalFacet');\n  }\n\n  /**\n   * Selects the hierarchical filter and its ancestors.\n   *\n   * @param filter - The filter to select.\n   */\n  select(filter: HierarchicalFilter): void {\n    this.saveFilter(filter, { selected: true });\n    this.selectAncestors(filter);\n    addFacetIfNotPresent(this.store, filter.facetId, 'HierarchicalFacet');\n  }\n\n  /**\n   * Deselects all the descendants of the given filter, saving them to the store.\n   *\n   * @remarks The descendants hierarchy is retrieved from the store.\n   * @param filter - The filter to deselect its descendants.\n   * @internal\n   */\n  protected deselectDescendants(filter: HierarchicalFilter): void {\n    if (filter.children) {\n      filter.children.forEach(child => {\n        this.saveFilter(child, { selected: false });\n        this.deselectDescendants(child);\n      });\n    }\n  }\n\n  /**\n   * Selects all the ancestors of the given filter, saving them to the store.\n   *\n   * @remarks The ancestors hierarchy is retrieved from the store.\n   * @param filter - The filter to select its ancestors.\n   * @internal\n   */\n  protected selectAncestors(filter: HierarchicalFilter): void {\n    if (filter.parentId) {\n      const parent = this.getFilterById(filter.parentId);\n      if (parent) {\n        this.saveFilter(parent, { selected: true });\n        this.selectAncestors(parent);\n      }\n    }\n  }\n\n  /**\n   * Retrieves a hierarchical filter from the store by its id.\n   *\n   * @param id - The id of the filter to retrieve.\n   * @returns The hierarchical filter retrieved from the store.\n   * @internal\n   */\n  protected getFilterById(id: HierarchicalFilter['id']): HierarchicalFilter {\n    return this.store.state.x.facets.filters[id] as HierarchicalFilter;\n  }\n\n  /**\n   * Saves the given filter to the store.\n   *\n   * @param filter - The filter to save to the store.\n   * @param newFilterState - The new partial state of the filter.\n   * @internal\n   */\n  protected saveFilter(\n    filter: HierarchicalFilter,\n    newFilterState: Partial<HierarchicalFilter> = {}\n  ): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState });\n  }\n}\n","import { Store } from 'vuex';\nimport { isNumberRangeFilter, NumberRangeFilter } from '@empathyco/x-types';\nimport { RootXStoreState } from '../../../store/store.types';\nimport { addFacetIfNotPresent } from './add-facet-if-not-present';\nimport { FilterEntity } from './types';\n\n/**\n * Allows selecting and deselecting a filter of {@link NumberRangeFilter}.\n *\n * @internal\n */\nexport class NumberRangeFilterEntity implements FilterEntity {\n  public static accepts = isNumberRangeFilter;\n\n  public constructor(protected store: Store<RootXStoreState>) {}\n\n  /**\n   * Deselects and saves to the store the given filter.\n   *\n   * @param filter - The filter to deselect.\n   */\n  deselect(filter: NumberRangeFilter): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState: { selected: false } });\n    addFacetIfNotPresent(this.store, filter.facetId, 'NumberRangeFacet');\n  }\n\n  /**\n   * Selects and saves to the store the given filter.\n   *\n   * @param filter - The filter to select.\n   */\n  select(filter: NumberRangeFilter): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState: { selected: true } });\n    addFacetIfNotPresent(this.store, filter.facetId, 'NumberRangeFacet');\n  }\n}\n","/**\r\n * Type guard to check if a filter is a {@link NumberRangeFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns True if the filter is a {@link NumberRangeFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isNumberRangeFilter(filter) {\r\n    return filter.modelName === 'NumberRangeFilter';\r\n}\n\nexport { isNumberRangeFilter };\n","import { isRawFilter, RawFilter } from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { FilterEntity } from './types';\n\n/**\n * Allows selecting and deselecting a filter of {@link @empathyco/x-types#RawFilter | RawFilter}.\n *\n * @internal\n */\nexport class RawFilterEntity implements FilterEntity {\n  public static accepts = isRawFilter;\n\n  public constructor(protected store: Store<unknown>) {}\n\n  /**\n   * It deselects the {@link @empathyco/x-types#RawFilter | RawFilter}.\n   *\n   * @param filter - The filter to deselect.\n   * @remarks As the {@link @empathyco/x-types#RawFilter.selected} is always true,\n   * the deselection just removes the filter from the store.\n   */\n  deselect(filter: RawFilter): void {\n    this.store.commit('x/facets/removeFilter', filter);\n  }\n\n  /**\n   * It selects the {@link @empathyco/x-types#RawFilter | RawFilter}.\n   *\n   * @param filter - The filter to select.\n   * @remarks As the {@link @empathyco/x-types#RawFilter.selected} is always true,\n   * there is no need to set this property.\n   */\n  select(filter: RawFilter): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState: { selected: true } });\n  }\n}\n","/**\r\n * Type guard to check if a filter is a {@link RawFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns True if the filter is a {@link RawFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isRawFilter(filter) {\r\n    return filter.modelName === 'RawFilter';\r\n}\n\nexport { isRawFilter };\n","import { SimpleFilter, isSimpleFilter } from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { RootXStoreState } from '../../../store/store.types';\nimport { addFacetIfNotPresent } from './add-facet-if-not-present';\nimport { FilterEntity } from './types';\n\n/**\n * Allows selecting and deselecting a filter of {@link SimpleFilter}.\n *\n * @internal\n */\nexport class SimpleFilterEntity implements FilterEntity {\n  public static accepts = isSimpleFilter;\n\n  public constructor(protected store: Store<RootXStoreState>) {}\n\n  /**\n   * Deselects and saves to the store the given filter.\n   *\n   * @param filter - The filter to deselect.\n   */\n  deselect(filter: SimpleFilter): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState: { selected: false } });\n    addFacetIfNotPresent(this.store, filter.facetId, 'SimpleFacet');\n  }\n\n  /**\n   * Selects and saves to the store the given filter.\n   *\n   * @param filter - The filter to select.\n   */\n  select(filter: SimpleFilter): void {\n    this.store.commit('x/facets/mutateFilter', { filter, newFilterState: { selected: true } });\n    addFacetIfNotPresent(this.store, filter.facetId, 'SimpleFacet');\n  }\n}\n","/**\r\n * Type guard to check if a filter is a {@link SimpleFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns True if the filter is a {@link SimpleFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isSimpleFilter(filter) {\r\n    return filter.modelName === 'SimpleFilter';\r\n}\n\nexport { isSimpleFilter };\n","import { Facet, FilterModelName, Filter, isFacetFilter } from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { RootXStoreState } from '../../../store/store.types';\nimport { EditableNumberRangeFilterEntity } from './editable-number-range-filter.entity';\nimport { HierarchicalFilterEntity } from './hierarchical-filter.entity';\nimport { NumberRangeFilterEntity } from './number-range-filter.entity';\nimport { RawFilterEntity } from './raw-filter.entity';\nimport { SimpleFilterEntity } from './simple-filter.entity';\nimport { FilterEntity, FilterEntityConstructor, FilterEntityModifier } from './types';\n\n/**\n * Creates {@link FilterEntity | FilterEntities} based on the provided configs.\n *\n * @internal\n */\nexport class FilterEntityFactory {\n  /**\n   * The public global instance of the Singleton.\n   *\n   * @remarks The constructor is not private, so it's possible to create more instances,\n   * to simplify the testing.\n   */\n  public static instance = new FilterEntityFactory();\n\n  /**\n   * The registered entities by default to be used by the Factory.\n   */\n  protected entities: FilterEntityConstructor[] = [\n    SimpleFilterEntity,\n    HierarchicalFilterEntity,\n    NumberRangeFilterEntity,\n    EditableNumberRangeFilterEntity,\n    RawFilterEntity\n  ];\n\n  /**\n   * The registered modifiers grouped by the facetId to be applied.\n   */\n  protected modifiersByFacetId: Record<Facet['id'], FilterEntityModifier[]> = {};\n\n  /**\n   * The registered modifiers grouped by the filter `ModelName` to be applied.\n   */\n  protected modifiersByFilterModelName: Partial<Record<FilterModelName, FilterEntityModifier[]>> =\n    {};\n\n  /**\n   * Contains the instantiated entities for each facet.\n   *\n   * @internal\n   */\n  protected cache: Record<Facet['id'] | '__unknown-facet__', FilterEntity> = {};\n\n  /**\n   * Creates a new FilterEntity from a filter.\n   *\n   * @param store - The {@link https://vuex.vuejs.org/guide/ | Vuex Store} that the entity will\n   * use.\n   * @param filter - The {@link @empathyco/x-types#Filter | Filter} necessary to know what\n   * {@link FilterEntity} to create.\n   * @returns The {@link FilterEntity} created by the factory.\n   */\n  getFilterEntity(store: Store<RootXStoreState>, filter: Filter): FilterEntity {\n    const cacheKey = isFacetFilter(filter) ? filter.facetId : '__unknown-facet__';\n    return this.cache[cacheKey] ?? (this.cache[cacheKey] = this.createFilterEntity(store, filter));\n  }\n\n  /**\n   * Creates a brand new {@link FilterEntity} for the given\n   * {@link @empathyco/x-types#Filter | Filter}.\n   *\n   * @param store - The store which should be mutated through the entity.\n   * @param filter - The filter to create the entity for.\n   * @returns A new {@link FilterEntity} for the given {@link @empathyco/x-types#Filter | Filter}.\n   * @internal\n   */\n  protected createFilterEntity(store: Store<RootXStoreState>, filter: Filter): FilterEntity {\n    const filterEntityConstructor = this.entities.find(entity => entity.accepts(filter));\n    if (!filterEntityConstructor) {\n      throw new Error(`Entity configuration for ${filter.modelName} not registered.`);\n    }\n    const entity = new filterEntityConstructor(store);\n    const modifiers = isFacetFilter(filter)\n      ? this.modifiersByFacetId[filter.facetId] ??\n        this.modifiersByFilterModelName[filter.modelName] ??\n        []\n      : [];\n    return modifiers.reduce(\n      (modifiedEntity, modifier) => new modifier(store, modifiedEntity),\n      entity\n    );\n  }\n\n  /**\n   * Registers a new {@link FilterEntity} to be used by the factory.\n   *\n   * @param entity - The new {@link FilterEntity} to be registered in the factory.\n   */\n  registerFilterEntity(entity: FilterEntityConstructor): void {\n    if (!this.entities.includes(entity)) {\n      this.entities.push(entity);\n    }\n  }\n\n  /**\n   * Registers a list of modifiers to be used with the {@link FilterEntity | FilterEntities} of a\n   * particular facet.\n   *\n   * @param facetId - The facet id whose Entities will be modified.\n   * @param modifiers - The list of modifiers to be registered.\n   */\n  registerModifierByFacetId(facetId: Facet['id'], ...modifiers: FilterEntityModifier[]): void {\n    this.updateModifiers(this.modifiersByFacetId, facetId, modifiers);\n  }\n\n  /**\n   * Registers a list of modifiers to be used with the {@link FilterEntity | FilterEntities} of a\n   * particular facet.\n   *\n   * @param filterModelName - The facet ModelName whose Entities will be modified.\n   * @param modifiers - The list of modifiers to be registered.\n   */\n  registerModifierByFilterModelName(\n    filterModelName: FilterModelName,\n    ...modifiers: FilterEntityModifier[]\n  ): void {\n    this.updateModifiers(this.modifiersByFilterModelName, filterModelName, modifiers);\n  }\n\n  /**\n   * Updates the modifiers for a particular facet.\n   *\n   * @param modifiersRecord - The map of modifiers to be updated.\n   * @param modifierKey - The id whose modifiers will be updated.\n   * @param modifiers - The list of new modifiers to be registered.\n   */\n  protected updateModifiers(\n    modifiersRecord: Record<string, FilterEntityModifier[]>,\n    modifierKey: string | number,\n    modifiers: FilterEntityModifier[]\n  ): void {\n    if (!modifiersRecord[modifierKey]) {\n      modifiersRecord[modifierKey] = [];\n    }\n    const facetModifiers = modifiersRecord[modifierKey];\n    const newModifiers = modifiers.filter(modifier => !facetModifiers.includes(modifier));\n    facetModifiers.push(...newModifiers);\n  }\n}\n","import { Facet, Filter, isFacetFilter, isHierarchicalFacet } from '@empathyco/x-types';\nimport { Store } from 'vuex';\nimport { Dictionary } from '@empathyco/x-utils';\nimport { XPlugin } from '../../../plugins/index';\nimport { RootXStoreState } from '../../../store/index';\nimport { arrayToObject, groupItemsBy, isArrayEmpty } from '../../../utils/index';\nimport { FilterEntityFactory } from '../entities/filter-entity.factory';\nimport { FilterEntity } from '../entities/types';\nimport { FacetGroupEntry, FacetsGetters } from '../store/types';\nimport { flatHierarchicalFilters } from '../utils';\nimport { FacetsGroup, FacetsService, FiltersMetadata } from './types';\n\n/**\n * Default implementation for the {@link FacetsService}.\n *\n * @public\n */\nexport class DefaultFacetsService implements FacetsService {\n  /**\n   * Global instance of the {@link FacetsService}.\n   */\n  public static instance: FacetsService = new DefaultFacetsService();\n\n  public constructor(\n    protected filterEntityFactory: FilterEntityFactory = FilterEntityFactory.instance\n  ) {}\n\n  /**\n   * The {@link https://vuex.vuejs.org/ | Vuex} store to use in the service.\n   *\n   * @returns The store.\n   * @internal\n   */\n  protected get store(): Store<RootXStoreState> {\n    return XPlugin.store;\n  }\n\n  setFacets(facetsGroup: FacetsGroup): void {\n    const newFilters = this.updateStore(facetsGroup);\n    /* Ensures that filters are selected with valid values. For example, you can't set a single\n     select facet with 2 or more selected filters */\n    this.updateFiltersSelectedState(newFilters);\n  }\n\n  updateFacets(facetsGroup: FacetsGroup): void {\n    const selectedFilters = this.getSelectedFilters();\n    const newFilters = this.updateStore(facetsGroup);\n    this.updateFiltersSelectedState(newFilters, selectedFilters);\n  }\n\n  updatePreselectedFilters(filters: Filter[]): void {\n    this.setPreselectedFilter(filters);\n  }\n\n  selectPreselectedFilters(): void {\n    this.select(this.store.state.x.facets.preselectedFilters);\n  }\n\n  clearFilters(facetIds?: Array<Facet['id']>, metadata?: FiltersMetadata): void {\n    this.getSelectedFilters()\n      .filter(filter => !facetIds || (isFacetFilter(filter) && facetIds.includes(filter.facetId)))\n      .forEach(filter => this.deselect.bind(this)(filter, metadata));\n  }\n\n  clearFiltersWithMetadata({\n    facetIds,\n    metadata\n  }: { facetIds?: Array<Facet['id']>; metadata?: FiltersMetadata } = {}): void {\n    this.clearFilters(facetIds, metadata);\n  }\n\n  deselect(filter: Filter, metadata?: Dictionary): void {\n    this.getFilterEntity(filter).deselect(filter, metadata);\n  }\n\n  select(filterOrFilters: Filter | Filter[]): void {\n    const filters = Array.isArray(filterOrFilters) ? filterOrFilters : [filterOrFilters];\n    filters.forEach(filter => this.getFilterEntity(filter).select(filter));\n  }\n\n  toggle(filter: Filter): void {\n    if (filter.selected) {\n      this.deselect(filter);\n    } else {\n      this.select(filter);\n    }\n  }\n\n  /**\n   * Sets the query.\n   *\n   * @param query - The query searched.\n   * @internal\n   */\n  setQuery(query: string): void {\n    this.store.commit('x/facets/setQuery', query);\n  }\n\n  /**\n   * Creates an entity from a filter DTO.\n   *\n   * @param filter - The filter to create an entity from.\n   * @returns The filter entity.\n   * @internal\n   */\n  protected getFilterEntity(filter: Filter): FilterEntity {\n    return this.filterEntityFactory.getFilterEntity(this.store, filter);\n  }\n\n  /**\n   * Sets in the store the Facets, the Filters and the FacetsGroup, without applying any logic\n   * to the selected state.\n   *\n   * @param facetsGroup - The {@link FacetsGroup} to set into the store state.\n   * @returns An array with the new filters.\n   * @internal\n   */\n  protected updateStore(facetsGroup: FacetsGroup): Filter[] {\n    this.removeGroupFacets(facetsGroup.id);\n    this.removeGroupFilters(facetsGroup.id);\n    facetsGroup.facets.forEach(facet => {\n      this.setFacetGroup({ facetId: facet.id, groupId: facetsGroup.id });\n      this.setFacet(facet);\n    });\n    const newFilters = this.flatFilters(facetsGroup);\n    this.setFilters(newFilters);\n    return newFilters;\n  }\n\n  /**\n   * This function returns the filters of the facets group flattened in an array. It keeps the\n   * relations between the filters (parent--children).\n   *\n   * @privateRemarks If it is necessary to deal with more cases than the hierarchical, we need to\n   * refactor this logic and maybe move it to the entities, to not make this service dependant of\n   * the facet type. At the moment it is only one `if`, and is ok as long as no more `if`s are\n   * needed.\n   * @param facetsGroup - The facets group from where extract the filters to flat.\n   * @returns An array with the filters flattened.\n   * @internal\n   */\n  protected flatFilters(facetsGroup: FacetsGroup): Filter[] {\n    return facetsGroup.facets.flatMap(facet =>\n      isHierarchicalFacet(facet) ? flatHierarchicalFilters(facet.filters) : facet.filters\n    );\n  }\n\n  /**\n   * Retrieves the selected filters from the store.\n   *\n   * @returns The list of selected filters of the store.\n   * @internal\n   */\n  protected getSelectedFilters(): FacetsGetters['selectedFilters'] {\n    return this.store.getters['x/facets/selectedFilters'];\n  }\n\n  /**\n   * Changes the filters selection state to match the store.\n   *\n   * @param newFilters - The list of filters to save.\n   * @param previousFilters - (Optional) The list of old filters, used to set the `newFilters`\n   * selected state.\n   */\n  protected updateFiltersSelectedState(newFilters: Filter[], previousFilters?: Filter[]): void {\n    if (!isArrayEmpty(newFilters)) {\n      const newStateFiltersMap = arrayToObject(previousFilters ?? newFilters, 'id');\n      newFilters.forEach(filter => {\n        const filterEntity = this.getFilterEntity(filter);\n        if (newStateFiltersMap[filter.id]?.selected) {\n          filterEntity.select(filter);\n        } else {\n          filterEntity.deselect(filter);\n        }\n      });\n    }\n  }\n\n  /**\n   * Removes the filters that belong to the given group.\n   *\n   * @param groupId - The id of the group from whom remove the filters that are in the store.\n   *\n   * @returns The removed filters.\n   *\n   * @internal\n   */\n  protected removeGroupFilters(groupId: FacetsGroup['id']): Filter[] {\n    const filtersToRemove =\n      groupItemsBy(Object.values(this.store.state.x.facets.filters), filter =>\n        isFacetFilter(filter)\n          ? this.store.state.x.facets.groups[filter.facetId]\n          : '__unknown-group__'\n      )[groupId] ?? [];\n    this.removeFilters(filtersToRemove);\n    return filtersToRemove;\n  }\n\n  /**\n   * Removes the facets that belong to the given group.\n   *\n   * @param groupId - The id of the group from whom remove the facets that are in the store.\n   * @returns The removed facets.\n   * @internal\n   */\n  protected removeGroupFacets(groupId: FacetsGroup['id']): Omit<Facet, 'filters'>[] {\n    const facetsToRemove = Object.values(this.store.state.x.facets.facets).filter(\n      facet => this.store.state.x.facets.groups[facet.id] === groupId\n    );\n    facetsToRemove.forEach(this.removeFacet.bind(this));\n    return facetsToRemove;\n  }\n\n  /**\n   * Sets the group that a facet belongs to.\n   *\n   * @param facetGroup - The id of the facet, and the group it belongs to.\n   * @internal\n   */\n  protected setFacetGroup(facetGroup: FacetGroupEntry): void {\n    this.store.commit('x/facets/setFacetGroup', facetGroup);\n  }\n\n  /**\n   * Sets the Facet to the store facets record.\n   *\n   * @param facet - The facet to store.\n   *\n   * @internal\n   */\n  protected setFacet({ filters, ...restFacet }: Facet): void {\n    this.store.commit('x/facets/setFacet', restFacet);\n  }\n\n  /**\n   * Removes a facet from the store.\n   *\n   * @param facet - The facet to remove.\n   * @internal\n   */\n  protected removeFacet(facet: Omit<Facet, 'filters'>): void {\n    this.store.commit('x/facets/removeFacet', facet);\n  }\n\n  /**\n   * Saves a list of filters to the store without any state change logic applied.\n   *\n   * @param filters - The filters to save.\n   * @internal\n   */\n  protected setFilters(filters: Filter[]): void {\n    this.store.commit('x/facets/setFilters', filters);\n  }\n\n  /**\n   * Saves a list of preselected filters to the store without any state change logic applied.\n   *\n   * @param filters - The filters to save.\n   * @internal\n   */\n  protected setPreselectedFilter(filters: Filter[]): void {\n    this.store.commit('x/facets/setPreselectedFilters', filters);\n  }\n\n  /**\n   * Removes a list of filters from the store.\n   *\n   * @param filters - The filters to remove.\n   * @internal\n   */\n  protected removeFilters(filters: Filter[]): void {\n    this.store.commit('x/facets/removeFilters', filters);\n  }\n}\n","/**\r\n * Type guard to check if a facet is an {@link HierarchicalFacet}.\r\n *\r\n * @param facet - The facet to check.\r\n *\r\n * @returns True if the facet is a {@link HierarchicalFacet}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isHierarchicalFacet(facet) {\r\n    return facet.modelName === 'HierarchicalFacet';\r\n}\n\nexport { isHierarchicalFacet };\n","import { HierarchicalFilter } from '@empathyco/x-types';\n\n/**\n * This function flattens the Hierarchical Filters, returning an array with all filters including\n * the children.\n *\n * @param hierarchicalFilters - The list of Hierarchical Filters to flatten.\n * @returns An array with all the Hierarchical filters.\n *\n * @public\n */\nexport function flatHierarchicalFilters(\n  hierarchicalFilters: HierarchicalFilter[]\n): HierarchicalFilter[] {\n  return hierarchicalFilters.reduce(function flat(flattenedFilters, filter): HierarchicalFilter[] {\n    flattenedFilters.push(filter);\n    return filter?.children?.reduce(flat, flattenedFilters) ?? flattenedFilters;\n  }, [] as HierarchicalFilter[]);\n}\n","import { Facet } from '@empathyco/x-types';\nimport { UrlParams } from '../../types/url-params';\nimport { createRawFilters } from '../../utils/filters';\nimport { wireCommit, wireService, wireServiceWithoutPayload } from '../../wiring/wires.factory';\nimport { filter, mapWire } from '../../wiring/wires.operators';\nimport { createWiring } from '../../wiring/wiring.utils';\nimport { XEventPayload } from '../../wiring/index';\nimport { DefaultFacetsService } from './service/facets.service';\n\n/**\n * Wires factory for {@link DefaultFacetsService}.\n */\nconst wireFacetsService = wireService(DefaultFacetsService.instance);\n\n/**\n * Wires without payload factory for {@link DefaultFacetsService}.\n */\nconst wireFacetsServiceWithoutPayload = wireServiceWithoutPayload(DefaultFacetsService.instance);\n\n/**\n * Saves the facets contained in the `search` group, removing the previous ones, and keeping the\n * previous filters selected state.\n *\n * @public\n */\nconst updateFacetsGroupWithSearchFacetsWire = mapWire(\n  wireFacetsService('updateFacets'),\n  (facets: Facet[]) => ({\n    facets,\n    id: 'search'\n  })\n);\n\n/**\n * Saves the facets contained in the group, removing the previous ones, and keeping the new filters\n * selected state.\n *\n * @public\n */\nconst setFacetsGroupWire = wireFacetsService('setFacets');\n\n/**\n * Toggles the selected state of a filter.\n *\n * @public\n */\nconst toggleFilterWire = wireFacetsService('toggle');\n\n/**\n * Deselects all the filters. Optionally, it can accept a list of facets ids as payload, and it will\n * only deselect the filters from those facets.\n *\n * @public\n */\nconst clearFiltersWire = wireFacetsService('clearFilters');\n\n/**\n * Deselects all selected filters.\n *\n * @public\n */\nconst clearAllFiltersWire = wireFacetsServiceWithoutPayload('clearFilters');\n\n/**\n * Deselects all selected filters but keep the sticky ones.\n *\n * @internal\n */\nconst clearAllFiltersButStickyWire = wireFacetsService('clearFiltersWithMetadata', {\n  metadata: {\n    keepSticky: true\n  }\n});\n\n/**\n * Deselects all selected filters only when oldValue is not empty.\n *\n * @public\n */\nconst clearAllFiltersOnSecondQuery = filter(\n  clearAllFiltersButStickyWire,\n  ({ metadata }) => !!metadata.oldValue\n);\n\n/**\n * Selects the filter passed by payload.\n *\n * @public\n */\nconst selectFilterWire = wireFacetsService('select');\n\n/**\n * Saves the params from the url.\n *\n * @public\n */\nconst setFiltersFromUrl = mapWire(wireFacetsService('select'), ({ filter }: UrlParams) =>\n  createRawFilters(filter)\n);\n\n/**\n * Saves the preselected filters.\n *\n * @public\n */\nconst updatePreselectedFilters = wireFacetsService('updatePreselectedFilters');\n\n/**\n * Selects the preselected filters stored in the state.\n *\n * @public\n */\nconst selectPreselectedFilterWire = wireFacetsService('selectPreselectedFilters');\n\n/**\n * Sets the facets state `query`.\n *\n * @public\n */\nconst setQuery = wireFacetsService('setQuery');\n\n/**\n * Removes all the sticky filters from the state.\n *\n * @internal\n */\nconst clearStickyFilters = filter<XEventPayload<'SearchResponseChanged'>>(\n  wireCommit('x/facets/clearStickyFilters'),\n  ({ eventPayload }) => {\n    return eventPayload.totalResults === 0;\n  }\n);\n\n/**\n * Wiring configuration for the {@link FacetsXModule | facets module}.\n *\n * @internal\n */\nexport const facetsWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    // TODO: move this logic to Facets Service\n    clearAllFiltersWire,\n    setFiltersFromUrl\n  },\n  PreselectedFiltersProvided: {\n    updatePreselectedFilters\n  },\n  FacetsChanged: {\n    updateFacetsGroupWithSearchFacetsWire\n  },\n  FacetsGroupProvided: {\n    setFacetsGroupWire\n  },\n  UserAcceptedAQuery: {\n    setQuery\n  },\n  FacetsQueryChanged: {\n    clearAllFiltersOnSecondQuery\n  },\n  UserChangedExtraParams: {\n    clearAllFiltersButStickyWire\n  },\n  UserClickedAFilter: {\n    toggleFilterWire\n  },\n  UserClickedClearAllFilters: {\n    clearFiltersWire\n  },\n  UserModifiedEditableNumberRangeFilter: {\n    selectFilterWire\n  },\n  UserClickedAllFilter: {\n    clearFiltersWire\n  },\n  UserClearedQuery: {\n    clearAllFiltersButStickyWire,\n    setQuery\n  },\n  UserClickedOpenX: {\n    selectPreselectedFilterWire\n  },\n  SearchResponseChanged: {\n    clearStickyFilters\n  }\n});\n","import { XModule } from '../x-modules.types';\nimport { facetsEmitters } from './store/emitters';\nimport { facetsXStoreModule } from './store/module';\nimport { FacetsXStoreModule } from './store/types';\nimport { facetsWiring } from './wiring';\n\n/**\n * Facets {@link XModule} alias.\n *\n * @public\n */\nexport type FacetsXModule = XModule<FacetsXStoreModule>;\n\n/**\n * Facets {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `facets` entry point.\n *\n * @public\n */\nexport const facetsXModule: FacetsXModule = {\n  name: 'facets',\n  storeModule: facetsXStoreModule,\n  storeEmitters: facetsEmitters,\n  wiring: facetsWiring\n};\n","import { Facet, Filter } from '@empathyco/x-types';\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { Prop } from 'vue-property-decorator';\nimport { Getter } from '../../../components/decorators/store.decorators';\nimport { isArrayEmpty } from '../../../utils/array';\nimport { FiltersByFacet } from '../store/types';\n\n/**\n * Mixin to share Facets logic.\n *\n * @public\n */\n@Component\nexport default class FacetsMixin extends Vue {\n  /**\n   * Array of facets ids used to get the selected filters for those facets.\n   *\n   * @public\n   */\n  @Prop()\n  public facetsIds?: Array<Facet['id']>;\n\n  /**\n   * Flag to render the component even if there are no filters selected.\n   *\n   * @public\n   */\n  @Prop({ default: false })\n  public alwaysVisible!: boolean;\n\n  /**\n   * Dictionary of filters {@link FiltersByFacet} filtered by facet id.\n   *\n   * @internal\n   */\n  @Getter('facets', 'selectedFiltersByFacet')\n  public selectedFiltersByFacet!: FiltersByFacet;\n\n  /**\n   * Get the selected filters from store.\n   *\n   * @internal\n   */\n  @Getter('facets', 'selectedFilters')\n  public selectedFiltersGetter!: Filter[];\n\n  /**\n   * Get selected filters.\n   * If there are facets ids, get selected filters whose facet id match with some of facets ids.\n   * If there aren't facets ids, get selected filters.\n   *\n   * @returns Array of selected filters depends on there are facets ids or not.\n   * @internal\n   */\n  protected get selectedFilters(): Filter[] {\n    if (this.facetsIds) {\n      return (this.facetsIds as string[]).reduce(\n        (selectedFilters, facetId) => [...selectedFilters, ...this.selectedFiltersByFacet[facetId]],\n        [] as Filter[]\n      );\n    }\n\n    return this.selectedFiltersGetter;\n  }\n\n  /**\n   * Check if there are selected filters.\n   *\n   * @returns True or false depends on if there are selected filters.\n   * @internal\n   */\n  protected get hasSelectedFilters(): boolean {\n    return !isArrayEmpty(this.selectedFilters);\n  }\n\n  /**\n   * Flag representing if the component should be visible/rendered or not.\n   *\n   * @returns True whenever alwaysVisible is true or has selected filters. False\n   * otherwise.\n   *\n   * @internal\n   */\n  protected get isVisible(): boolean {\n    return this.alwaysVisible || this.hasSelectedFilters;\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Facet } from '@empathyco/x-types';\n  import { Dictionary, map, objectFilter } from '@empathyco/x-utils';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import { Getter } from '../../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { toKebabCase } from '../../../../utils/string';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Custom interface to provide a slot name to a Facet.\n   *\n   * @internal\n   */\n  interface RenderFacet {\n    slotNameById: string;\n    slotNameByModelName: string;\n    facet: Facet;\n  }\n\n  /**\n   * This component renders the list of facets stored in the Facets module. Facets can be rendered\n   * differently based on their purpose and this can be achieved using the exposed slots:\n   * - A default and required slot.\n   * - A custom slot for each facet with the facetId as its name. This allows each facet to be\n   * rendered differently based on its needs.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class Facets extends FacetsMixin {\n    /**\n     * Animation component that will be used to animate the facets.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    public animation!: Vue | string;\n\n    /**\n     * Discriminates the facets rendered by this component. It expects a string containing facets\n     * ids, comma separated. This property will include or exclude facets based on its value.\n     * The default value is an empty string and the component will render all existing facets.\n     *\n     * @remarks\n     * To behave as a `include`, simply set the facets ids, comma separated:\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\n     * `renderableFacets=\"brand, category\"`\n     *\n     * The component will render brand and category facets.\n     *\n     * On the other hand, to simulate an `exclude` behaviour and exclude a facet from being\n     * rendered, append a '!' before its id:\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\n     * `renderableFacets=\"!brand,!price\"`\n     *\n     * The component will render category and color facets.\n     *\n     * @public\n     */\n    @Prop()\n    public renderableFacets!: string | undefined;\n\n    /**\n     * Dictionary of facets in the state.\n     *\n     * @internal\n     */\n    @Getter('facets', 'facets')\n    public facets!: Record<Facet['id'], Facet>;\n\n    /**\n     * Transforms a dictionary of Facets including the slot name.\n     *\n     * @returns A dictionary of facets with the slot name.\n     *\n     * @internal\n     */\n    protected get mappedFacets(): Dictionary<RenderFacet> {\n      return map(this.facetsToRender, (facetId, facet) => ({\n        slotNameById: toKebabCase(facetId),\n        slotNameByModelName: toKebabCase(facet.modelName),\n        facet\n      }));\n    }\n\n    /**\n     * The facets to be rendered after filtering {@link Facets.facets} by\n     * {@link Facets.renderableFacets} content.\n     *\n     * @returns The list of facets to be rendered.\n     *\n     * @internal\n     */\n    protected get facetsToRender(): Dictionary<Facet> {\n      if (!this.renderableFacets) {\n        return this.facets;\n      } else {\n        const excludedRegExp = /^!/;\n        const facetIds: string[] = this.renderableFacets.split(',').map(facetId => facetId.trim());\n        const included: string[] = [];\n        const excluded: string[] = [];\n        facetIds.forEach(facetId => {\n          if (excludedRegExp.test(facetId)) {\n            excluded.push(facetId.replace(excludedRegExp, ''));\n          } else {\n            included.push(facetId);\n          }\n        });\n\n        return this.filterFacetsToRender(included, excluded);\n      }\n    }\n\n    /**\n     * Indicates if there are facets available to show.\n     *\n     * @returns True if there are facets available and false otherwise.\n     * @internal\n     */\n    protected get hasFacets(): boolean {\n      return !!Object.keys(this.facetsToRender).length;\n    }\n\n    /**\n     * Filter facets dictionary retrieving those included and/or removing excluded.\n     *\n     * @param included - List of facets to render.\n     * @param excluded - List of not renderable facets.\n     *\n     * @returns The filtered list of facets to render.\n     *\n     * @internal\n     */\n    private filterFacetsToRender(included: string[], excluded: string[]): Dictionary<Facet> {\n      const hasAnyFacetIncluded = included.length > 0;\n      return objectFilter(this.facets, facetKey => {\n        const isIncluded = included.includes(String(facetKey));\n        const isExcluded = excluded.includes(String(facetKey));\n\n        return hasAnyFacetIncluded ? isIncluded && !isExcluded : !isExcluded;\n      });\n    }\n  }\n","<template>\n  <component :is=\"animation\" v-if=\"hasFacets\" class=\"x-facets-list\" data-test=\"facets\" tag=\"ul\">\n    <li\n      v-for=\"({ facet, slotNameById, slotNameByModelName }, facetId) in mappedFacets\"\n      :key=\"facetId\"\n      class=\"x-facets-list__item\"\n      data-test=\"facets-facet\"\n    >\n      <!--\n        @slot Customized Facet rendering. Specifying a slot with the facet's name will result in the\n        facet using that slot composition to render.\n            @binding {Facet} facet - Facet to render\n            @binding {Filter[]} selectedFilters - List of selected filters of the given facet\n      -->\n      <slot\n        v-if=\"$scopedSlots[slotNameById]\"\n        v-bind=\"{\n          facet,\n          selectedFilters: selectedFiltersByFacet[facetId] || []\n        }\"\n        :name=\"slotNameById\"\n      />\n      <!--\n        @slot Customized Facet rendering. Specifying a slot with the facet's modelName will result\n        in the facet using that slot composition to render.\n            @binding {Facet} facet - Facet to render\n            @binding {Filter[]} selectedFilters - List of selected filters of the given facet\n      -->\n      <slot\n        v-else-if=\"$scopedSlots[slotNameByModelName]\"\n        v-bind=\"{\n          facet,\n          selectedFilters: selectedFiltersByFacet[facetId] || []\n        }\"\n        :name=\"slotNameByModelName\"\n      />\n      <!--\n        @slot (required) Default Facet rendering. This slot will be used by default for rendering\n        the facets without an specific slot implementation.\n            @binding {Facet} facet - Facet to render\n            @binding {Filter[]} selectedFilters - List of selected filters of the given facet\n      -->\n      <slot\n        v-else\n        v-bind=\"{\n          facet,\n          selectedFilters: selectedFiltersByFacet[facetId] || []\n        }\"\n      >\n        This is the {{ facet.label }} facet. Pass something into its slot to display content.\n      </slot>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { Facet } from '@empathyco/x-types';\n  import { Dictionary, map, objectFilter } from '@empathyco/x-utils';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import { Getter } from '../../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { toKebabCase } from '../../../../utils/string';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Custom interface to provide a slot name to a Facet.\n   *\n   * @internal\n   */\n  interface RenderFacet {\n    slotNameById: string;\n    slotNameByModelName: string;\n    facet: Facet;\n  }\n\n  /**\n   * This component renders the list of facets stored in the Facets module. Facets can be rendered\n   * differently based on their purpose and this can be achieved using the exposed slots:\n   * - A default and required slot.\n   * - A custom slot for each facet with the facetId as its name. This allows each facet to be\n   * rendered differently based on its needs.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class Facets extends FacetsMixin {\n    /**\n     * Animation component that will be used to animate the facets.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    public animation!: Vue | string;\n\n    /**\n     * Discriminates the facets rendered by this component. It expects a string containing facets\n     * ids, comma separated. This property will include or exclude facets based on its value.\n     * The default value is an empty string and the component will render all existing facets.\n     *\n     * @remarks\n     * To behave as a `include`, simply set the facets ids, comma separated:\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\n     * `renderableFacets=\"brand, category\"`\n     *\n     * The component will render brand and category facets.\n     *\n     * On the other hand, to simulate an `exclude` behaviour and exclude a facet from being\n     * rendered, append a '!' before its id:\n     * `existingFacets=[{ brand: ... }, category: { ... }, color: { ... }, price: { ... }]`\n     * `renderableFacets=\"!brand,!price\"`\n     *\n     * The component will render category and color facets.\n     *\n     * @public\n     */\n    @Prop()\n    public renderableFacets!: string | undefined;\n\n    /**\n     * Dictionary of facets in the state.\n     *\n     * @internal\n     */\n    @Getter('facets', 'facets')\n    public facets!: Record<Facet['id'], Facet>;\n\n    /**\n     * Transforms a dictionary of Facets including the slot name.\n     *\n     * @returns A dictionary of facets with the slot name.\n     *\n     * @internal\n     */\n    protected get mappedFacets(): Dictionary<RenderFacet> {\n      return map(this.facetsToRender, (facetId, facet) => ({\n        slotNameById: toKebabCase(facetId),\n        slotNameByModelName: toKebabCase(facet.modelName),\n        facet\n      }));\n    }\n\n    /**\n     * The facets to be rendered after filtering {@link Facets.facets} by\n     * {@link Facets.renderableFacets} content.\n     *\n     * @returns The list of facets to be rendered.\n     *\n     * @internal\n     */\n    protected get facetsToRender(): Dictionary<Facet> {\n      if (!this.renderableFacets) {\n        return this.facets;\n      } else {\n        const excludedRegExp = /^!/;\n        const facetIds: string[] = this.renderableFacets.split(',').map(facetId => facetId.trim());\n        const included: string[] = [];\n        const excluded: string[] = [];\n        facetIds.forEach(facetId => {\n          if (excludedRegExp.test(facetId)) {\n            excluded.push(facetId.replace(excludedRegExp, ''));\n          } else {\n            included.push(facetId);\n          }\n        });\n\n        return this.filterFacetsToRender(included, excluded);\n      }\n    }\n\n    /**\n     * Indicates if there are facets available to show.\n     *\n     * @returns True if there are facets available and false otherwise.\n     * @internal\n     */\n    protected get hasFacets(): boolean {\n      return !!Object.keys(this.facetsToRender).length;\n    }\n\n    /**\n     * Filter facets dictionary retrieving those included and/or removing excluded.\n     *\n     * @param included - List of facets to render.\n     * @param excluded - List of not renderable facets.\n     *\n     * @returns The filtered list of facets to render.\n     *\n     * @internal\n     */\n    private filterFacetsToRender(included: string[], excluded: string[]): Dictionary<Facet> {\n      const hasAnyFacetIncluded = included.length > 0;\n      return objectFilter(this.facets, facetKey => {\n        const isIncluded = included.includes(String(facetKey));\n        const isExcluded = excluded.includes(String(facetKey));\n\n        return hasAnyFacetIncluded ? isIncluded && !isExcluded : !isExcluded;\n      });\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-facets-list {\n    display: flex;\n    flex-flow: column nowrap;\n    list-style-type: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Example\n\nThis component renders the list of facets stored in the Facets module. Facets can be rendered\ndifferently based on their purpose and this can be achieved using the exposed slots:\n\n- A default and required slot.\n- A custom slot for each facet with the facetId as its name. This allows each facet to be rendered\n  differently based on its needs.\n\nBelow, there are some examples showing how to use the component with its different configurations.\n\n### Default usage\n\nThe default slot of this component is mandatory. If no other slot is defined, every Facet will be\nrendered as specified in the default slot.\n\n```vue\n<template>\n  <Facets>\n    <template #default=\"{ facet, selectedFilters }\">\n      <h1>{{ ${facet.label} }}</h1>\n      <span v-if=\"selectedFilters.length > 0\">{{ `${selectedFilters.length} selected` }}</span>\n\n      <ul>\n        <li v-for=\"filter in facet.filters\" :key=\"filter.id\">\n          {{ filter.label }}\n        </li>\n      </ul>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import { Facets } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      Facets\n    }\n  };\n</script>\n```\n\n### Customized usage\n\nCustomized compositions for a specific Facet can be achieved by using a slot with the same id as the\nfacet to customize. For example, the Facet with the id \"color\" requires a composition that differs\nfrom the rest of the Facets. Doing it in a slot with the name \"color\" will apply this customization\njust to the \"color\" Facet. The other facets will fallback to the composition of the default slot.\n\nIt is also possible to customize the Facet content by the facet \"model name\". For example, to\nconfigure different content for \"Hierarchical Facets\" the \"hierarchical-facet\" slot will apply that\ncustomization. This can be combined with the facets by facet id. If some hierarchical facet needs\nsome different customization from the rest of the hierarchical, it can be achieve using the slot\nwith the facet id.\n\n```vue\n<template>\n  <Facets>\n    <template #color=\"{ facet, selectedFilters }\">\n      <span v-if=\"selectedFilters.length > 0\">{{ `${selectedFilters.length} colors chosen` }}</span>\n\n      <ul v-for=\"filter in facet.filters\" :key=\"filter.id\">\n        <li v-if=\"!filter.selected\">\n          {{ filter.label }}\n        </li>\n      </ul>\n    </template>\n\n    <template #hierarchical-facet=\"{ facet, selectedFilters }\">\n      <span v-if=\"selectedFilters.length > 0\">{{ `${selectedFilters.length} colors chosen` }}</span>\n\n      <ul v-for=\"filter in facet.filters\" :key=\"filter.id\">\n        <li v-if=\"!filter.selected\">\n          {{ filter.label }}\n          <ul v-for=\"childFilter in filter.children\" :key=\"filter.id\">\n            <li v-if=\"!childFilter.selected\">\n              {{ childFilter.label }}\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </template>\n\n    <template #default=\"{ facet }\">\n      <h1>{{ facet.label }}</h1>\n\n      <ul>\n        <li v-for=\"filter in facet.filters\" :key=\"filter.id\">\n          {{ filter.label }}\n        </li>\n      </ul>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import { Facets } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      Facets\n    }\n  };\n</script>\n```\n\n### Render specific facets I\n\nBy default, this component will render all existing facets. However, it has the renderableFacets\nprop to filter which facets will be rendered. Its value is a string containing the different facets\nids. This value is treated as an include or exclude list (to exclude a facet from being rendered,\njust prefix its id with a `!`). The component will only render included facets and discard excluded\nones. In the following example, the component will only render color and category facets.\n\n```vue\n<template>\n  <Facets renderableFacets=\"color, category\">\n    <template #default=\"{ facet }\">\n      <h1>{{ facet.label }}</h1>\n\n      <ul>\n        <li v-for=\"filter in facet.filters\" :key=\"filter.id\">\n          {{ filter.label }}\n        </li>\n      </ul>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import { Facets } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      Facets\n    }\n  };\n</script>\n```\n\n### Render specific facets II\n\nExclude facets so the component does not render them. In the following example, the component will\nrender every facet except color and price.\n\n```vue\n<template>\n  <Facets renderableFacets=\"!color, !price\">\n    <template #default=\"{ facet }\">\n      <h1>{{ facet.label }}</h1>\n\n      <ul>\n        <li v-for=\"filter in facet.filters\" :key=\"filter.id\">\n          {{ filter.label }}\n        </li>\n      </ul>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import { Facets } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      Facets\n    }\n  };\n</script>\n```\n\n### Integrating with the filters components\n\nThere are many components that will help you build your own awesome filters list. `Facets` just\nrenders the list, but what to render for each facet is up to you. Below you can see an example. of\nthe `Facets` component using the `FiltersSearch` `MultiSelectFilters`, `SimpleFilter`, `Filters`,\n`HierarchicalFilter`, `NumberRangeFilter` and `BasePriceFilterLabel`.\n\n```vue\n<template>\n  <Facets>\n    <template #default=\"{ facet, selectedFilters }\">\n      <h1>{{ facet.label }}</h1>\n      <FiltersSearch :filters=\"facet.filters\">\n        <MultiSelectFilters v-slot=\"{ filter }\">\n          <SimpleFilter :filter=\"filter\" />\n        </MultiSelectFilters>\n      </FiltersSearch>\n    </template>\n\n    <template #category=\"{ facet }\">\n      <h1>{{ facet.label }}</h1>\n      <Filters v-slot=\"{ filter }\" :filters=\"facet.filters\">\n        <HierarchicalFilter :filter=\"filter\" />\n      </Filters>\n    </template>\n\n    <template #price=\"{ facet }\">\n      <h1>{{ facet.label }}</h1>\n      <Filters v-slot=\"{ filter }\" :filters=\"facet.filters\">\n        <NumberRangeFilter :filter=\"filter\">\n          <BasePriceFilterLabel :filter=\"filter\" />\n        </NumberRangeFilter>\n      </Filters>\n    </template>\n  </Facets>\n</template>\n\n<script>\n  import {\n    Facets,\n    Filters,\n    FiltersSearch,\n    HierarchicalFilter,\n    MultiSelectFilters,\n    NumberRangeFilter,\n    SimpleFilter\n  } from '@empathyco/x-components/facets';\n\n  import { BasePriceFilterLabel } from '@empathyco/x-components';\n\n  export default {\n    components: {\n      Facets,\n      MultiSelectFilters,\n      FiltersSearch,\n      SimpleFilter,\n      Filters,\n      HierarchicalFilter,\n      NumberRangeFilter,\n      BasePriceFilterLabel\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Facet } from '@empathyco/x-types';\n  import { Getter, xComponentMixin } from '../../../../components';\n  import BaseEventButton from '../../../../components/base-event-button.vue';\n  import { isArrayEmpty } from '../../../../utils/array';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { FiltersByFacet } from '../../store';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * This component receives a required `facet` with\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} as prop and renders a button, which\n   * on clicked emits the {@link FacetsXEvents.UserClickedAllFilter} event. By default\n   * the rendered button displays a message with the facet label but this content is customizable\n   * through the default slot.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class AllFilter extends Vue {\n    /** The facet data. */\n    @Prop({ required: true })\n    public facet!: Facet;\n\n    /** The getter of the selectedFiltersByFacet. */\n    @Getter('facets', 'selectedFiltersByFacet')\n    public selectedFiltersByFacet!: FiltersByFacet;\n\n    /**\n     * The event that will be emitted when the all filter button is clicked.\n     *\n     * @returns The event to emit on click.\n     * @internal\n     */\n    protected get clickEvent(): Partial<XEventsTypes> {\n      return {\n        UserClickedAllFilter: [this.facet.id]\n      };\n    }\n\n    /**\n     * Computed to retrieve the selected state of this component.\n     *\n     * @returns True if is selected false otherwise.\n     */\n    protected get isSelected(): boolean {\n      return isArrayEmpty(this.selectedFiltersByFacet?.[this.facet.id]);\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @remarks This is only valid considering that in the case of HierarchicalFilters, ancestors\n     * of nested selected filters are also selected.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-selected': this.isSelected,\n        'x-all-filter--is-selected': this.isSelected\n      };\n    }\n  }\n","<template>\n  <BaseEventButton\n    class=\"x-facet-filter x-all-filter\"\n    data-test=\"all-filter\"\n    role=\"checkbox\"\n    :aria-checked=\"isSelected\"\n    :events=\"clickEvent\"\n    :class=\"cssClasses\"\n  >\n    <!--\n        @slot The content to render inside the button\n            @binding {Facet} Facet - The facet data\n      -->\n    <slot :facet=\"facet\" :isSelected=\"isSelected\">all</slot>\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Facet } from '@empathyco/x-types';\n  import { Getter, xComponentMixin } from '../../../../components';\n  import BaseEventButton from '../../../../components/base-event-button.vue';\n  import { isArrayEmpty } from '../../../../utils/array';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { FiltersByFacet } from '../../store';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * This component receives a required `facet` with\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} as prop and renders a button, which\n   * on clicked emits the {@link FacetsXEvents.UserClickedAllFilter} event. By default\n   * the rendered button displays a message with the facet label but this content is customizable\n   * through the default slot.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class AllFilter extends Vue {\n    /** The facet data. */\n    @Prop({ required: true })\n    public facet!: Facet;\n\n    /** The getter of the selectedFiltersByFacet. */\n    @Getter('facets', 'selectedFiltersByFacet')\n    public selectedFiltersByFacet!: FiltersByFacet;\n\n    /**\n     * The event that will be emitted when the all filter button is clicked.\n     *\n     * @returns The event to emit on click.\n     * @internal\n     */\n    protected get clickEvent(): Partial<XEventsTypes> {\n      return {\n        UserClickedAllFilter: [this.facet.id]\n      };\n    }\n\n    /**\n     * Computed to retrieve the selected state of this component.\n     *\n     * @returns True if is selected false otherwise.\n     */\n    protected get isSelected(): boolean {\n      return isArrayEmpty(this.selectedFiltersByFacet?.[this.facet.id]);\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @remarks This is only valid considering that in the case of HierarchicalFilters, ancestors\n     * of nested selected filters are also selected.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-selected': this.isSelected,\n        'x-all-filter--is-selected': this.isSelected\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component receives a required `facet` as prop and renders a button, which on clicked emits the\nUserClickedAllFilter event. By default the rendered button displays a message with the facet label\nbut this content is customizable through the default slot.\n\n### Basic usage\n\n```vue\n<AllFilter :facet=\"facet\" />\n```\n\n### Customizing its content\n\n```vue\n<AllFilter v-slot=\"{ facet }\" :facet=\"facet\">\n  Select all {{ facet.label }}\n</AllFilter>\n```\n\n### Basic example within facets\n\n```vue\n<Facets>\n  <template #default=\"{ facet }\">\n    <AllFilter :facet=\"facet\" />\n    <Filters v-slot=\"{ filter }\" :filters=\"facet.filters\">\n      <SimpleFilter :filter=\"filter\" />\n    </Filters>\n  </template>\n</Facets>\n```\n\n### Custom example within facets\n\n```vue\n<Facets>\n  <template #default=\"{ facet }\">\n    <AllFilter v-slot=\"{ facet }\" :facet=\"facet\">\n      Select all {{ facet.label }}\n    </AllFilter>\n    <Filters v-slot=\"{ filter }\" :filters=\"facet.filters\">\n      <SimpleFilter :filter=\"filter\" />\n    </Filters>\n  </template>\n</Facets>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedAllFilter`: the event is emitted after the user clicks the button. The event payload\n  is the id of the facet that this `AllFilter` component corresponds to.\n</docs>\n","\n  import Vue, { CreateElement, VNode } from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { BooleanFilter } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEvent, XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Renders default slot content. It binds to the default slot a\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter}, the {@link XEvent | XEvents}\n   * that will be emitted when clicking the content, the css classes and if the content should be\n   * disabled.\n   *\n   * @remarks The default slot expects a root element, if it receives a list of elements, it will\n   * renders the first element.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class RenderlessFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: BooleanFilter;\n\n    /** Additional events with its payload to emit when the filter is clicked. */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The events that will be emitted when the filter is clicked.\n     *\n     * @returns The events to be emitted when the filter is clicked.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserClickedAFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * The events to emit to the bus.\n     *\n     * @internal\n     */\n    protected emitEvents(): void {\n      Object.entries(this.events).forEach(([event, payload]) => {\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\n      });\n    }\n\n    /**\n     * Returns `true` when the filter should be disabled.\n     *\n     * @returns `true` if the filter should be disabled.\n     * @internal\n     */\n    protected get isDisabled(): boolean {\n      return this.filter.totalResults === 0;\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return ['x-facet-filter', { 'x-selected': this.filter.selected }];\n    }\n\n    render(h: CreateElement): VNode {\n      return (\n        this.$scopedSlots.default?.({\n          filter: this.filter,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          clickFilter: this.emitEvents,\n          cssClasses: this.cssClasses,\n          isDisabled: this.isDisabled\n        })?.[0] ?? h()\n      );\n    }\n  }\n","<script lang=\"ts\">\n  import Vue, { CreateElement, VNode } from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { BooleanFilter } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEvent, XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Renders default slot content. It binds to the default slot a\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter}, the {@link XEvent | XEvents}\n   * that will be emitted when clicking the content, the css classes and if the content should be\n   * disabled.\n   *\n   * @remarks The default slot expects a root element, if it receives a list of elements, it will\n   * renders the first element.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class RenderlessFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: BooleanFilter;\n\n    /** Additional events with its payload to emit when the filter is clicked. */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The events that will be emitted when the filter is clicked.\n     *\n     * @returns The events to be emitted when the filter is clicked.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return {\n        UserClickedAFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * The events to emit to the bus.\n     *\n     * @internal\n     */\n    protected emitEvents(): void {\n      Object.entries(this.events).forEach(([event, payload]) => {\n        this.$x.emit(event as XEvent, payload, { target: this.$el as HTMLElement });\n      });\n    }\n\n    /**\n     * Returns `true` when the filter should be disabled.\n     *\n     * @returns `true` if the filter should be disabled.\n     * @internal\n     */\n    protected get isDisabled(): boolean {\n      return this.filter.totalResults === 0;\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return ['x-facet-filter', { 'x-selected': this.filter.selected }];\n    }\n\n    render(h: CreateElement): VNode {\n      return (\n        this.$scopedSlots.default?.({\n          filter: this.filter,\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          clickFilter: this.emitEvents,\n          cssClasses: this.cssClasses,\n          isDisabled: this.isDisabled\n        })?.[0] ?? h()\n      );\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nRenders default slot content. It binds to the default slot a filter, the events that will be emitted\nwhen clicking the content, the css classes and if the content should be disabled.\n\n### Basic usage\n\n```vue\n<RenderlessFilter :filter=\"filter\" />\n```\n\n### Customizing its contents and adding new events\n\n```vue\n<template>\n  <RenderlessFilter\n    :filter=\"filter\"\n    :clickEvents=\"clickEvents\"\n    v-slot=\"{ filter, clickFilter, cssClasses, isDisabled }\"\n  >\n    <button @click=\"clickFilter\" :class=\"cssClasses\" :disabled=\"isDisabled\">\n      {{ filter.label }}\n    </button>\n  </RenderlessFilter>\n</template>\n\n<script>\n  import { RenderlessFilter } from '@empathyco/x-components';\n\n  export default {\n    components: {\n      RenderlessFilter\n    },\n    props: ['filter'],\n    computed: {\n      clickEvents() {\n        return { UserClickedAHierarchicalFilter: this.filter };\n      }\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NumberRangeFilter as NumberRangeFilterModel } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a number range filter, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    components: { RenderlessFilter },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class NumberRangeFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: NumberRangeFilterModel;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedANumberRangeFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-number-range-filter--is-selected': this.filter.selected\n      };\n    }\n  }\n","<template>\n  <RenderlessFilter\n    v-slot=\"{ filter, clickFilter, cssClasses, isDisabled }\"\n    :class=\"cssClasses\"\n    :clickEvents=\"_clickEvents\"\n    :filter=\"filter\"\n    class=\"x-number-range-filter\"\n  >\n    <!--\n      @slot The control element to render\n      @binding {Filter} filter - The filter data\n      @binding {() => void} clickFilter - Method that will invoke the needed actions after the user\n      clicks the filter.\n      @binding {Object} cssClasses - Object containing CSS classes to add to the button\n      @binding {Boolean} isDisabled - True if the filter shouldn't be able to be selected by the\n      user\n    -->\n    <slot\n      v-bind=\"{\n        filter,\n        clickFilter,\n        cssClasses,\n        isDisabled\n      }\"\n    >\n      <button\n        @click=\"clickFilter\"\n        :aria-checked=\"filter.selected.toString()\"\n        :class=\"cssClasses\"\n        :disabled=\"isDisabled\"\n        data-test=\"filter\"\n        role=\"checkbox\"\n      >\n        <!--\n          @slot The content to render inside the button\n          @binding {Filter} filter - The filter data\n        -->\n        <slot :filter=\"filter\" name=\"label\">{{ filter.label }}</slot>\n      </button>\n    </slot>\n  </RenderlessFilter>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { NumberRangeFilter as NumberRangeFilterModel } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a number range filter, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    components: { RenderlessFilter },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class NumberRangeFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: NumberRangeFilterModel;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedANumberRangeFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-number-range-filter--is-selected': this.filter.selected\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nThis component emits the following events:\n\n- [`UserClickedAFilter`](x-components.xeventstypes.userclickedafilter.md): the event is emitted\n  after the user clicks the button, using the `filter` prop as its payload.\n- [`UserClickedANumberRangeFilter`](x-components.xeventstypes.userclickedanumberrangefilter.md): the\n  event is emitted after the user clicks the button, using the `filter` prop as its payload.\n\n## See it in action\n\nThis component renders a button which, on clicked, emits the `UserClickedAFilter` and the\n`UserClickedANumberRangeFilter` events. By default, it renders the filter label as the button text.\n\nThe `filter` prop is required. The `clickEvents` prop is optional and allows configuring the events\nto emit on click.\n\n```vue\n<template>\n  <NumberRangeFilter :filter=\"filter\" />\n</template>\n\n<script>\n  import { NumberRangeFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'NumberRangeFilterTest',\n    components: {\n      NumberRangeFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `price:1-10`,\n          modelName: 'NumberRangeFilter',\n          label: `From 1 to 10`,\n          facetId: 'price',\n          range: {\n            min: 1,\n            max: 10\n          },\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Playing with props\n\nConfiguring the events to emit when the filter is clicked.\n\n```vue\n<template>\n  <NumberRangeFilter :clickEvents=\"{ UserClickedANumberRangeFilter: filter }\" :filter=\"filter\" />\n</template>\n\n<script>\n  import { NumberRangeFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'NumberRangeFilterTest',\n    components: {\n      NumberRangeFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `price:1-10`,\n          modelName: 'NumberRangeFilter',\n          label: `From 1 to 10`,\n          facetId: 'price',\n          range: {\n            min: 1,\n            max: 10\n          },\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing its contents\n\n```vue\n<template>\n  <NumberRangeFilter :filter=\"filter\" v-slot=\"{ filter }\">\n    <img src=\"checkbox.png\" />\n    <span>{{ filter.label }}</span>\n  </NumberRangeFilter>\n</template>\n\n<script>\n  import { NumberRangeFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'NumberRangeFilterTest',\n    components: {\n      NumberRangeFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `price:1-10`,\n          modelName: 'NumberRangeFilter',\n          label: `From 1 to 10`,\n          facetId: 'price',\n          range: {\n            min: 1,\n            max: 10\n          },\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","import { Filter, HierarchicalFilter, isHierarchicalFilter } from '@empathyco/x-types';\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { Prop } from 'vue-property-decorator';\nimport { XInject } from '../../../../components/decorators/injection.decorators';\nimport { isArrayEmpty } from '../../../../utils/array';\n\n/**\n * Mixin to share filters injection logic.\n *\n * @public\n */\n@Component\nexport default class FiltersInjectionMixin extends Vue {\n  /**\n   * The list of filters to be rendered as slots.\n   *\n   * @public\n   */\n  @Prop()\n  protected filters!: Filter[];\n\n  /**\n   * This prop is used in the `HierarchicalFilter` component and only in that case. It is necessary\n   * to make the `renderedFilters` to return only the filters of each level of the hierarchy.\n   *\n   * @public\n   */\n  @Prop({ required: false })\n  protected parentId?: Filter['id'];\n\n  /** The injected filters array.\n   *\n   * @public\n   */\n  @XInject('filters')\n  public injectedFilters!: Filter[];\n\n  /**\n   * The prop or injected filters array, filtered by parentId if they are\n   * {@link @empathyco/x-types#HierarchicalFilter}.\n   *\n   * @returns An array of filters.\n   *\n   * @internal\n   */\n  protected get renderedFilters(): Filter[] {\n    return this.filterByParentId(this.propOrInjectedFilters);\n  }\n\n  /**\n   * An array of filters formed by those that are passed through prop or injected.\n   *\n   * @returns An array of filters.\n   *\n   * @internal\n   */\n  protected get propOrInjectedFilters(): Filter[] {\n    return (\n      this.filters ??\n      this.injectedFilters ??\n      //TODO: add here logger\n      //eslint-disable-next-line no-console\n      console.warn('It is necessary to pass a prop or inject the list of filters')\n    );\n  }\n\n  /**\n   * In the case that the filters are {@link @empathyco/x-types#HierarchicalFilter}, this method\n   * removes from the filter list passed as a param, the filters that are not part of the level of\n   * the hierarchy, depending on the value of the `parentId` prop. In case this prop is undefined,\n   * then only the first level of filters hierarchy are returned. In the case the prop `parentId` is\n   * defined, then only the filters with the same `parentId` are returned.\n   *\n   * @param filters - The list of the filters to apply the filter.\n   * @returns The list of the filters filtered by parentId.\n   * @internal\n   */\n  protected filterByParentId(filters: Filter[]): Filter[] {\n    if (!isArrayEmpty(filters) && isHierarchicalFilter(filters[0])) {\n      return (filters as HierarchicalFilter[]).filter(\n        filter => filter.parentId === (this.parentId ?? null)\n      );\n    } else {\n      return filters;\n    }\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Renders a list with a list item per each\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} in the filters prop array.\n   * Each list item has a scoped slot, passing the filter as slot prop.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class FiltersList extends mixins(FiltersInjectionMixin) {\n    /**\n     * Animation component that will be used to animate the base filters.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * It handles if the filters should be rendered.\n     *\n     * @returns True if there are filters.\n     *\n     * @public\n     */\n    protected get hasFiltersToRender(): boolean {\n      return this.renderedFilters?.length > 0;\n    }\n\n    /**\n     * Checks if at least one filter is selected.\n     *\n     * @returns True if at least one filter is selected. False otherwise.\n     * @internal\n     */\n    protected get hasSelectedFilters(): boolean {\n      return !!this.renderedFilters?.some(filter => filter.selected);\n    }\n\n    /**\n     * Dynamic CSS classes for the root element of this component.\n     *\n     * @returns An object containing the dynamic CSS classes and a boolean indicating if they should\n     * be added or not.\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-filters--has-selected-filters': this.hasSelectedFilters\n      };\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    v-if=\"hasFiltersToRender\"\n    tag=\"ul\"\n    class=\"x-filters\"\n    :class=\"cssClasses\"\n    data-test=\"base-filters\"\n  >\n    <li\n      v-for=\"filter in renderedFilters\"\n      :key=\"filter.id\"\n      class=\"x-filters__item\"\n      data-test=\"base-filters-item\"\n    >\n      <!--\n        @slot (Required) Filter content\n            @binding {Filter} filter - Search-types filter data.\n      -->\n      <slot :filter=\"filter\" />\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Renders a list with a list item per each\n   * {@link @empathyco/x-types#BooleanFilter | BooleanFilter} in the filters prop array.\n   * Each list item has a scoped slot, passing the filter as slot prop.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class FiltersList extends mixins(FiltersInjectionMixin) {\n    /**\n     * Animation component that will be used to animate the base filters.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * It handles if the filters should be rendered.\n     *\n     * @returns True if there are filters.\n     *\n     * @public\n     */\n    protected get hasFiltersToRender(): boolean {\n      return this.renderedFilters?.length > 0;\n    }\n\n    /**\n     * Checks if at least one filter is selected.\n     *\n     * @returns True if at least one filter is selected. False otherwise.\n     * @internal\n     */\n    protected get hasSelectedFilters(): boolean {\n      return !!this.renderedFilters?.some(filter => filter.selected);\n    }\n\n    /**\n     * Dynamic CSS classes for the root element of this component.\n     *\n     * @returns An object containing the dynamic CSS classes and a boolean indicating if they should\n     * be added or not.\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-filters--has-selected-filters': this.hasSelectedFilters\n      };\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-filters {\n    list-style-type: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nRenders a list with a list item per each filter in the filters prop array. Each list item has a\nscoped slot, passing the filter as slot prop.\n\n### Important\n\nThe component has two ways of receive the filters list, it can be injected by another component or\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\nfilters list to their children, it is mandatory to send it as prop.\n\n### Basic usage\n\nUsing default slot:\n\n```vue\n<FiltersList :filters=\"filters\">\n  <template #default=\"{ filter }\">\n    <p>{{ filter.label }}</p>\n  </template>\n</FiltersList>\n```\n\nUsing default slot abbreviated syntax:\n\n```vue\n<FiltersList :filters=\"filters\" v-slot=\"{ filter }\">\n  <p>{{ filter.label }}</p>\n</FiltersList>\n```\n\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\n> parent component that receives and exposes the filters list. Using the injection, It is not\n> necessary to send the prop to the child components, it has to be send it in the parent component ,\n> the rest of components will inject this list.\n\n```vue\n<SlicedFilters :filters=\"filters\">\n  <FiltersList v-slot=\"{ filter }\">\n    <p>{{ filter.label }}</p>\n  </FiltersList>\n</SlicedFilters>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    Filter,\n    HierarchicalFilter as HierarchicalFilterModel,\n    isHierarchicalFilter\n  } from '@empathyco/x-types';\n  import { isObject } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { dynamicPropsMixin } from '../../../../components/dynamic-props.mixin';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersList from '../lists/filters-list.vue';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a hierarchical filter recursively, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    name: 'HierarchicalFilter',\n    components: { FiltersList, RenderlessFilter },\n    mixins: [\n      xComponentMixin(facetsXModule),\n      dynamicPropsMixin(['childrenFiltersClass', 'filterItemClass'])\n    ]\n  })\n  export default class HierarchicalFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: HierarchicalFilterModel;\n\n    /** The animation component to use for the children filters. */\n    @Prop()\n    public childrenAnimation?: Vue | string;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents!: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedAHierarchicalFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-hierarchical-filter--is-partially-selected': this.isPartiallySelected,\n        'x-hierarchical-filter--is-selected': this.filter.selected,\n        'x-facet-filter--is-partially-selected': this.isPartiallySelected\n      };\n    }\n\n    /**\n     * Gets the child filter click events, converting the payload of the events that have a\n     * {@link @empathyco/x-types#HierarchicalFilter} as payload to the corresponding child filter.\n     *\n     * @param childFilter - The child filter.\n     * @returns The events to emit when clicking a child.\n     * @internal\n     */\n    protected getChildFilterClickEvents(\n      childFilter: HierarchicalFilterModel\n    ): Partial<XEventsTypes> {\n      return Object.entries(this._clickEvents).reduce((clickEvents, [event, payload]) => {\n        return {\n          ...clickEvents,\n          [event]:\n            isObject(payload) &&\n            isHierarchicalFilter(payload as unknown as Filter) &&\n            childFilter !== (payload as unknown as HierarchicalFilterModel)\n              ? childFilter\n              : payload\n        };\n      }, {} as Partial<XEventsTypes>);\n    }\n\n    /**\n     * Returns if the filter is partially selected, which means having more than one child filter\n     * selected, but not every of them, or having at least one child filter partially selected.\n     *\n     * @returns True if the filter is partially selected. False otherwise.\n     * @internal\n     */\n    protected get isPartiallySelected(): boolean {\n      return this.isFilterPartiallySelected(this.filter);\n    }\n\n    /**\n     * List of filters to render, in case that the children's array\n     * is empty it will return an empty array instead of inject the ones from the parent.\n     *\n     * @returns A list of filters.\n     * @internal\n     */\n    protected get renderedChildrenFilters(): Filter[] {\n      return this.filter.children ?? [];\n    }\n\n    protected isFilterPartiallySelected(filter: HierarchicalFilterModel): boolean {\n      const selectedChildren = filter.children?.filter(filter => filter.selected);\n      const filterChildrenLength = filter.children?.length ?? 0;\n      return (\n        !!selectedChildren &&\n        ((selectedChildren.length > 0 && selectedChildren.length < filterChildrenLength) ||\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          selectedChildren.some(this.isFilterPartiallySelected))\n      );\n    }\n  }\n","<template>\n  <div class=\"x-hierarchical-filter-container\" data-test=\"hierarchical-filter-container\">\n    <RenderlessFilter\n      v-slot=\"{ filter, clickFilter, cssClasses, isDisabled }\"\n      :class=\"cssClasses\"\n      :clickEvents=\"_clickEvents\"\n      :filter=\"filter\"\n      class=\"x-hierarchical-filter\"\n    >\n      <!--\n        @slot The content to render inside the button.\n            @binding {Filter} filter - The filter data.\n            @binding {Function} clickFilter - The handler to invoke when clicking the filter.\n            @binding {VueCssClasses} cssClasses - The CSS classes.\n            @binding {boolean} isDisabled - Flag determining the disabled state.\n      -->\n      <slot v-bind=\"{ filter, clickFilter, cssClasses, isDisabled }\">\n        <button\n          @click=\"clickFilter\"\n          :aria-checked=\"filter.selected.toString()\"\n          :class=\"[cssClasses, filterItemClass]\"\n          :disabled=\"isDisabled\"\n          data-test=\"filter\"\n          role=\"checkbox\"\n        >\n          <!--\n            @slot The content to render inside the button.\n               @binding {Filter} filter - The filter data.\n          -->\n          <slot name=\"label\" :filter=\"filter\">{{ filter.label }}</slot>\n        </button>\n      </slot>\n    </RenderlessFilter>\n    <FiltersList\n      v-slot=\"{ filter: childFilter }\"\n      :animation=\"childrenAnimation\"\n      :filters=\"renderedChildrenFilters\"\n      :parent-id=\"filter.id\"\n      class=\"x-hierarchical-filter__children\"\n      :class=\"childrenFiltersClass\"\n      data-test=\"children-filters\"\n    >\n      <HierarchicalFilter\n        :childrenAnimation=\"childrenAnimation\"\n        :filter=\"childFilter\"\n        :clickEvents=\"getChildFilterClickEvents(childFilter)\"\n        :childrenFiltersClass=\"childrenFiltersClass\"\n        :filterItemClass=\"filterItemClass\"\n      >\n        <template #default=\"{ filter, clickFilter, cssClasses, isDisabled }\">\n          <slot v-bind=\"{ filter, clickFilter, cssClasses, isDisabled }\" />\n        </template>\n        <template #label=\"{ filter }\">\n          <slot name=\"label\" :filter=\"filter\" />\n        </template>\n      </HierarchicalFilter>\n    </FiltersList>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import {\n    Filter,\n    HierarchicalFilter as HierarchicalFilterModel,\n    isHierarchicalFilter\n  } from '@empathyco/x-types';\n  import { isObject } from '@empathyco/x-utils';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { dynamicPropsMixin } from '../../../../components/dynamic-props.mixin';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersList from '../lists/filters-list.vue';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a hierarchical filter recursively, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    name: 'HierarchicalFilter',\n    components: { FiltersList, RenderlessFilter },\n    mixins: [\n      xComponentMixin(facetsXModule),\n      dynamicPropsMixin(['childrenFiltersClass', 'filterItemClass'])\n    ]\n  })\n  export default class HierarchicalFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: HierarchicalFilterModel;\n\n    /** The animation component to use for the children filters. */\n    @Prop()\n    public childrenAnimation?: Vue | string;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents!: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedAHierarchicalFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-hierarchical-filter--is-partially-selected': this.isPartiallySelected,\n        'x-hierarchical-filter--is-selected': this.filter.selected,\n        'x-facet-filter--is-partially-selected': this.isPartiallySelected\n      };\n    }\n\n    /**\n     * Gets the child filter click events, converting the payload of the events that have a\n     * {@link @empathyco/x-types#HierarchicalFilter} as payload to the corresponding child filter.\n     *\n     * @param childFilter - The child filter.\n     * @returns The events to emit when clicking a child.\n     * @internal\n     */\n    protected getChildFilterClickEvents(\n      childFilter: HierarchicalFilterModel\n    ): Partial<XEventsTypes> {\n      return Object.entries(this._clickEvents).reduce((clickEvents, [event, payload]) => {\n        return {\n          ...clickEvents,\n          [event]:\n            isObject(payload) &&\n            isHierarchicalFilter(payload as unknown as Filter) &&\n            childFilter !== (payload as unknown as HierarchicalFilterModel)\n              ? childFilter\n              : payload\n        };\n      }, {} as Partial<XEventsTypes>);\n    }\n\n    /**\n     * Returns if the filter is partially selected, which means having more than one child filter\n     * selected, but not every of them, or having at least one child filter partially selected.\n     *\n     * @returns True if the filter is partially selected. False otherwise.\n     * @internal\n     */\n    protected get isPartiallySelected(): boolean {\n      return this.isFilterPartiallySelected(this.filter);\n    }\n\n    /**\n     * List of filters to render, in case that the children's array\n     * is empty it will return an empty array instead of inject the ones from the parent.\n     *\n     * @returns A list of filters.\n     * @internal\n     */\n    protected get renderedChildrenFilters(): Filter[] {\n      return this.filter.children ?? [];\n    }\n\n    protected isFilterPartiallySelected(filter: HierarchicalFilterModel): boolean {\n      const selectedChildren = filter.children?.filter(filter => filter.selected);\n      const filterChildrenLength = filter.children?.length ?? 0;\n      return (\n        !!selectedChildren &&\n        ((selectedChildren.length > 0 && selectedChildren.length < filterChildrenLength) ||\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          selectedChildren.some(this.isFilterPartiallySelected))\n      );\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- [`UserClickedAFilter`](x-components.xeventstypes.userclickedafilter.md): the event is emitted\n  after the user clicks the button, using the `filter` prop as its payload.\n- [`UserClickedAHierarchicalFilter`](x-components.xeventstypes.userclickedahierarchicalfilter.md):\n  the event is emitted after the user clicks the button, using the `filter` prop as its payload.\n  filter.\n\n## See it in action\n\nThis component renders a button, which on clicked emits the `UserClickedAFilter` and\n`UserClickedAHierarchicalFilter` events. By default it renders the filter label as the button text.\nIf the provided filter has children filters, this component will render them recursively. Changing\nthe slot content will change it for all of the children.\n\nThe `filter` prop is required. The `clickEvents` prop is optional and allows configuring the events\nto emit on click.\n\n```vue\n<template>\n  <HierarchicalFilter :filter=\"filter\" />\n</template>\n\n<script>\n  import { HierarchicalFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'HierarchicalFilterTest',\n    components: {\n      HierarchicalFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `categories:men`,\n          modelName: 'HierarchicalFilter',\n          label: `men`,\n          facetId: 'categories',\n          parentId: null,\n          totalResults: 10,\n          children: [],\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Playing with props\n\nConfiguring the events to emit when the filter is clicked.\n\n```vue\n<template>\n  <HierarchicalFilter :clickEvents=\"{ UserClickedAHierarchicalFilter: filter }\" :filter=\"filter\" />\n</template>\n\n<script>\n  import { HierarchicalFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'HierarchicalFilterTest',\n    components: {\n      HierarchicalFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `categories:men`,\n          modelName: 'HierarchicalFilter',\n          label: `men`,\n          facetId: 'categories',\n          parentId: null,\n          totalResults: 10,\n          children: [],\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the default slot content\n\nIn this example, the child filters will also include the label and checkbox.\n\n```vue\n<template>\n  <HierarchicalFilter :filter=\"filter\" v-slot=\"{ filter, clickFilter, slotCSSClasses, isDisabled }\">\n    <label :class=\"slotCSSClasses\">\n      <input @change=\"clickFilter\" :disabled=\"isDisabled\" />\n      {{ filter.label }}\n    </label>\n  </HierarchicalFilter>\n</template>\n\n<script>\n  import { HierarchicalFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'HierarchicalFilterTest',\n    components: {\n      HierarchicalFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `categories:men`,\n          modelName: 'HierarchicalFilter',\n          label: `men`,\n          facetId: 'categories',\n          parentId: null,\n          totalResults: 10,\n          children: [],\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the label slot content\n\n```vue\n<template>\n  <HierarchicalFilter :filter=\"filter\">\n    <template #label :filter=\"filter\">\n      <span class=\"custom-class\">{{ filter.label }}</span>\n    </template>\n  </HierarchicalFilter>\n</template>\n\n<script>\n  import { HierarchicalFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'HierarchicalFilterTest',\n    components: {\n      HierarchicalFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `categories:men`,\n          modelName: 'HierarchicalFilter',\n          label: `men`,\n          facetId: 'categories',\n          parentId: null,\n          totalResults: 10,\n          children: [],\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Customizing the content with classes\n\nThe `childrenFiltersClass` prop can be used to add classes to the inner filters lists. This is\nuseful to set the indent of the children filters.\n\nThe `filterItemClass` prop can be used to add classes to the filter element itself.\n\n```vue\n<template>\n  <HierarchicalFilter\n    :filter=\"filter\"\n    childrenFiltersClass=\"x-custom-class\"\n    filterItemClass=\"x-custom-filter\"\n  />\n</template>\n\n<script>\n  import { HierarchicalFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'HierarchicalFilterTest',\n    components: {\n      HierarchicalFilter\n    },\n    date() {\n      return {\n        filter: {\n          id: `categories:men`,\n          modelName: 'HierarchicalFilter',\n          label: `men`,\n          facetId: 'categories',\n          parentId: null,\n          totalResults: 10,\n          children: [],\n          selected: false\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { SimpleFilter as SimpleFilterModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a simple filter, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    components: { RenderlessFilter },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class SimpleFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: SimpleFilterModel;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedASimpleFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-simple-filter--is-selected': this.filter.selected\n      };\n    }\n  }\n","<template>\n  <RenderlessFilter\n    v-slot=\"{ filter, clickFilter, cssClasses, isDisabled }\"\n    :class=\"cssClasses\"\n    :clickEvents=\"_clickEvents\"\n    :filter=\"filter\"\n    class=\"x-simple-filter\"\n  >\n    <!--\n      @slot The control element to render\n      @binding {Filter} filter - The filter data\n      @binding {() => void} clickFilter - Method that will invoke the needed actions after the user\n      clicks the filter.\n      @binding {Object} cssClasses - Object containing CSS classes to add to the button\n      @binding {Boolean} isDisabled - True if the filter shouldn't be able to be selected by the\n      user\n    -->\n    <slot\n      v-bind=\"{\n        filter,\n        clickFilter,\n        cssClasses,\n        isDisabled\n      }\"\n    >\n      <button\n        @click=\"clickFilter\"\n        :aria-checked=\"filter.selected.toString()\"\n        :class=\"cssClasses\"\n        :disabled=\"isDisabled\"\n        data-test=\"filter\"\n        role=\"checkbox\"\n      >\n        <!--\n          @slot The content to render inside the button\n          @binding {Filter} filter - The filter data\n        -->\n        <slot :filter=\"filter\" name=\"label\">{{ filter.label }}</slot>\n      </button>\n    </slot>\n  </RenderlessFilter>\n</template>\n\n<script lang=\"ts\">\n  import { SimpleFilter as SimpleFilterModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils/types';\n  import { XEventsTypes } from '../../../../wiring/events.types';\n  import { facetsXModule } from '../../x-module';\n  import RenderlessFilter from './renderless-filter.vue';\n\n  /**\n   * Renders a simple filter, emitting the needed events when clicked.\n   *\n   * @public\n   */\n  @Component({\n    components: { RenderlessFilter },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class SimpleFilter extends Vue {\n    /** The filter data to render. */\n    @Prop({ required: true })\n    public filter!: SimpleFilterModel;\n\n    /**\n     * Additional events, with their payload, to emit when the filter is clicked.\n     *\n     * @public\n     */\n    @Prop()\n    public clickEvents?: Partial<XEventsTypes>;\n\n    /**\n     * The {@link XEventsTypes | events} to emit.\n     *\n     * @returns The events to emit when clicked.\n     * @internal\n     */\n    protected get _clickEvents(): Partial<XEventsTypes> {\n      return {\n        UserClickedASimpleFilter: this.filter,\n        ...this.clickEvents\n      };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-simple-filter--is-selected': this.filter.selected\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Events\n\nA list of events that the component will emit:\n\n- [`UserClickedAFilter`](x-components.xeventstypes.userclickedafilter.md): the event is emitted\n  after the user clicks the button, using the `filter` prop as its payload.\n- [`UserClickedASimpleFilter`[(x-components.xeventstypes.userclickedasimplefilter.md): the event is\n  emitted after the user clicks the button, using the `filter` prop as its payload.\n\n## See it in action\n\nThis component renders a button, which on clicked emits the `UserClickedAFilter` and the\n`UserClickedASimpleFilter` events. By default, it renders a `button` with the `filter.label`\nproperty as text.\n\nThe `filter` prop is required. The `clickEvents` prop is optional and allows configuring the events\nto emit on click.\n\n```vue\n<template>\n  <SimpleFilter :filter=\"filter\" />\n</template>\n\n<script>\n  import { SimpleFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'SimpleFilterTest',\n    components: {\n      SimpleFilter\n    },\n    data() {\n      return {\n        filter: {\n          modelName: 'SimpleFilter',\n          selected: false,\n          id: 'category:shirts',\n          value: 'category:shirts',\n          facetId: 'category',\n          totalResults: 10\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Playing with props\n\nConfiguring the events to emit when the filter is clicked.\n\n```vue\n<template>\n  <SimpleFilter :clickEvents=\"{ UserClickedASimpleFilter: filter }\" :filter=\"filter\" />\n</template>\n\n<script>\n  import { SimpleFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'SimpleFilterTest',\n    components: {\n      SimpleFilter\n    },\n    data() {\n      return {\n        filter: {\n          modelName: 'SimpleFilter',\n          selected: false,\n          id: 'category:shirts',\n          value: 'category:shirts',\n          facetId: 'category',\n          totalResults: 10\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Rendering an input\n\nYou can change the rendered control using the default slot. Note that because of the current Vue\nlimitations, you must only render one single root node in this slot. There you will receive all the\ndata and methods needed:\n\n```vue\n<template>\n  <SimpleFilter v-slot=\"{ filter, clickFilter, isDisabled, cssClasses }\" :filter=\"filter\">\n    <label :class=\"cssClasses\">\n      <input :checked=\"filter.selected\" type=\"checkbox\" @change=\"clickFilter\" />\n      {{ filter.label }}\n    </label>\n  </SimpleFilter>\n</template>\n\n<script>\n  import { SimpleFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'SimpleFilterTest',\n    components: {\n      SimpleFilter\n    },\n    data() {\n      return {\n        filter: {\n          modelName: 'SimpleFilter',\n          selected: false,\n          id: 'category:shirts',\n          value: 'category:shirts',\n          facetId: 'category',\n          label: 'Shirts',\n          totalResults: 10\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Changing default button content\n\nYou can change the content rendered by the default button using the `label` slot. There you will\nreceive the filter data.\n\n```vue\n<template>\n  <SimpleFilter :filter=\"filter\">\n    <template #label=\"{ filter }\">\n      <img :src=\"`imgs/filters/${filter.id}.png`\" />\n      <span>{{ filter.label }}</span>\n    </template>\n  </SimpleFilter>\n</template>\n\n<script>\n  import { SimpleFilter } from '@empathyco/x-components/facets';\n\n  export default {\n    name: 'SimpleFilterTest',\n    components: {\n      SimpleFilter\n    },\n    data() {\n      return {\n        filter: {\n          modelName: 'SimpleFilter',\n          selected: false,\n          id: 'category:shirts',\n          value: 'category:shirts',\n          facetId: 'category',\n          label: 'Shirts',\n          totalResults: 10\n        }\n      };\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Filter, isBooleanFilter } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { xComponentMixin, XProvide } from '../../../../components';\n  import { debounce } from '../../../../utils/debounce';\n  import { normalizeString } from '../../../../utils/normalize';\n  import { DebouncedFunction, VueCSSClasses } from '../../../../utils/types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Renders the filters sifted with the input query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class FiltersSearch extends mixins(FiltersInjectionMixin) {\n    /** The debounce time for applying the filter sifting. */\n    @Prop({ default: 200 })\n    protected debounceInMs!: number;\n\n    protected query = '';\n    protected setQueryDebounced!: DebouncedFunction<[string]>;\n\n    protected filtersSearchInputMessage = 'search into the filter values';\n\n    /**\n     * Set the debounce function for setting the query debounced.\n     *\n     * @internal\n     */\n    @Watch('debounceInMs', { immediate: true })\n    updateSetQueryDebounced(): void {\n      this.setQueryDebounced = debounce(query => {\n        this.query = query;\n      }, this.debounceInMs);\n    }\n\n    /**\n     * Sift the array of filters which matches with the query.\n     *\n     * @returns Array of sifted filters.\n     * @internal\n     */\n    @XProvide('filters')\n    public get siftedFilters(): Filter[] {\n      const normalizedQuery = normalizeString(this.query);\n      return this.renderedFilters.filter(\n        filter => isBooleanFilter(filter) && normalizeString(filter.label).includes(normalizedQuery)\n      );\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-filters-search--is-sifted': !!this.query\n      };\n    }\n\n    /**\n     * Set the query through the debounced function.\n     *\n     * @param query - The query to sift filters.\n     * @internal\n     */\n    protected setQuery(query: string): void {\n      this.setQueryDebounced(query);\n    }\n\n    /**\n     * Clear the query.\n     *\n     * @internal\n     */\n    protected clearQuery(): void {\n      this.query = '';\n    }\n  }\n","import { BooleanFilterModelNames } from '../../named-model.model.js';\n\n/**\r\n * Type guard to check if a filter is a {@link BooleanFilter}.\r\n *\r\n * @param filter - The filter to check.\r\n *\r\n * @returns True if the filter is a {@link BooleanFilter}, false otherwise.\r\n *\r\n * @public\r\n */\r\nfunction isBooleanFilter(filter) {\r\n    return BooleanFilterModelNames.includes(filter.modelName);\r\n}\n\nexport { isBooleanFilter };\n","<template>\n  <div class=\"x-filters-search\" :class=\"cssClasses\" data-test=\"filters-search\">\n    <!--\n      @slot Search content. It is the content which triggers the filters sifting.\n        @binding {string} query - The query to search in filters.\n        @binding {Function} setQuery - The function to set the query. The query is passed as\n        parameter.\n        @binding {Function} clearQuery - The function to clear the query.\n    -->\n    <slot name=\"search\" v-bind=\"{ query, setQuery, clearQuery }\">\n      <input\n        @input=\"setQuery($event.target.value)\"\n        :value=\"query\"\n        type=\"search\"\n        class=\"x-filters-search__input x-input\"\n        data-test=\"filters-search-input\"\n        :aria-label=\"filtersSearchInputMessage\"\n      />\n    </slot>\n    <!--\n      @slot (Required) Sifted filters content.\n        @binding {Filter[]} siftedFilters - Sifted filters data.\n    -->\n    <slot :siftedFilters=\"siftedFilters\"></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Filter, isBooleanFilter } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop, Watch } from 'vue-property-decorator';\n  import { xComponentMixin, XProvide } from '../../../../components';\n  import { debounce } from '../../../../utils/debounce';\n  import { normalizeString } from '../../../../utils/normalize';\n  import { DebouncedFunction, VueCSSClasses } from '../../../../utils/types';\n  import { facetsXModule } from '../../x-module';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Renders the filters sifted with the input query.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class FiltersSearch extends mixins(FiltersInjectionMixin) {\n    /** The debounce time for applying the filter sifting. */\n    @Prop({ default: 200 })\n    protected debounceInMs!: number;\n\n    protected query = '';\n    protected setQueryDebounced!: DebouncedFunction<[string]>;\n\n    protected filtersSearchInputMessage = 'search into the filter values';\n\n    /**\n     * Set the debounce function for setting the query debounced.\n     *\n     * @internal\n     */\n    @Watch('debounceInMs', { immediate: true })\n    updateSetQueryDebounced(): void {\n      this.setQueryDebounced = debounce(query => {\n        this.query = query;\n      }, this.debounceInMs);\n    }\n\n    /**\n     * Sift the array of filters which matches with the query.\n     *\n     * @returns Array of sifted filters.\n     * @internal\n     */\n    @XProvide('filters')\n    public get siftedFilters(): Filter[] {\n      const normalizedQuery = normalizeString(this.query);\n      return this.renderedFilters.filter(\n        filter => isBooleanFilter(filter) && normalizeString(filter.label).includes(normalizedQuery)\n      );\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-filters-search--is-sifted': !!this.query\n      };\n    }\n\n    /**\n     * Set the query through the debounced function.\n     *\n     * @param query - The query to sift filters.\n     * @internal\n     */\n    protected setQuery(query: string): void {\n      this.setQueryDebounced(query);\n    }\n\n    /**\n     * Clear the query.\n     *\n     * @internal\n     */\n    protected clearQuery(): void {\n      this.query = '';\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-filters-search {\n    display: flex;\n    flex-flow: column nowrap;\n\n    &__input {\n      &::-ms-clear {\n        display: none;\n        width: 0;\n        height: 0;\n      }\n\n      &::-ms-reveal {\n        display: none;\n        width: 0;\n        height: 0;\n      }\n\n      &::-webkit-search-decoration,\n      &::-webkit-search-cancel-button,\n      &::-webkit-search-results-button,\n      &::-webkit-search-results-decoration {\n        display: none;\n      }\n    }\n  }\n</style>\n\n<docs lang=\"mdx\">\n## Examples\n\nIt renders an input and a list of filters passed as prop or being injected. The list of filters can\nbe sifted with the query typed in the input. This component has also a debounce prop to set the time\nin milliseconds to apply the filters search. Moreover, it has two scoped slots. The first one for\ncustomize the search triggering with three slot props; the query, a function to set the query by\nsifting and a third one for cleaning the query. The second scoped slot is required and it is for\ndisplaying the list of filters sifted. It has a slot prop with these filters sifted.\n\n### Important\n\nThe component has two ways of receive the filters list, it can be injected by another component or\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\nfilters list to their children, it is mandatory to send it as prop.\n\n### Basic usage\n\nUsing default and required slot:\n\n```vue\n<FiltersSearch :filters=\"filters\" v-slot=\"{ siftedFilters }\">\n  <ul v-for=\"filter in siftedFilters\">\n    <li :key=\"filter.id\">{{ filter.label }}</li>\n  </ul>\n</FiltersSearch>\n```\n\nSetting debounce time:\n\n```vue\n<FiltersSearch :filters=\"filters\" :debounceInMs=\"500\" v-slot=\"{ siftedFilters }\">\n  <ul v-for=\"filter in siftedFilters\">\n    <li :key=\"filter.id\">{{ filter.label }}</li>\n  </ul>\n</FiltersSearch>\n```\n\nReplacing search triggering:\n\n```vue\n<FiltersSearch :filters=\"filters\">\n  <template #search=\"{ query, setQuery, clearQuery }\">\n    <input\n      @input=\"setQuery($event.target.value)\"\n      :value=\"query\"\n      class=\"x-input x-filters-search__input\"\n      :aria-label=\"filtersSearchInputMessage\"/>\n    <button @click=\"clearQuery\">X</button>\n  </template>\n  <template #default=\"{ siftedFilters }\">\n    <ul v-for=\"filter in siftedFilters\">\n      <li :key=\"filter.id\">{{ filter.label }}</li>\n    </ul>\n  </template>\n</FiltersSearch>\n```\n\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\n> parent component that receives and exposes the filters list. Using the injection, It is not\n> necessary to send the prop to the child components, it has to be send it in the parent component,\n> the rest of components will inject this list.\n\n```vue\n<Facets v-slot=\"{ facet }\">\n  <SlicedFilters :filters=\"facet.filters\" :max=\"8\">\n    <FiltersSearch >\n        <Filters v-slot=\"{ filter }\">\n          <SimpleFilter :filter=\"filter\" data-test=\"brand-filter\" />\n        </Filters>\n    </FiltersSearch>\n  </SlicedFilters>\n</Facets>\n```\n</docs>\n","\n\n\n\n\n\n\n  import Component from 'vue-class-component';\n  import { NoElement } from '../../../../components';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Provides a scoped slot with the selected filters from every facet, or from the facet which\n   * facet id is passed as property.\n   *\n   * The default slot renders the length of the selected filters array.\n   * The property \"alwaysVisible\" handles if the component is rendered if no filters are selected.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)],\n    components: {\n      NoElement\n    }\n  })\n  export default class SelectedFilters extends FacetsMixin {}\n","<template>\n  <NoElement v-if=\"isVisible\" class=\"x-selected-filters\">\n    <slot v-bind=\"{ selectedFilters }\">{{ selectedFilters.length }}</slot>\n  </NoElement>\n</template>\n\n<script lang=\"ts\">\n  import Component from 'vue-class-component';\n  import { NoElement } from '../../../../components';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n\n  /**\n   * Provides a scoped slot with the selected filters from every facet, or from the facet which\n   * facet id is passed as property.\n   *\n   * The default slot renders the length of the selected filters array.\n   * The property \"alwaysVisible\" handles if the component is rendered if no filters are selected.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule)],\n    components: {\n      NoElement\n    }\n  })\n  export default class SelectedFilters extends FacetsMixin {}\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nProvides a scoped slot with the selected filters from every facet, or from the facet which facet id\nis passed as property.\n\nThe default slot renders the length of the selected filters array.\n\n### Basic usage\n\n```vue\n<SelectedFilters />\n```\n\n### Always visible\n\nIf \"alwaysVisible\" is true, the component is rendered no matter if there are some filter selected.\nIf \"alwaysVisible\" is false (default), the component is rendered if there are some filter selected.\n\n```vue\n<SelectedFilters />\n```\n\nOutput:\n\n```html\n<div class=\"x-selected-filters\">1</div>\n```\n\n### Customizing its content\n\nIn this example, renders a custom message using the default scoped slot.\n\n```vue\n<SelectedFilters>\n  <template #default=\"{ selectedFilters }\">\n    Selected filters: {{ selectedFilters.length }}\n  </template>\n</SelectedFilters>\n```\n\nOutput:\n\n```html\n<div class=\"x-selected-filters\">Selected filters: 1</div>\n```\n\nIn this example, the selected filters are filtered by the facetsIds property.\n\n```vue\n<SelectedFilters :facetsIds=\"['brand_facet']\" />\n```\n\n```vue\n<SelectedFilters :facetsIds=\"['brand_facet', 'gender_facet']\">\n  <template #default=\"{ selectedFilters }\">\n    Selected filters: {{ selectedFilters.length }}\n  </template>\n</SelectedFilters>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import { Filter, isFacetFilter } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { toKebabCase } from '../../../../utils/string';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n  import SelectedFilters from './selected-filters.vue';\n\n  /**\n   * Custom interface to provide a slot name to a Filter.\n   *\n   * @internal\n   */\n  interface RenderFilter {\n    slotName: string;\n    selectedFilter: Filter;\n  }\n\n  /**\n   * This component renders a list of selected filters from every facet, or from the facet\n   * ids passed as property. It uses the SelectedFilters component (state).\n   *\n   * It provides two slots: a scoped one which name is the filter facet id; and a default one.\n   * Both exposes the filter and renders the filter label by default.\n   *\n   * The property \"alwaysVisible\" handles if the component is rendered if no filters are selected.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { SelectedFilters },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class SelectedFiltersList extends FacetsMixin {\n    /**\n     * Animation component that will be used to animate the selected filters list.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Transforms a dictionary of Filters including the slot name.\n     *\n     * @param selectedFilters - A list of selected filters without slot name.\n     *\n     * @returns A dictionary of facets with the slot name.\n     *\n     * @internal\n     */\n    protected mapSlot(selectedFilters: Filter[]): RenderFilter[] {\n      return selectedFilters.map(filter => ({\n        slotName: isFacetFilter(filter) ? toKebabCase(filter.facetId as string) : 'default',\n        selectedFilter: filter\n      }));\n    }\n  }\n","<template>\n  <SelectedFilters\n    v-slot=\"{ selectedFilters }\"\n    :facetsIds=\"facetsIds\"\n    :alwaysVisible=\"alwaysVisible\"\n  >\n    <component\n      :is=\"animation\"\n      class=\"x-selected-filters-list\"\n      data-test=\"selected-filters-list\"\n      tag=\"ul\"\n    >\n      <li\n        v-for=\"{ slotName, selectedFilter } in mapSlot(selectedFilters)\"\n        :key=\"selectedFilter.id\"\n        class=\"x-selected-filters-list__item\"\n        data-test=\"selected-filters-list-item\"\n      >\n        <!--\n          @slot Custom filter rendering. Dynamic slot defined in the template with the filter\n          facet id. It renders the filter label by default.\n              @binding {Filter} filter - Filter to render.\n        -->\n        <slot v-if=\"$scopedSlots[slotName]\" :name=\"slotName\" :filter=\"selectedFilter\">\n          <span class=\"x-tag\">{{ selectedFilter.label }}</span>\n        </slot>\n\n        <!--\n          @slot Default filter rendering. It renders the filter label by default.\n              @binding {Filter} filter - Filter to render.\n        -->\n        <slot v-else name=\"default\" :filter=\"selectedFilter\">\n          {{ selectedFilter.label }}\n        </slot>\n      </li>\n    </component>\n  </SelectedFilters>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n  import { Filter, isFacetFilter } from '@empathyco/x-types';\n  import { xComponentMixin } from '../../../../components/x-component.mixin';\n  import { toKebabCase } from '../../../../utils/string';\n  import FacetsMixin from '../facets.mixin';\n  import { facetsXModule } from '../../x-module';\n  import SelectedFilters from './selected-filters.vue';\n\n  /**\n   * Custom interface to provide a slot name to a Filter.\n   *\n   * @internal\n   */\n  interface RenderFilter {\n    slotName: string;\n    selectedFilter: Filter;\n  }\n\n  /**\n   * This component renders a list of selected filters from every facet, or from the facet\n   * ids passed as property. It uses the SelectedFilters component (state).\n   *\n   * It provides two slots: a scoped one which name is the filter facet id; and a default one.\n   * Both exposes the filter and renders the filter label by default.\n   *\n   * The property \"alwaysVisible\" handles if the component is rendered if no filters are selected.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { SelectedFilters },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class SelectedFiltersList extends FacetsMixin {\n    /**\n     * Animation component that will be used to animate the selected filters list.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue | string;\n\n    /**\n     * Transforms a dictionary of Filters including the slot name.\n     *\n     * @param selectedFilters - A list of selected filters without slot name.\n     *\n     * @returns A dictionary of facets with the slot name.\n     *\n     * @internal\n     */\n    protected mapSlot(selectedFilters: Filter[]): RenderFilter[] {\n      return selectedFilters.map(filter => ({\n        slotName: isFacetFilter(filter) ? toKebabCase(filter.facetId as string) : 'default',\n        selectedFilter: filter\n      }));\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nThis component renders a list of selected filters from every facet, or from the facets which facets\nids are passed as property. It uses the SelectedFilters component (state).\n\nIt provides two slots: a scoped one which name is the filter facet id; and a default one. Both\nexposes the filter and renders the filter label by default.\n\nThe property \"alwaysVisible\" handles if the component is rendered if no filters are selected.\n\n### Default usage\n\n```vue\n<template>\n  <SelectedFiltersList />\n</template>\n\n<script>\n  import { SelectedFiltersList } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      SelectedFiltersList\n    }\n  };\n</script>\n```\n\n### Customized usage\n\n```vue\n<template>\n  <SelectedFiltersList #default=\"{ filter }\">Default: {{ filter.label }}</SelectedFiltersList>\n</template>\n\n<script>\n  import { SelectedFilters } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      SelectedFilters\n    }\n  };\n</script>\n```\n\n```vue\n<template>\n  <SelectedFiltersList>\n    <template #default=\"{ filter }\">Default: {{ filter.label }}</template>\n    <template #brand_facet=\"{ filter }\">Brand: {{ filter.label }}</template>\n    <template #age_facet=\"{ filter }\">Age: {{ filter.label }}</template>\n    <template #price_facet=\"{ filter }\">Price: {{ filter.label }}</template>\n  </SelectedFiltersList>\n</template>\n\n<script>\n  import { SelectedFilters } from '@empathyco/x-components/facets';\n\n  export default {\n    components: {\n      SelectedFilters\n    }\n  };\n</script>\n```\n\n#### Always visible\n\nIf \"alwaysVisible\" is true, the component is rendered no matter if there are some filter selected.\nIf \"alwaysVisible\" is false (default), the component is rendered if there are some filter selected.\n\n```vue\n<SelectedFiltersList :alwaysVisible=\"true\" />\n```\n\nOutput:\n\n```html\n<div class=\"x-selected-filters\">\n  <ul class=\"x-selected-filters-list\" data-test=\"selected-filters-list\"></ul>\n</div>\n```\n\n#### Providing an array of facet ids\n\nIn this example, the selected filters computed are the ones that match the facet ids passed as\nproperties.\n\n```vue\n<SelectedFilters :facetsIds=\"['brand_facet', 'gender_facet']\" />\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Filter } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin, XProvide } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils';\n  import { facetsXModule } from '../../x-module';\n  import { dynamicPropsMixin } from '../../../../components/dynamic-props.mixin';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Component that slices a list of filters and returns them using the default scoped slot,\n   * allowing the user to show the full list of them or slicing them again using the\n   * show more/less buttons.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule), dynamicPropsMixin(['buttonClass'])]\n  })\n  export default class SlicedFilters extends mixins(FiltersInjectionMixin) {\n    /**\n     * The maximum number of filters to show.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected max!: number;\n\n    /** For showing the remaining filters. */\n    public showMoreFilters = true;\n\n    /**\n     * Show the buttons template when length filters is greater than property max.\n     *\n     * @returns Boolean if length filters is greater than property max.\n     * @internal\n     */\n    protected get showButton(): boolean {\n      return this.renderedFilters.length > this.max;\n    }\n\n    /**\n     * Sliced the array of filters depends on click button show more.\n     *\n     * @returns Array of sliced filters or all filters.\n     * @internal\n     */\n    @XProvide('filters')\n    public get slicedFilters(): Filter[] {\n      return this.showMoreFilters ? this.renderedFilters.slice(0, this.max) : this.renderedFilters;\n    }\n\n    /**\n     * The difference between length filters and max to show.\n     *\n     * @returns Number of remaining filters to show.\n     * @internal\n     */\n    protected get difference(): number {\n      return this.renderedFilters.length - this.max;\n    }\n\n    /**\n     * Show or hide the remaining filters. It also emits a Vue event based on the clicked button.\n     *\n     * @param event - The click event.\n     *\n     * @internal\n     */\n    protected toggleShowMoreFilters(event: MouseEvent): void {\n      this.showMoreFilters = !this.showMoreFilters;\n      this.$emit(this.showMoreFilters ? 'click:show-less' : 'click:show-more', event);\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The classes to be added to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-sliced-filters--is-sliced': this.showButton\n      };\n    }\n  }\n","<template>\n  <div class=\"x-sliced-filters\" :class=\"cssClasses\" data-test=\"filters-show-more\">\n    <!--\n      @slot (Required) Sliced filters content.\n        @binding {Filter[]} slicedFilters - Sliced filters..\n    -->\n    <slot :slicedFilters=\"slicedFilters\" />\n    <template v-if=\"showButton\">\n      <button\n        v-if=\"showMoreFilters\"\n        @click=\"toggleShowMoreFilters\"\n        class=\"x-facet-filter x-sliced-filters__button x-sliced-filters__button--show-more\"\n        :class=\"buttonClass\"\n        data-test=\"sliced-filters-show-more-button\"\n      >\n        <!--\n          @slot Button show more filters.\n            @binding {number} difference - The difference between the filters and max to show.\n        -->\n        <slot name=\"show-more\" :difference=\"difference\">\n          Show\n          <span data-test=\"show-more-amount\">{{ difference }}</span>\n          more filters\n        </slot>\n      </button>\n      <button\n        v-else\n        @click=\"toggleShowMoreFilters\"\n        class=\"x-facet-filter x-sliced-filters__button x-sliced-filters__button--show-less\"\n        :class=\"buttonClass\"\n        data-test=\"sliced-filters-show-less-button\"\n      >\n        <!--\n          @slot Button show less filters.\n            @binding {number} difference - The difference between the filters and max to show.\n        -->\n        <slot name=\"show-less\" :difference=\"difference\">\n          Show\n          <span data-test=\"show-less-amount\">{{ difference }}</span>\n          less filters\n        </slot>\n      </button>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Filter } from '@empathyco/x-types';\n  import { mixins } from 'vue-class-component';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { xComponentMixin, XProvide } from '../../../../components';\n  import { VueCSSClasses } from '../../../../utils';\n  import { facetsXModule } from '../../x-module';\n  import { dynamicPropsMixin } from '../../../../components/dynamic-props.mixin';\n  import FiltersInjectionMixin from './filters-injection.mixin';\n\n  /**\n   * Component that slices a list of filters and returns them using the default scoped slot,\n   * allowing the user to show the full list of them or slicing them again using the\n   * show more/less buttons.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(facetsXModule), dynamicPropsMixin(['buttonClass'])]\n  })\n  export default class SlicedFilters extends mixins(FiltersInjectionMixin) {\n    /**\n     * The maximum number of filters to show.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected max!: number;\n\n    /** For showing the remaining filters. */\n    public showMoreFilters = true;\n\n    /**\n     * Show the buttons template when length filters is greater than property max.\n     *\n     * @returns Boolean if length filters is greater than property max.\n     * @internal\n     */\n    protected get showButton(): boolean {\n      return this.renderedFilters.length > this.max;\n    }\n\n    /**\n     * Sliced the array of filters depends on click button show more.\n     *\n     * @returns Array of sliced filters or all filters.\n     * @internal\n     */\n    @XProvide('filters')\n    public get slicedFilters(): Filter[] {\n      return this.showMoreFilters ? this.renderedFilters.slice(0, this.max) : this.renderedFilters;\n    }\n\n    /**\n     * The difference between length filters and max to show.\n     *\n     * @returns Number of remaining filters to show.\n     * @internal\n     */\n    protected get difference(): number {\n      return this.renderedFilters.length - this.max;\n    }\n\n    /**\n     * Show or hide the remaining filters. It also emits a Vue event based on the clicked button.\n     *\n     * @param event - The click event.\n     *\n     * @internal\n     */\n    protected toggleShowMoreFilters(event: MouseEvent): void {\n      this.showMoreFilters = !this.showMoreFilters;\n      this.$emit(this.showMoreFilters ? 'click:show-less' : 'click:show-more', event);\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The classes to be added to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-sliced-filters--is-sliced': this.showButton\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Example\n\nThe sliced filters component, takes a list of filters, and the maximum number of filters to render\nas prop. Then, it slices the list of filters using the `max` prop, and returns this new filters list\nusing the default scoped slot.\n\nThe user can click the show more button if he wants to see the full list of filters, or the show\nless button when he wants to reset the filters. This buttons text or icons can be configured via\nslot too. They receive a `difference` prop which can be useful for writing friendlier messages.\n\nThis component is usually integrated with the `Facets` and `Filters` component. It is useful when\nthere are lots of available filters for a single facet, helping to improve the app performance, as\nless nodes are rendered.\n\n### Important\n\nThe component has two ways of receive the filters list, it can be injected by another component or\nbe send it as a prop. If the component doesnt have a parent component that receive and exposed a\nfilters list to their children, it is mandatory to send it as prop.\n\n### Basic usage\n\n```vue\n<template>\n  <Facets v-slot=\"{ facet }\">\n    <SlicedFilters :filters=\"facet.filters\" :max=\"4\">\n      <template #default=\"{ slicedFilters }\">\n        <Filters :items=\"slicedFilters\" v-slot=\"{ filter }\">\n          <SimpleFilter :filter=\"filter\" />\n        </Filters>\n      </template>\n      <template #show-more=\"{ difference }\">\n        Show\n        <span data-test=\"show-more-amount\">{{ difference }}</span>\n        more filters\n      </template>\n      <template #show-less=\"{ difference }\">\n        Show\n        <span data-test=\"show-less-amount\">{{ difference }}</span>\n        less filters\n      </template>\n    </SlicedFilters>\n  </Facets>\n</template>\n<script>\n  import { BaseShowMoreFilters } from '@empathyco/x-components';\n  import { Facets, SimpleFilter, Filters } from '@empathyco/x-components';\n\n  export default {\n    components: {\n      Facets,\n      BaseShowMoreFilters,\n      Filters,\n      SimpleFilter\n    }\n  };\n</script>\n```\n\n> **Using injection**: It can receive the filters list by injection. It only works if it has a\n> parent component that receives and exposes the filters list. Using the injection, It is not\n> necessary to send the prop to the child components, it has to be send it in the parent component ,\n> the rest of components will inject this list.\n\n```vue\n<Facets v-slot=\"{ facet }\">\n  <SlicedFilters :filters=\"facet.filters\" :max=\"4\">\n      <Filters v-slot=\"{ filter }\">\n        <SimpleFilter :filter=\"filter\"/>\n      </Filters>\n    <template #show-more=\"{ difference }\">Show {{ difference }} more filters</template>\n    <template #show-less=\"{ difference }\">Show {{ difference }} less filters</template>\n  </SlicedFilters>\n</Facets>\n```\n\n### Customizing the items with classes\n\nThe `buttonClass` prop can be used to add classes to the show more/less buttons.\n\n```vue live\n<Facets v-slot=\"{ facet }\">\n  <SlicedFilters :filters=\"facet.filters\" :max=\"4\" buttonClass=\"x-facet-filter-lg\">\n    <Filters v-slot=\"{ filter }\">\n      <SimpleFilter :filter=\"filter\"/>\n    </Filters>\n    <template #show-more=\"{ difference }\">Show {{ difference }} more filters</template>\n    <template #show-less=\"{ difference }\">Show {{ difference }} less filters</template>\n  </SlicedFilters>\n</Facets>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Component from 'vue-class-component';\n  import { xComponentMixin } from '../../../components';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { VueCSSClasses } from '../../../utils';\n  import { XEventsTypes } from '../../../wiring';\n  import { facetsXModule } from '../x-module';\n  import FacetsMixin from './facets.mixin';\n\n  /**\n   * Renders a simple button, emitting the needed events when clicked.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class ClearFilters extends FacetsMixin {\n    /**\n     * The events that will be emitted when the button clear filters is clicked.\n     *\n     * @returns The events to be emitted when the button clear filters is clicked.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return this.facetsIds\n        ? {\n            UserClickedClearAllFilters: this.facetsIds\n          }\n        : {\n            UserClickedClearAllFilters: undefined\n          };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-clear-filters--has-not-selected-filters': !this.hasSelectedFilters,\n        'x-clear-filters--has-selected-filters': this.hasSelectedFilters\n      };\n    }\n  }\n","<template>\n  <BaseEventButton\n    v-if=\"isVisible\"\n    class=\"x-clear-filters x-button\"\n    data-test=\"clear-filters\"\n    :disabled=\"!hasSelectedFilters\"\n    :events=\"events\"\n    :class=\"cssClasses\"\n  >\n    <slot :selectedFilters=\"selectedFilters\">Clear Filters ({{ selectedFilters.length }})</slot>\n  </BaseEventButton>\n</template>\n\n<script lang=\"ts\">\n  import Component from 'vue-class-component';\n  import { xComponentMixin } from '../../../components';\n  import BaseEventButton from '../../../components/base-event-button.vue';\n  import { VueCSSClasses } from '../../../utils';\n  import { XEventsTypes } from '../../../wiring';\n  import { facetsXModule } from '../x-module';\n  import FacetsMixin from './facets.mixin';\n\n  /**\n   * Renders a simple button, emitting the needed events when clicked.\n   *\n   * @remarks It extends {@link FacetsMixin}.\n   *\n   * @public\n   */\n  @Component({\n    components: { BaseEventButton },\n    mixins: [xComponentMixin(facetsXModule)]\n  })\n  export default class ClearFilters extends FacetsMixin {\n    /**\n     * The events that will be emitted when the button clear filters is clicked.\n     *\n     * @returns The events to be emitted when the button clear filters is clicked.\n     * @internal\n     */\n    protected get events(): Partial<XEventsTypes> {\n      return this.facetsIds\n        ? {\n            UserClickedClearAllFilters: this.facetsIds\n          }\n        : {\n            UserClickedClearAllFilters: undefined\n          };\n    }\n\n    /**\n     * Dynamic CSS classes to apply to the component.\n     *\n     * @returns The dynamic CSS classes to apply to the component.\n     * @internal\n     */\n    protected get cssClasses(): VueCSSClasses {\n      return {\n        'x-clear-filters--has-not-selected-filters': !this.hasSelectedFilters,\n        'x-clear-filters--has-selected-filters': this.hasSelectedFilters\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Examples\n\nThis component renders a button, which on clicked emits the `UserClickedClearAllFilters` or\n`UserClickedClearAllFilters` event.\n\n### Basic usage\n\n```vue\n<ClearFilters />\n```\n\n### Customizing its contents\n\nIn this example, show the custom message in button.\n\n```vue\n<ClearFilters v-slot=\"{ selectedFilters }\">\n  Delete {{ selectedFilters.length }} selected\n</ClearFilters>\n```\n\nIn this example, show the custom message in button with always visible a true and list of facets\nids.\n\n```vue\n<ClearFilters v-slot=\"{ selectedFilters }\" :alwaysVisible=\"true\" :facetsIds=\"facetsIds\">\n  Delete {{ selectedFilters.length }} selected\n</ClearFilters>\n```\n\n## Events\n\nA list of events that the component will emit:\n\n- `UserClickedClearAllFilters`: the event is emitted after the user clicks the button to clear a\n  certain facets filter. The event payload is the id of the facets that are going to be cleared.\n- `UserClickedClearAllFilters`: the event is emitted after the user clicks the button. The event\n  payload is undefined.\n</docs>\n","\n\n\n\n\n\n\n\n\n\n  import { Filter } from '@empathyco/x-types';\n  import { BasePriceFilterLabel } from '@empathyco/x-components';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      BasePriceFilterLabel\n    }\n  })\n  export default class ResultComponent extends Vue {\n    @Prop()\n    public filter!: Filter;\n  }\n","<template>\n  <BasePriceFilterLabel\n    :filter=\"filter\"\n    :lessThan=\"$t('priceFilter.lessThan')\"\n    :fromTo=\"$t('priceFilter.fromTo')\"\n    :from=\"$t('priceFilter.from')\"\n  />\n</template>\n\n<script lang=\"ts\">\n  import { Filter } from '@empathyco/x-types';\n  import { BasePriceFilterLabel } from '@empathyco/x-components';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      BasePriceFilterLabel\n    }\n  })\n  export default class ResultComponent extends Vue {\n    @Prop()\n    public filter!: Filter;\n  }\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n  import { FacetFilter } from '@empathyco/x-types';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n\n  @Component\n  export default class FacetSelectedFilters extends Vue {\n    @Prop({ required: true })\n    public selectedFilters!: FacetFilter[];\n  }\n","<template>\n  <span\n    v-if=\"selectedFilters.length > 0\"\n    :class=\"{ 'x-badge-circle': $x.selectedFilters.length <= 9 }\"\n    class=\"x-badge x-badge-auxiliary\"\n  >\n    {{ selectedFilters.length }}\n  </span>\n</template>\n\n<script lang=\"ts\">\n  import { FacetFilter } from '@empathyco/x-types';\n  import { Component, Prop, Vue } from 'vue-property-decorator';\n\n  @Component\n  export default class FacetSelectedFilters extends Vue {\n    @Prop({ required: true })\n    public selectedFilters!: FacetFilter[];\n  }\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { MinusIcon, PlusIcon } from '@empathyco/x-components';\n  import { SlicedFilters } from '@empathyco/x-components/facets';\n\n  @Component({\n    components: {\n      MinusIcon,\n      PlusIcon,\n      SlicedFilters\n    }\n  })\n  export default class CustomSlicedFilters extends Vue {}\n","<template>\n  <SlicedFilters v-bind=\"$attrs\" buttonClass=\"x-facet-filter-lg x-mt-8 x-w-full\">\n    <template #show-more>\n      <PlusIcon class=\"x-icon-lg\" />\n      {{ $t('filters.showMore') }}\n    </template>\n    <template #show-less>\n      <MinusIcon class=\"x-icon-lg\" />\n      {{ $t('filters.showLess') }}\n    </template>\n    <slot />\n  </SlicedFilters>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import { MinusIcon, PlusIcon } from '@empathyco/x-components';\n  import { SlicedFilters } from '@empathyco/x-components/facets';\n\n  @Component({\n    components: {\n      MinusIcon,\n      PlusIcon,\n      SlicedFilters\n    }\n  })\n  export default class CustomSlicedFilters extends Vue {}\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseHeaderTogglePanel,\n    StaggeredFadeAndSlide,\n    CheckboxUnselectedIcon,\n    CheckboxSelectedIcon\n  } from '@empathyco/x-components';\n  import {\n    SimpleFilter,\n    HierarchicalFilter,\n    AllFilter,\n    Facets,\n    SelectedFilters,\n    FiltersList,\n    NumberRangeFilter,\n    FiltersSearch\n  } from '@empathyco/x-components/facets';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import CustomHeaderTogglePanel from '../../custom-header-toggle-panel.vue';\n  import PriceFilterLabel from './price-filter-label.vue';\n  import FacetSelectedFilters from './facet-selected-filters.vue';\n  import CustomSlicedFilters from './custom-sliced-filters.vue';\n\n  @Component({\n    components: {\n      AllFilter,\n      BaseHeaderTogglePanel,\n      CheckboxUnselectedIcon,\n      CheckboxSelectedIcon,\n      CustomHeaderTogglePanel,\n      CustomSlicedFilters,\n      Facets,\n      FiltersList,\n      FiltersSearch,\n      HierarchicalFilter,\n      NumberRangeFilter,\n      PriceFilterLabel,\n      SelectedFilters,\n      SimpleFilter,\n      StaggeredFadeAndSlide,\n      FacetSelectedFilters\n    }\n  })\n  export default class CustomFacets extends Vue {\n    protected staggeredFadeAndSlide = StaggeredFadeAndSlide;\n  }\n","<template>\n  <Facets>\n    <template #default=\"{ facet, selectedFilters }\">\n      <CustomHeaderTogglePanel\n        :data-test=\"facet.label\"\n        class=\"x-border-0 x-border-b x-border-neutral-10\"\n      >\n        <template #header>\n          <span class=\"x-title3\">{{ $t(`facets.${facet.label}`) }}</span>\n          <FacetSelectedFilters :selectedFilters=\"selectedFilters\" />\n        </template>\n        <template #default>\n          <AllFilter\n            v-slot=\"{ isSelected }\"\n            :facet=\"facet\"\n            class=\"x-facet-filter-lg x-mb-8 x-w-full\"\n          >\n            <CheckboxSelectedIcon v-if=\"isSelected\" class=\"x-icon-lg\" />\n            <CheckboxUnselectedIcon v-else class=\"x-icon-lg\" />\n            <span>{{ $t('filters.all') }}</span>\n          </AllFilter>\n\n          <CustomSlicedFilters :max=\"6\" :filters=\"facet.filters\" class=\"x-pb-24\">\n            <FiltersList\n              v-slot=\"{ filter }\"\n              :animation=\"staggeredFadeAndSlide\"\n              class=\"x-flex x-flex-col x-gap-8\"\n            >\n              <SimpleFilter :filter=\"filter\" class=\"x-facet-filter-lg x-w-full\">\n                <template #label>\n                  <CheckboxSelectedIcon v-if=\"filter.selected\" class=\"x-icon-lg\" />\n                  <CheckboxUnselectedIcon v-else class=\"x-icon-lg\" />\n                  <span class=\"x-filter__label\">{{ filter.label }}</span>\n                  <span class=\"x-filter__count\">({{ filter.totalResults }})</span>\n                </template>\n              </SimpleFilter>\n            </FiltersList>\n          </CustomSlicedFilters>\n        </template>\n      </CustomHeaderTogglePanel>\n    </template>\n\n    <template #hierarchical-facet=\"{ facet, selectedFilters }\">\n      <CustomHeaderTogglePanel\n        :data-test=\"facet.label\"\n        class=\"x-border-0 x-border-b x-border-neutral-10\"\n      >\n        <template #header>\n          <span class=\"x-title3\">{{ $t(`facets.${facet.label}`) }}</span>\n          <FacetSelectedFilters :selectedFilters=\"selectedFilters\" />\n        </template>\n        <template #default>\n          <AllFilter\n            v-slot=\"{ isSelected }\"\n            :facet=\"facet\"\n            class=\"x-facet-filter-lg x-mb-8 x-w-full\"\n          >\n            <CheckboxSelectedIcon v-if=\"isSelected\" class=\"x-icon-lg\" />\n            <CheckboxUnselectedIcon v-else class=\"x-icon-lg\" />\n            <span>{{ $t('filters.all') }}</span>\n          </AllFilter>\n          <CustomSlicedFilters :max=\"6\" :filters=\"facet.filters\" class=\"x-pb-24\">\n            <FiltersList\n              v-slot=\"{ filter }\"\n              :animation=\"staggeredFadeAndSlide\"\n              class=\"x-flex x-flex-col x-gap-8\"\n            >\n              <HierarchicalFilter\n                :filter=\"filter\"\n                childrenFiltersClass=\"x-ml-16 x-mt-8 x-flex x-flex-col x-gap-8\"\n                filterItemClass=\"x-w-full x-facet-filter-lg\"\n              >\n                <template #label=\"{ filter }\">\n                  <CheckboxSelectedIcon v-if=\"filter.selected\" class=\"x-icon-lg\" />\n                  <CheckboxUnselectedIcon v-else class=\"x-icon-lg\" />\n                  <span class=\"x-filter__label\">{{ filter.label }}</span>\n                  <span class=\"x-filter__count\">({{ filter.totalResults }})</span>\n                </template>\n              </HierarchicalFilter>\n            </FiltersList>\n          </CustomSlicedFilters>\n        </template>\n      </CustomHeaderTogglePanel>\n    </template>\n\n    <template #number-range-facet=\"{ facet, selectedFilters }\">\n      <CustomHeaderTogglePanel\n        :data-test=\"facet.label\"\n        class=\"x-border-0 x-border-b x-border-neutral-10\"\n      >\n        <template #header>\n          <span class=\"x-title3\">{{ $t(`facets.${facet.label}`) }}</span>\n          <FacetSelectedFilters :selectedFilters=\"selectedFilters\" />\n        </template>\n        <template #default>\n          <CustomSlicedFilters :max=\"6\" :filters=\"facet.filters\" class=\"x-pb-24\">\n            <FiltersList\n              v-slot=\"{ filter }\"\n              :animation=\"staggeredFadeAndSlide\"\n              class=\"x-flex x-flex-col x-gap-8\"\n            >\n              <NumberRangeFilter :filter=\"filter\" class=\"x-facet-filter-lg x-w-full\">\n                <template #label>\n                  <CheckboxSelectedIcon v-if=\"filter.selected\" class=\"x-icon-lg\" />\n                  <CheckboxUnselectedIcon v-else class=\"x-icon-lg\" />\n                  <PriceFilterLabel :filter=\"filter\" />\n                </template>\n              </NumberRangeFilter>\n            </FiltersList>\n          </CustomSlicedFilters>\n        </template>\n      </CustomHeaderTogglePanel>\n    </template>\n  </Facets>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseHeaderTogglePanel,\n    StaggeredFadeAndSlide,\n    CheckboxUnselectedIcon,\n    CheckboxSelectedIcon\n  } from '@empathyco/x-components';\n  import {\n    SimpleFilter,\n    HierarchicalFilter,\n    AllFilter,\n    Facets,\n    SelectedFilters,\n    FiltersList,\n    NumberRangeFilter,\n    FiltersSearch\n  } from '@empathyco/x-components/facets';\n  import Vue from 'vue';\n  import { Component } from 'vue-property-decorator';\n  import CustomHeaderTogglePanel from '../../custom-header-toggle-panel.vue';\n  import PriceFilterLabel from './price-filter-label.vue';\n  import FacetSelectedFilters from './facet-selected-filters.vue';\n  import CustomSlicedFilters from './custom-sliced-filters.vue';\n\n  @Component({\n    components: {\n      AllFilter,\n      BaseHeaderTogglePanel,\n      CheckboxUnselectedIcon,\n      CheckboxSelectedIcon,\n      CustomHeaderTogglePanel,\n      CustomSlicedFilters,\n      Facets,\n      FiltersList,\n      FiltersSearch,\n      HierarchicalFilter,\n      NumberRangeFilter,\n      PriceFilterLabel,\n      SelectedFilters,\n      SimpleFilter,\n      StaggeredFadeAndSlide,\n      FacetSelectedFilters\n    }\n  })\n  export default class CustomFacets extends Vue {\n    protected staggeredFadeAndSlide = StaggeredFadeAndSlide;\n  }\n</script>\n","<template>\n  <div class=\"x-flex x-items-center x-gap-8\">\n    <SlidingPanel\n      class=\"x-sliding-panel-show-buttons-on-hover\"\n      :showButtons=\"!isTouchable\"\n      buttonClass=\"x-button-lead x-button-circle x-button-ghost x-p-0\"\n      scrollContainerClass=\"desktop:x-sliding-panel-fade\"\n      :resetOnContentChange=\"false\"\n    >\n      <template #sliding-panel-left-button>\n        <ChevronLeftIcon class=\"x-icon-lg\" />\n      </template>\n      <SelectedFiltersList\n        class=\"x-flex-no-shrink x-flex x-flex-row x-flex-wrap x-gap-8 max-desktop:x-pl-16\"\n      >\n        <template #default=\"{ filter }\">\n          <SimpleFilter\n            class=\"x-tag x-tag-auxiliary x-tag-outlined x-selected x-rounded-full\"\n            :filter=\"filter\"\n          >\n            <template #label=\"{ filter }\">\n              {{ filter.label }}\n              <CrossTinyIcon />\n            </template>\n          </SimpleFilter>\n        </template>\n\n        <template #price=\"{ filter }\">\n          <NumberRangeFilter\n            class=\"x-tag x-tag-auxiliary x-tag-outlined x-selected x-rounded-full\"\n            :filter=\"filter\"\n          >\n            <template #label=\"{ filter }\">\n              <PriceFilterLabel :filter=\"filter\" />\n              <CrossTinyIcon />\n            </template>\n          </NumberRangeFilter>\n        </template>\n      </SelectedFiltersList>\n      <template #sliding-panel-right-button>\n        <ChevronRightIcon class=\"x-icon-lg\" />\n      </template>\n    </SlidingPanel>\n\n    <ClearFilters\n      v-if=\"isDesktopOrGreater\"\n      v-slot=\"{ selectedFilters }\"\n      data-test=\"clear-filters-toolbar\"\n      class=\"x-button-lead x-button-sm x-button-outlined x-flex-none x-rounded-full\"\n      :alwaysVisible=\"false\"\n    >\n      {{ $t('selectedFilters.clear', { selectedFiltersNumber: selectedFilters.length }) }}\n    </ClearFilters>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import {\n    ClearFilters,\n    NumberRangeFilter,\n    SelectedFiltersList,\n    SimpleFilter\n  } from '@empathyco/x-components/facets';\n  import { defineComponent } from 'vue';\n  import {\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    CrossTinyIcon,\n    SlidingPanel\n  } from '@empathyco/x-components';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import PriceFilterLabel from './price-filter-label.vue';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      CrossTinyIcon,\n      ClearFilters,\n      NumberRangeFilter,\n      PriceFilterLabel,\n      SelectedFiltersList,\n      SlidingPanel,\n      SimpleFilter\n    },\n    setup() {\n      const { isTabletOrLess, isDesktopOrGreater, isTouchable } = useDevice();\n      return {\n        isTabletOrLess,\n        isDesktopOrGreater,\n        isTouchable\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    ClearFilters,\n    NumberRangeFilter,\n    SelectedFiltersList,\n    SimpleFilter\n  } from '@empathyco/x-components/facets';\n  import { defineComponent } from 'vue';\n  import {\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    CrossTinyIcon,\n    SlidingPanel\n  } from '@empathyco/x-components';\n  import { useDevice } from '../../../composables/use-device.composable';\n  import PriceFilterLabel from './price-filter-label.vue';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      CrossTinyIcon,\n      ClearFilters,\n      NumberRangeFilter,\n      PriceFilterLabel,\n      SelectedFiltersList,\n      SlidingPanel,\n      SimpleFilter\n    },\n    setup() {\n      const { isTabletOrLess, isDesktopOrGreater, isTouchable } = useDevice();\n      return {\n        isTabletOrLess,\n        isDesktopOrGreater,\n        isTouchable\n      };\n    }\n  });\n","import { RelatedTag, RelatedTagsRequest } from '@empathyco/x-types';\n// eslint-disable-next-line max-len\nimport { createFetchAndSaveActions } from '../../../../store/utils/fetch-and-save-action.utils';\nimport { RelatedTagsActionContext } from '../types';\n\nconst { fetchAndSave, cancelPrevious } = createFetchAndSaveActions<\n  RelatedTagsActionContext,\n  RelatedTagsRequest | null,\n  RelatedTag[]\n>({\n  fetch({ dispatch }, request) {\n    return dispatch('fetchRelatedTags', request);\n  },\n  onSuccess({ commit }, relatedTags) {\n    commit('setRelatedTags', relatedTags);\n  }\n});\n\n/**\n * Default implementation for {@link RelatedTagsActions.fetchAndSaveRelatedTags} action.\n *\n * @public\n */\nexport const fetchAndSaveRelatedTags = fetchAndSave;\n\n/**\n * Default implementation for {@link RelatedTagsActions.fetchAndSaveRelatedTags} action.\n *\n * @public\n */\nexport const cancelFetchAndSaveRelatedTags = cancelPrevious;\n","import { RelatedTag } from '@empathyco/x-types';\nimport { UrlParams } from '../../../../types/url-params';\nimport { RelatedTagsXStoreModule } from '../types';\n\n/**\n * Helper method which creates the {@link RelatedTag} entity from the string array `tag` of the url.\n *\n * @param tags - List of tags from the url.\n * @param query - Query from the url.\n *\n * @returns A list of {@link RelatedTag | related tags}.\n */\nfunction createRelatedTags(tags: string[], query: string): RelatedTag[] {\n  return tags.map(tag => ({\n    tag,\n    modelName: 'RelatedTag',\n    query: query ? `${query} ${tag}` : ''\n  }));\n}\n\n/**\n * Default implementation for the {@link RelatedTagsActions.setUrlParams}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param urlParams - The url params from the url.\n *\n * @public\n */\nexport const setUrlParams: RelatedTagsXStoreModule['actions']['setUrlParams'] = (\n  { commit },\n  { query, tag }: UrlParams\n) => {\n  commit('setSelectedRelatedTags', createRelatedTags(tag, query));\n  commit('setQuery', query);\n};\n","import { createRelatedTagsQueryGetter } from '../../../../store/utils/query.utils';\nimport { RelatedTagsXStoreModule } from '../types';\n/**\n * Default implementation for the {@link RelatedTagsGetters.query} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the related\n * tags' module.\n *\n * @returns The query with the selected related tags concatenated.\n *\n * @public\n */\nexport const query: RelatedTagsXStoreModule['getters']['query'] = createRelatedTagsQueryGetter({\n  getRelatedTags: state => state.selectedRelatedTags\n});\n","import { setQuery } from '../../../store/utils/query.utils';\nimport { setStatus } from '../../../store/utils/status-store.utils';\nimport {\n  cancelFetchAndSaveRelatedTags,\n  fetchAndSaveRelatedTags\n} from './actions/fetch-and-save-related-tags.action';\nimport { fetchRelatedTags } from './actions/fetch-related-tags.action';\nimport { setUrlParams } from './actions/set-url-params.action';\nimport { toggleRelatedTag } from './actions/toggle-related-tag.action';\nimport { query } from './getters/query.getter';\nimport { relatedTags } from './getters/related-tags.getter';\nimport { request } from './getters/request.getter';\nimport { RelatedTagsXStoreModule } from './types';\n\n/**\n * {@link XStoreModule} For the related tags module.\n *\n * @internal\n */\n\nexport const relatedTagsXStoreModule: RelatedTagsXStoreModule = {\n  state: () => ({\n    query: '',\n    relatedTags: [],\n    selectedRelatedTags: [],\n    status: 'initial',\n    config: {\n      maxItemsToRequest: 10\n    },\n    params: {}\n  }),\n  getters: {\n    request,\n    relatedTags,\n    query\n  },\n  mutations: {\n    setQuery,\n    setRelatedTags(state, relatedTags) {\n      state.relatedTags = relatedTags;\n    },\n    setSelectedRelatedTags(state, selectedRelatedTags) {\n      state.selectedRelatedTags = selectedRelatedTags;\n    },\n    setStatus,\n    setParams(state, params) {\n      state.params = params;\n    }\n  },\n  actions: {\n    cancelFetchAndSaveRelatedTags,\n    fetchRelatedTags,\n    fetchAndSaveRelatedTags,\n    toggleRelatedTag,\n    setUrlParams\n  }\n};\n","import { RelatedTagsXStoreModule } from '../types';\n/**\n * Default implementation for the {@link RelatedTagsGetters.request} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the related\n * tags module.\n * @param getters - Current {@link https://vuex.vuejs.org/guide/getters.html | getters} of the\n * related tags module.\n *\n * @returns The related tags request to fetch data from the API.\n *\n * @public\n */\nexport const request: RelatedTagsXStoreModule['getters']['request'] = (\n  { config, params },\n  { query }\n) => {\n  return query.trim()\n    ? {\n        query,\n        rows: config.maxItemsToRequest,\n        start: 0,\n        extraParams: params\n      }\n    : null;\n};\n","import { RelatedTagsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link RelatedTagsGetters.relatedTags} getter.\n *\n * @param state - Current {@link https://vuex.vuejs.org/guide/state.html | state} of the related\n * tags module.\n * @returns The related tags.\n *\n * @public\n */\nexport const relatedTags: RelatedTagsXStoreModule['getters']['relatedTags'] = ({\n  relatedTags,\n  selectedRelatedTags\n}) => [...selectedRelatedTags, ...relatedTags];\n","import { XPlugin } from '../../../../plugins/x-plugin';\nimport { RelatedTagsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link RelatedTagsActions.fetchRelatedTags}.\n *\n * @param _context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param request - The related tags request to make.\n * @returns A Promise of RelatedTag[] that resolves when it fetches related tags.\n *\n * @public\n */\nexport const fetchRelatedTags: RelatedTagsXStoreModule['actions']['fetchRelatedTags'] = (\n  _context,\n  request\n) => {\n  return request ? XPlugin.adapter.relatedTags(request).then(({ relatedTags }) => relatedTags) : [];\n};\n","import { RelatedTag } from '@empathyco/x-types';\nimport { RelatedTagsXStoreModule } from '../types';\n\n/**\n * Default implementation for the {@link RelatedTagsActions.toggleRelatedTag}.\n *\n * @param context - The {@link https://vuex.vuejs.org/guide/actions.html | context} of the actions,\n * provided by Vuex.\n * @param relatedTag - The selected related tag.\n *\n * @public\n */\nexport const toggleRelatedTag: RelatedTagsXStoreModule['actions']['toggleRelatedTag'] = (\n  { commit, state: { selectedRelatedTags } },\n  relatedTag: RelatedTag\n) => {\n  const isRelatedTagSelected = selectedRelatedTags.includes(relatedTag);\n  if (isRelatedTagSelected) {\n    commit(\n      'setSelectedRelatedTags',\n      selectedRelatedTags.filter(rt => rt !== relatedTag)\n    );\n    commit('setRelatedTags', [relatedTag]);\n  } else {\n    commit('setSelectedRelatedTags', [...selectedRelatedTags, relatedTag]);\n    commit('setRelatedTags', []);\n  }\n};\n","import { createStoreEmitters } from '../../../store';\nimport { createEmitterArrayFilter } from '../../../utils/array';\nimport { relatedTagsXStoreModule } from './module';\n\n/**\n * {@link StoreEmitters} For the related-tags module.\n *\n * @internal\n */\nexport const relatedTagsEmitters = createStoreEmitters(relatedTagsXStoreModule, {\n  RelatedTagsChanged: state => state.relatedTags,\n  RelatedTagsRequestUpdated: (_, getters) => getters.request,\n  SelectedRelatedTagsChanged: {\n    selector: state => state.selectedRelatedTags,\n    filter: createEmitterArrayFilter('tag')\n  }\n});\n","import {\n  namespacedWireCommit,\n  namespacedWireDispatch,\n  namespacedWireDispatchWithoutPayload\n} from '../../wiring/namespaced-wires.factory';\nimport { NamespacedWireCommit, NamespacedWireDispatch } from '../../wiring/namespaced-wiring.types';\nimport { createWiring } from '../../wiring/wiring.utils';\n\n/**\n * `relatedTags` {@link XModuleName | XModule name}.\n *\n * @internal\n */\nconst moduleName = 'relatedTags';\n/**\n * WireCommit for {@link RelatedTagsXModule}.\n *\n * @internal\n */\nconst wireCommit: NamespacedWireCommit<typeof moduleName> = namespacedWireCommit(moduleName);\n/**\n * WireDispatch for {@link RelatedTagsXModule}.\n *\n * @internal\n */\nconst wireDispatch: NamespacedWireDispatch<typeof moduleName> = namespacedWireDispatch(moduleName);\n/**\n * WireDispatchWithoutPayload for {@link RelatedTagsXModule}.\n *\n * @internal\n */\nconst wireDispatchWithoutPayload = namespacedWireDispatchWithoutPayload(moduleName);\n\n/**\n * Sets the related tags state `query`.\n *\n * @public\n */\nexport const setRelatedTagsQuery = wireCommit('setQuery');\n\n/**\n * Sets the related tags state `params`.\n *\n * @public\n */\nexport const setRelatedTagsExtraParams = wireCommit('setParams');\n\n/**\n * Requests and stores the related tags.\n *\n * @public\n */\nexport const fetchAndSaveRelatedTagsWire = wireDispatch('fetchAndSaveRelatedTags');\n\n/**\n * Cancels the {@link RelatedTagsActions.fetchAndSaveRelatedTags} request promise.\n *\n * @public\n */\nexport const cancelFetchAndSaveRelatedTagsWire = wireDispatchWithoutPayload(\n  'cancelFetchAndSaveRelatedTags'\n);\n\n/**\n * Sets the selected related tags.\n *\n * @public\n */\nexport const toggleRelatedTagWire = wireDispatch('toggleRelatedTag');\n\n/**\n * Clear the selected related tags.\n *\n * @public\n */\nexport const clearSelectedRelatedTags = wireCommit('setSelectedRelatedTags', []);\n\n/**\n * Clear the related tags query.\n *\n * @public\n */\nexport const clearRelatedTagsQuery = wireCommit('setQuery', '');\n\n/**\n * Saves the params from the url.\n *\n * @public\n */\nexport const setUrlParamsWire = wireDispatch('setUrlParams');\n\n/**\n * Wiring configuration for the {@link RelatedTagsXModule | related tags module}.\n *\n * @internal\n */\nexport const relatedTagsWiring = createWiring({\n  ParamsLoadedFromUrl: {\n    setUrlParamsWire\n  },\n  UserAcceptedAQuery: {\n    setRelatedTagsQuery,\n    clearSelectedRelatedTags\n  },\n  UserPickedARelatedTag: {\n    toggleRelatedTagWire\n  },\n  UserChangedExtraParams: {\n    clearSelectedRelatedTags\n  },\n  RelatedTagsRequestUpdated: {\n    fetchAndSaveRelatedTagsWire\n  },\n  UserClearedQuery: {\n    cancelFetchAndSaveRelatedTagsWire,\n    clearRelatedTagsQuery,\n    clearSelectedRelatedTags\n  },\n  ExtraParamsChanged: {\n    setRelatedTagsExtraParams\n  },\n  UserClickedCloseX: {\n    clearRelatedTagsQuery\n  },\n  UserClickedOutOfMainModal: {\n    clearRelatedTagsQuery\n  }\n});\n","// XModule\nimport { XModule } from '../x-modules.types';\nimport { relatedTagsEmitters } from './store/emitters';\nimport { relatedTagsXStoreModule } from './store/module';\nimport { RelatedTagsXStoreModule } from './store/types';\nimport { relatedTagsWiring } from './wiring';\n\n/**\n * RelatedTags {@link XModule} alias.\n *\n * @public\n */\n\nexport type RelatedTagsXModule = XModule<RelatedTagsXStoreModule>;\n\n/**\n * RelatedTags {@link XModule} implementation. This module is auto-registered as soon as you\n * import any component from the `related-tags` entry point.\n *\n * @public\n */\n\nexport const relatedTagsXModule: RelatedTagsXModule = {\n  name: 'relatedTags',\n  storeModule: relatedTagsXStoreModule,\n  storeEmitters: relatedTagsEmitters,\n  wiring: relatedTagsWiring\n};\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { RelatedTag as RelatedTagModel } from '@empathyco/x-types';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { relatedTagsXModule } from '../x-module';\n\n  /**\n   * This component renders a related tag for a query. A related tag is a descriptive keyword\n   * related to the current query to fine-tune the search. For example, if you are searching\n   * for *lego*, a related tag could be *city*, refining the search with *lego city*.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(relatedTagsXModule)]\n  })\n  export default class RelatedTag extends Vue {\n    /**\n     * Indicates if the curated related tag should be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n    /**\n     * The related tag model data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected relatedTag!: RelatedTagModel;\n    /**\n     * The selected related tags.\n     *\n     * @internal\n     */\n    @State('relatedTags', 'selectedRelatedTags')\n    public selectedRelatedTags!: RelatedTagModel[];\n\n    /**\n     * Blurs the related tag if it is selected.\n     *\n     * @public\n     */\n    protected blurRelatedTag(): void {\n      if (this.isSelected) {\n        (this.$el as HTMLElement).blur();\n      }\n    }\n\n    /**\n     * Handles the click on the button.\n     *\n     * @public\n     */\n    protected clickRelatedTag(): void {\n      this.emitEvents();\n      this.blurRelatedTag();\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'related_tag'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      // We have to emit this events first to avoid the UserPickedARelatedTag wires to change the\n      // isSelected value before emitting this selection events.\n      this.$x.emit(\n        this.isSelected ? 'UserDeselectedARelatedTag' : 'UserSelectedARelatedTag',\n        this.relatedTag,\n        this.createEventMetadata()\n      );\n      this.$x.emit('UserPickedARelatedTag', this.relatedTag, this.createEventMetadata());\n    }\n\n    /**\n     * Check if the related tag is selected or not.\n     *\n     * @returns If the related tag is selected.\n     *\n     * @internal\n     */\n    protected get isSelected(): boolean {\n      return this.selectedRelatedTags.includes(this.relatedTag);\n    }\n\n    /**\n     * Check if the related tag is curated and should be highlighted.\n     *\n     * @returns True if the related tag is curated and should be highlighted.\n     *\n     * @internal\n     */\n    protected get shouldHighlightCurated(): boolean {\n      return this.highlightCurated && (this.relatedTag.isCurated ?? false);\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     *\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-selected': this.isSelected,\n        'x-related-tag--is-selected': this.isSelected,\n        'x-related-tag--is-curated': this.shouldHighlightCurated\n      };\n    }\n  }\n","<template>\n  <button\n    @click=\"clickRelatedTag\"\n    class=\"x-tag x-related-tag\"\n    data-test=\"related-tag\"\n    :class=\"dynamicClasses\"\n  >\n    <!--\n      @slot Custom content that replaces the RelatedTag default content.\n      @binding {RelatedTag} relatedTag - Related tag data.\n      @binding {boolean} isSelected - Related tag status.\n      @binding {boolean} shouldHighlightCurated - True if the curated RTs should be displayed.\n      -->\n    <slot v-bind=\"{ relatedTag, isSelected, shouldHighlightCurated }\">{{ relatedTag.tag }}</slot>\n  </button>\n</template>\n\n<script lang=\"ts\">\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { RelatedTag as RelatedTagModel } from '@empathyco/x-types';\n  import { State } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { VueCSSClasses } from '../../../utils/types';\n  import { WireMetadata } from '../../../wiring/wiring.types';\n  import { relatedTagsXModule } from '../x-module';\n\n  /**\n   * This component renders a related tag for a query. A related tag is a descriptive keyword\n   * related to the current query to fine-tune the search. For example, if you are searching\n   * for *lego*, a related tag could be *city*, refining the search with *lego city*.\n   *\n   * @public\n   */\n  @Component({\n    mixins: [xComponentMixin(relatedTagsXModule)]\n  })\n  export default class RelatedTag extends Vue {\n    /**\n     * Indicates if the curated related tag should be highlighted.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n    /**\n     * The related tag model data.\n     *\n     * @public\n     */\n    @Prop({ required: true })\n    protected relatedTag!: RelatedTagModel;\n    /**\n     * The selected related tags.\n     *\n     * @internal\n     */\n    @State('relatedTags', 'selectedRelatedTags')\n    public selectedRelatedTags!: RelatedTagModel[];\n\n    /**\n     * Blurs the related tag if it is selected.\n     *\n     * @public\n     */\n    protected blurRelatedTag(): void {\n      if (this.isSelected) {\n        (this.$el as HTMLElement).blur();\n      }\n    }\n\n    /**\n     * Handles the click on the button.\n     *\n     * @public\n     */\n    protected clickRelatedTag(): void {\n      this.emitEvents();\n      this.blurRelatedTag();\n    }\n\n    /**\n     * Generates the {@link WireMetadata | event metadata} object omitting the moduleName.\n     *\n     * @returns The {@link WireMetadata} object omitting the moduleName.\n     * @internal\n     */\n    protected createEventMetadata(): Omit<WireMetadata, 'moduleName'> {\n      return {\n        target: this.$el as HTMLElement,\n        feature: 'related_tag'\n      };\n    }\n\n    /**\n     * Emits events when the button is clicked.\n     *\n     * @public\n     */\n    protected emitEvents(): void {\n      // We have to emit this events first to avoid the UserPickedARelatedTag wires to change the\n      // isSelected value before emitting this selection events.\n      this.$x.emit(\n        this.isSelected ? 'UserDeselectedARelatedTag' : 'UserSelectedARelatedTag',\n        this.relatedTag,\n        this.createEventMetadata()\n      );\n      this.$x.emit('UserPickedARelatedTag', this.relatedTag, this.createEventMetadata());\n    }\n\n    /**\n     * Check if the related tag is selected or not.\n     *\n     * @returns If the related tag is selected.\n     *\n     * @internal\n     */\n    protected get isSelected(): boolean {\n      return this.selectedRelatedTags.includes(this.relatedTag);\n    }\n\n    /**\n     * Check if the related tag is curated and should be highlighted.\n     *\n     * @returns True if the related tag is curated and should be highlighted.\n     *\n     * @internal\n     */\n    protected get shouldHighlightCurated(): boolean {\n      return this.highlightCurated && (this.relatedTag.isCurated ?? false);\n    }\n\n    /**\n     * Adds the dynamic css classes to the component.\n     *\n     * @returns The class to be added to the component.\n     *\n     * @internal\n     */\n    protected get dynamicClasses(): VueCSSClasses {\n      return {\n        'x-selected': this.isSelected,\n        'x-related-tag--is-selected': this.isSelected,\n        'x-related-tag--is-curated': this.shouldHighlightCurated\n      };\n    }\n  }\n</script>\n\n<docs lang=\"mdx\">\n## Dynamic classes\n\n`RelatedTag` uses the following dynamic CSS classes so you can style it when is:\n\n- Selected: `x-related-tag--is-selected`.\n- Curated: `x-related-tag--is-curated`.\n\n## Events\n\nThis component emits the following events:\n\n- [`UserDeselectedARelatedTag`](./../../api/x-components.relatedtagsxevents.md)\n- [`UserPickedARelatedTag`](./../../api/x-components.relatedtagsxevents.md)\n- [`UserSelectedARelatedTag`](./../../api/x-components.relatedtagsxevents.md)\n\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend service required\nThe QuerySignals microservice must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nIn this example related tag data is passed as a prop.\n\n_Here you can see how the RelatedTag component is rendered._\n\n```vue live\n<template>\n  <RelatedTag :relatedTag=\"tag\" />\n</template>\n\n<script>\n  import { RelatedTag } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagDemo',\n    components: {\n      RelatedTag\n    },\n    data() {\n      return {\n        tag: {\n          modelName: 'RelatedTag',\n          query: 'high heel',\n          isCurated: false,\n          tag: 'heel'\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with default slot\n\nIn this example, an HTML span element is passed in the `default` slot.\n\n_See how the related tag can be rendered._\n\n```vue live\n<template>\n  <RelatedTag :relatedTag=\"tag\" #default=\"{ relatedTag }\">\n    <span :aria-label=\"relatedTag.tag\">{{ relatedTag.tag }}</span>\n  </RelatedTag>\n</template>\n\n<script>\n  import { RelatedTag } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagDemo',\n    components: {\n      RelatedTag\n    },\n    data() {\n      return {\n        tag: {\n          modelName: 'RelatedTag',\n          query: 'high heel',\n          isCurated: false,\n          tag: 'heel'\n        }\n      };\n    }\n  };\n</script>\n```\n\n### Play with events\n\nIn this example, the [`UserSelectedARelatedTag`](./../../api/x-components.relatedtagsxevents.md)\nevent is implemented, as illustrated by the “Tag” message returned.\n\n_See how the event is triggered when the related tag is clicked._\n\n```vue live\n<template>\n  <RelatedTag :relatedTag=\"tag\" @UserSelectedARelatedTag=\"alertRelatedTag\" />\n</template>\n\n<script>\n  import { RelatedTag } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagDemo',\n    components: {\n      RelatedTag\n    },\n    data() {\n      return {\n        tag: {\n          modelName: 'RelatedTag',\n          query: 'high heel',\n          isCurated: false,\n          tag: 'heel'\n        }\n      };\n    },\n    methods: {\n      alertRelatedTag(relatedTag) {\n        alert(`You have clicked the related tag: ${relatedTag.query}`);\n      }\n    }\n  };\n</script>\n```\n</docs>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { RelatedTag as RelatedTagModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { relatedTagsXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import RelatedTag from './related-tag.vue';\n\n  /**\n   * This component renders a set of [`RelatedTag`](./x-components.related-tag) components by\n   * default to select from after a query is performed to fine-tune search.\n   * For example, if you are searching for *lego*, different related tags could be *city*,\n   * *friends*, or *harry potter*, refining the search with *lego city*, *lego friends*,\n   * or *lego harry potter*.\n   *\n   * @public\n   */\n  @Component({\n    components: { RelatedTag },\n    mixins: [xComponentMixin(relatedTagsXModule), dynamicPropsMixin(['itemClass'])]\n  })\n  export default class RelatedTags extends Vue {\n    /**\n     * Animation component that will be used to animate the suggestion.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of related tags to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Flag to indicate if the curated tags should be displayed different.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n\n    @Getter('relatedTags', 'relatedTags')\n    public storedRelatedTags!: RelatedTagModel[];\n\n    protected get relatedTags(): RelatedTagModel[] {\n      return this.storedRelatedTags.slice(0, this.maxItemsToRender);\n    }\n  }\n","<template>\n  <component\n    :is=\"animation\"\n    v-if=\"relatedTags.length\"\n    tag=\"ul\"\n    class=\"x-related-tags\"\n    data-test=\"related-tags\"\n  >\n    <li\n      v-for=\"relatedTag in relatedTags\"\n      :key=\"relatedTag.query\"\n      class=\"x-related-tags__item\"\n      data-test=\"related-tag-item\"\n    >\n      <!--\n        @slot Custom content that replaces the RelatedTag component.\n        @binding {RelatedTag} relatedTag - Related tag data.\n        @binding {boolean} highlightCurated - True if the curated RTs should be displayed.\n       -->\n      <slot name=\"related-tag\" v-bind=\"{ relatedTag, highlightCurated }\">\n        <RelatedTag\n          :highlightCurated=\"highlightCurated\"\n          :relatedTag=\"relatedTag\"\n          :class=\"itemClass\"\n        >\n          <template #default=\"{ relatedTag, isSelected, shouldHighlightCurated }\">\n            <!-- eslint-disable max-len -->\n            <!--\n              @slot Custom content that replaces the RelatedTag default content.\n              @binding {RelatedTag} relatedTag - Related tag data.\n              @binding {boolean} isSelected - Related tag status.\n              @binding {boolean} shouldHighlightCurated - True if the curated RTs should be displayed.\n            -->\n            <slot\n              name=\"related-tag-content\"\n              v-bind=\"{ relatedTag, isSelected, shouldHighlightCurated }\"\n            />\n          </template>\n        </RelatedTag>\n      </slot>\n    </li>\n  </component>\n</template>\n\n<script lang=\"ts\">\n  import { RelatedTag as RelatedTagModel } from '@empathyco/x-types';\n  import Vue from 'vue';\n  import { Component, Prop } from 'vue-property-decorator';\n  import { Getter } from '../../../components/decorators/store.decorators';\n  import { xComponentMixin } from '../../../components/x-component.mixin';\n  import { relatedTagsXModule } from '../x-module';\n  import { dynamicPropsMixin } from '../../../components/dynamic-props.mixin';\n  import RelatedTag from './related-tag.vue';\n\n  /**\n   * This component renders a set of [`RelatedTag`](./x-components.related-tag) components by\n   * default to select from after a query is performed to fine-tune search.\n   * For example, if you are searching for *lego*, different related tags could be *city*,\n   * *friends*, or *harry potter*, refining the search with *lego city*, *lego friends*,\n   * or *lego harry potter*.\n   *\n   * @public\n   */\n  @Component({\n    components: { RelatedTag },\n    mixins: [xComponentMixin(relatedTagsXModule), dynamicPropsMixin(['itemClass'])]\n  })\n  export default class RelatedTags extends Vue {\n    /**\n     * Animation component that will be used to animate the suggestion.\n     *\n     * @public\n     */\n    @Prop({ default: 'ul' })\n    protected animation!: Vue;\n\n    /**\n     * Number of related tags to be rendered.\n     *\n     * @public\n     */\n    @Prop()\n    protected maxItemsToRender?: number;\n\n    /**\n     * Flag to indicate if the curated tags should be displayed different.\n     *\n     * @public\n     */\n    @Prop({ default: false, type: Boolean })\n    protected highlightCurated!: boolean;\n\n    @Getter('relatedTags', 'relatedTags')\n    public storedRelatedTags!: RelatedTagModel[];\n\n    protected get relatedTags(): RelatedTagModel[] {\n      return this.storedRelatedTags.slice(0, this.maxItemsToRender);\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-related-tags {\n    display: flex;\n    flex-flow: row nowrap;\n    list-style: none;\n  }\n</style>\n\n<docs lang=\"mdx\">\n## See it in action\n\n<!-- prettier-ignore-start -->\n:::warning Backend microservice required\nTo use this component, the QuerySignals microservice must be implemented.\n:::\n<!-- prettier-ignore-end -->\n\nThis example shows how related tags can be rendered without any additional effects.\n\n_Search for a fashion term like \"sandal\" or \"lipstick\"._\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags />\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags\n    }\n  };\n</script>\n```\n\n### Play with props\n\nIn this example, the number of related tags rendered has been limited to 3. A fade and slide effect\nhas been added so that the related tags appear with a delay, then slide upwards and fade.\n\n_Search for a fashion term and see the related tags with the animation effect._\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags :animation=\"'StaggeredFadeAndSlide'\" :maxItemsToRender=\"3\" />\n  </div>\n</template>\n\n<script>\n  import Vue from 'vue';\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n  import { StaggeredFadeAndSlide } from '@empathyco/x-components';\n\n  // Registering the animation as a global component\n  Vue.component('StaggeredFadeAndSlide', StaggeredFadeAndSlide);\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags\n    }\n  };\n</script>\n```\n\n### Play with related-tag slot\n\nIn this example, the [`RelatedTag`](./x-components.related-tag.md) component is passed in the\n`related-tag` slot (although any other component could potentially be passed).\n\n_Search for a fashion term and see how the related tags can be rendered._\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags #related-tag=\"{ relatedTag }\">\n      <RelatedTag :relatedTag=\"relatedTag\" />\n    </RelatedTags>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags, RelatedTag } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags,\n      RelatedTag\n    }\n  };\n</script>\n```\n\n### Play with related-tag-content slot\n\nTo continue the previous example, the [`RelatedTag`](./x-components.related-tag.md) component is\npassed in the `related-tag-content` slot, but in addition, an HTML span tag for the text are also\npassed.\n\n_Search for a fashion term and see how the related tags are rendered._\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags #related-tag-content=\"{ relatedTag }\">\n      <span>{{ relatedTag.tag }}</span>\n    </RelatedTags>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags\n    }\n  };\n</script>\n```\n\n## Extending the component\n\nComponents can be combined and communicate with each other. The `RelatedTags` component can\ncommunicate with the [`SearchInput`](../search-box/x-components.search-input.md) as follows:\n\n_Search for a fashion term and see how the related tags can be rendered._\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags />\n    <ResultsList #result=\"{ item }\">\n      <span class=\"result\">\n        {{ item.name }}\n      </span>\n    </ResultsList>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n  import { ResultsList } from '@empathyco/x-components/search';\n\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags,\n      ResultsList\n    }\n  };\n</script>\n```\n\n## Customizing the related tags with classes\n\nThe `itemClass` prop can be used to add classes to the related tags.\n\n```vue live\n<template>\n  <div>\n    <SearchInput />\n    <RelatedTags #related-tag-content=\"{ relatedTag }\" itemClass=\"x-tag-outlined x-tag-auxiliary\">\n      <span>{{ relatedTag.tag }}</span>\n    </RelatedTags>\n  </div>\n</template>\n\n<script>\n  import { SearchInput } from '@empathyco/x-components/search-box';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n\n  export default {\n    name: 'RelatedTagsDemo',\n    components: {\n      SearchInput,\n      RelatedTags\n    }\n  };\n</script>\n```\n</docs>\n","<template>\n  <SlidingPanel\n    v-if=\"$x.relatedTags.length\"\n    class=\"x-sliding-panel-show-buttons-on-hover\"\n    buttonClass=\"x-button-lead x-button-circle x-button-ghost x-p-0\"\n    scrollContainerClass=\"desktop:x-sliding-panel-fade\"\n    :showButtons=\"!isTouchable\"\n  >\n    <template #sliding-panel-left-button>\n      <ChevronLeftIcon class=\"x-icon-lg\" />\n    </template>\n    <RelatedTags\n      class=\"x-gap-8 x-pl-16 tablet:x-pl-24 desktop:x-pl-0\"\n      :highlightCurated=\"true\"\n      :animation=\"relatedTagsAnimation\"\n      itemClass=\"x-tag-outlined x-rounded-full\"\n    >\n      <template #related-tag-content=\"{ relatedTag, isSelected, shouldHighlightCurated }\">\n        <CuratedCheckIcon v-if=\"shouldHighlightCurated\" />\n        {{ relatedTag.tag }}\n        <CrossTinyIcon v-if=\"isSelected\" />\n        <PlusIcon v-else />\n      </template>\n    </RelatedTags>\n    <template #sliding-panel-right-button>\n      <ChevronRightIcon class=\"x-icon-lg\" />\n    </template>\n  </SlidingPanel>\n</template>\n\n<script lang=\"ts\">\n  import {\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    CrossTinyIcon,\n    PlusIcon,\n    SlidingPanel,\n    StaggeredFadeAndSlide,\n    CuratedCheckIcon\n  } from '@empathyco/x-components';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      CrossTinyIcon,\n      PlusIcon,\n      RelatedTags,\n      SlidingPanel,\n      CuratedCheckIcon\n    },\n\n    setup() {\n      const relatedTagsAnimation = StaggeredFadeAndSlide;\n      const { isTouchable } = useDevice();\n      return {\n        relatedTagsAnimation,\n        isTouchable\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    CrossTinyIcon,\n    PlusIcon,\n    SlidingPanel,\n    StaggeredFadeAndSlide,\n    CuratedCheckIcon\n  } from '@empathyco/x-components';\n  import { RelatedTags } from '@empathyco/x-components/related-tags';\n  import { defineComponent } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n\n  export default defineComponent({\n    components: {\n      ChevronLeftIcon,\n      ChevronRightIcon,\n      CrossTinyIcon,\n      PlusIcon,\n      RelatedTags,\n      SlidingPanel,\n      CuratedCheckIcon\n    },\n\n    setup() {\n      const relatedTagsAnimation = StaggeredFadeAndSlide;\n      const { isTouchable } = useDevice();\n      return {\n        relatedTagsAnimation,\n        isTouchable\n      };\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Vue } from 'vue-property-decorator';\n  import { Spellcheck, SpellcheckButton } from '@empathyco/x-components/search';\n\n  @Component({\n    components: {\n      Spellcheck,\n      SpellcheckButton\n    }\n  })\n  export default class SpellcheckMessage extends Vue {}\n","<template>\n  <Spellcheck\n    v-if=\"$x.totalResults > 0\"\n    #default=\"{ query }\"\n    class=\"x-flex x-flex-col x-items-center x-gap-8 x-bg-neutral-10 x-p-24 x-text-center\"\n  >\n    <p>\n      <i18n class=\"x-text1 x-break-words desktop:x-text1-lg\" path=\"spellcheck.message\" tag=\"span\">\n        <template #query>\n          <span class=\"x-font-bold x-text-auxiliary-50\">\n            {{ query }}\n          </span>\n        </template>\n      </i18n>\n      <SpellcheckButton class=\"x-button-lead x-button-link x-button x-pl-2\" />\n    </p>\n  </Spellcheck>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n  import { Spellcheck, SpellcheckButton } from '@empathyco/x-components/search';\n\n  @Component({\n    components: {\n      Spellcheck,\n      SpellcheckButton\n    }\n  })\n  export default class SpellcheckMessage extends Vue {}\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component\n  export default class NoResultsMessage extends Vue {}\n","<template>\n  <i18n\n    v-if=\"$x.noResults\"\n    class=\"x-no-results-message x-text1 x-flex x-flex-col x-items-center x-gap-8 x-break-words x-bg-neutral-10 x-p-24 x-text-center desktop:x-text1-lg\"\n    path=\"noResults.message\"\n  >\n    <template #query>\n      <span class=\"x-font-bold\">\n        {{ $x.query.search }}\n      </span>\n    </template>\n  </i18n>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component\n  export default class NoResultsMessage extends Vue {}\n</script>\n\n<style lang=\"scss\">\n  .x-no-results-message {\n    > span {\n      width: 100%;\n    }\n  }\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { AutoProgressBar } from '@empathyco/x-components';\n  import { Redirection as RedirectionComponent } from '@empathyco/x-components/search';\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      AutoProgressBar,\n      RedirectionComponent\n    }\n  })\n  export default class Redirection extends Vue {}\n","<template>\n  <RedirectionComponent\n    #default=\"{ redirection, redirect, abortRedirect, isRedirecting, delayInSeconds }\"\n    class=\"x-my-8 x-flex x-flex-col x-items-center x-gap-8 x-bg-neutral-10 x-p-24 x-text-center\"\n    delayInSeconds=\"5\"\n  >\n    <p>\n      {{ $t('redirections.title') }}\n    </p>\n    <a :href=\"redirection.url\">{{ redirection.url }}</a>\n    <div class=\"x-mt-8 x-flex x-gap-32\">\n      <button @click=\"abortRedirect\" class=\"x-button-ghost x-button\">\n        {{ $t('redirections.reject') }}\n      </button>\n      <button @click=\"redirect\" class=\"x-button-lead x-button-ghost x-button\">\n        {{ $t('redirections.accept') }}\n      </button>\n    </div>\n    <AutoProgressBar\n      :isLoading=\"isRedirecting\"\n      :durationInSeconds=\"delayInSeconds\"\n      class=\"x-w-320\"\n    />\n  </RedirectionComponent>\n</template>\n\n<script lang=\"ts\">\n  import { AutoProgressBar } from '@empathyco/x-components';\n  import { Redirection as RedirectionComponent } from '@empathyco/x-components/search';\n  import { Component, Vue } from 'vue-property-decorator';\n\n  @Component({\n    components: {\n      AutoProgressBar,\n      RedirectionComponent\n    }\n  })\n  export default class Redirection extends Vue {}\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BaseIdModalClose, CrossIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n  import { ClearFilters } from '@empathyco/x-components/facets';\n  import CustomFacets from './facets/custom-facets.vue';\n  import Sort from './sort.vue';\n\n  @Component({\n    components: {\n      CustomFacets,\n      Sort,\n      BaseIdModalClose,\n      CrossIcon,\n      ClearFilters\n    }\n  })\n  export default class DesktopAside extends Vue {}\n","<template>\n  <div class=\"x-flex x-min-h-0 x-flex-auto x-flex-col x-bg-neutral-0\">\n    <div class=\"x-flex x-items-center x-border-b x-border-neutral-90 x-p-24 x-pr-32 x-pl-40\">\n      <span class=\"x-title2 x-mr-auto\">\n        {{ $t('facetsPanel.title') }}\n      </span>\n      <BaseIdModalClose class=\"x-button-lead x-button-circle x-button-ghost\" modalId=\"right-aside\">\n        <CrossIcon class=\"x-icon-lg\" />\n      </BaseIdModalClose>\n    </div>\n    <div class=\"x-scroll x-flex-auto x-p-40 x-pr-24 x-pt-0\">\n      <Sort />\n      <CustomFacets v-if=\"$x.totalResults > 0\" />\n    </div>\n    <div class=\"x-flex x-gap-16 x-border-t x-border-neutral-90 x-p-40 x-pt-24 x-pb-16\">\n      <ClearFilters\n        v-slot=\"{ selectedFilters }\"\n        class=\"x-button-lead x-button-outlined x-flex-auto x-rounded-full x-p-24 x-py-12 x-uppercase\"\n        :alwaysVisible=\"false\"\n      >\n        {{ $t('selectedFilters.clear', { selectedFiltersNumber: selectedFilters.length }) }}\n      </ClearFilters>\n      <BaseIdModalClose\n        class=\"x-button-lead x-flex-auto x-rounded-full x-p-24 x-py-12\"\n        modalId=\"right-aside\"\n      >\n        {{ $t('facetsPanel.viewResults', { totalResults: $x.totalResults }) }}\n      </BaseIdModalClose>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { BaseIdModalClose, CrossIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n  import { ClearFilters } from '@empathyco/x-components/facets';\n  import CustomFacets from './facets/custom-facets.vue';\n  import Sort from './sort.vue';\n\n  @Component({\n    components: {\n      CustomFacets,\n      Sort,\n      BaseIdModalClose,\n      CrossIcon,\n      ClearFilters\n    }\n  })\n  export default class DesktopAside extends Vue {}\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BaseIdModalClose, FiltersIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n  import { ClearFilters } from '@empathyco/x-components/facets';\n\n  @Component({\n    components: { BaseIdModalClose, FiltersIcon, ClearFilters }\n  })\n  export default class MobileCloseAside extends Vue {}\n","<template>\n  <div class=\"x-mx-16 x-flex x-gap-16 x-border-t x-border-neutral-10 x-py-24\">\n    <ClearFilters\n      v-slot=\"{ selectedFilters }\"\n      class=\"x-button-lead x-button-outlined x-flex-auto x-rounded-full x-py-12 x-uppercase\"\n      :alwaysVisible=\"false\"\n    >\n      {{ $t('selectedFilters.clear', { selectedFiltersNumber: selectedFilters.length }) }}\n    </ClearFilters>\n    <BaseIdModalClose\n      class=\"x-button-lead x-flex-auto x-rounded-full x-py-12\"\n      modalId=\"aside-modal\"\n    >\n      {{ $t('facetsPanel.viewResults', { totalResults: $x.totalResults }) }}\n    </BaseIdModalClose>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { BaseIdModalClose, FiltersIcon } from '@empathyco/x-components';\n  import { Component, Vue } from 'vue-property-decorator';\n  import { ClearFilters } from '@empathyco/x-components/facets';\n\n  @Component({\n    components: { BaseIdModalClose, FiltersIcon, ClearFilters }\n  })\n  export default class MobileCloseAside extends Vue {}\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { Component, Vue } from 'vue-property-decorator';\n  import { BaseScroll } from '@empathyco/x-components';\n  import MobileCloseAside from '../mobile/mobile-close-aside.vue';\n  import CustomFacets from './facets/custom-facets.vue';\n  import SelectedFilters from './facets/selected-filters.vue';\n  import Sort from './sort.vue';\n\n  @Component({\n    components: {\n      BaseScroll,\n      CustomFacets,\n      MobileCloseAside,\n      SelectedFilters,\n      Sort\n    }\n  })\n  export default class MobileAside extends Vue {}\n","<template>\n  <div v-if=\"$x.totalResults > 0\" class=\"x-flex x-min-h-0 x-flex-auto x-flex-col\">\n    <BaseScroll class=\"x-flex-auto x-p-16 x-pt-0\" :resetOnChange=\"false\">\n      <Sort />\n      <CustomFacets />\n    </BaseScroll>\n    <div class=\"x-flex x-flex-col x-border-t\">\n      <SelectedFilters\n        v-if=\"$x.selectedFilters.length\"\n        class=\"x-flex x-flex-col x-items-stretch x-gap-16 x-py-16\"\n      />\n      <MobileCloseAside />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { Component, Vue } from 'vue-property-decorator';\n  import { BaseScroll } from '@empathyco/x-components';\n  import MobileCloseAside from '../mobile/mobile-close-aside.vue';\n  import CustomFacets from './facets/custom-facets.vue';\n  import SelectedFilters from './facets/selected-filters.vue';\n  import Sort from './sort.vue';\n\n  @Component({\n    components: {\n      BaseScroll,\n      CustomFacets,\n      MobileCloseAside,\n      SelectedFilters,\n      Sort\n    }\n  })\n  export default class MobileAside extends Vue {}\n</script>\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    props: {\n      isCollapsed: {\n        type: Boolean\n      }\n    }\n  });\n","<template>\n  <div\n    class=\"x-collapse-height\"\n    :class=\"{\n      'x-collapse-height--is-collapsed': isCollapsed\n    }\"\n  >\n    <slot />\n  </div>\n</template>\n\n<script>\n  import { defineComponent } from 'vue';\n\n  export default defineComponent({\n    props: {\n      isCollapsed: {\n        type: Boolean\n      }\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .x-collapse-height {\n    display: grid;\n    grid-template-rows: 1fr;\n    overflow: hidden;\n    transition: grid-template-rows 0.35s;\n\n    & > * {\n      min-height: 0;\n      transition: visibility 0.35s;\n      visibility: visible;\n    }\n\n    &--is-collapsed {\n      grid-template-rows: 0fr;\n      & > * {\n        visibility: hidden;\n      }\n    }\n  }\n</style>\n","import { State } from '@empathyco/x-components';\nimport Vue from 'vue';\nimport Component from 'vue-class-component';\nimport { Dictionary } from '@empathyco/x-utils';\nimport { ScrollComponentState } from '@empathyco/x-components/scroll';\nimport { Watch } from 'vue-property-decorator';\n@Component\nexport default class IsScrollingUp extends Vue {\n  protected hasScrolledPastThresholdFlag = false;\n  protected scrollOffset = 100;\n\n  @State('scroll', 'data')\n  public scrollPositionsMap!: Dictionary<ScrollComponentState>;\n  protected get mainScrollPosition(): number {\n    return this.scrollPositionsMap['main-scroll']?.position;\n  }\n\n  @Watch('mainScrollPosition', { deep: true })\n  updateHasScrolledPastThreshold(): void {\n    // TODO change this implementation when the scroll module is fixed. Task EMP-1049\n    const mainScrollData = this.scrollPositionsMap['main-scroll'];\n\n    if (mainScrollData?.hasReachedStart) {\n      this.hasScrolledPastThresholdFlag = false;\n      return;\n    }\n\n    if (mainScrollData?.hasAlmostReachedEnd) {\n      this.hasScrolledPastThresholdFlag = true;\n      return;\n    }\n\n    const isScrollingUp = mainScrollData?.direction === 'UP';\n    if (isScrollingUp || this.mainScrollPosition < this.scrollOffset) {\n      this.hasScrolledPastThresholdFlag = false;\n    } else if (!isScrollingUp && this.mainScrollPosition > this.scrollOffset) {\n      this.hasScrolledPastThresholdFlag = true;\n    }\n  }\n\n  /**\n   * Checks the direction and the position of the scroll.\n   *\n   * @returns True if the user is scrolling up and has scrolled more than\n   * the defined scrollOffset.\n   */\n  protected get hasScrolledPastThreshold(): boolean {\n    return this.hasScrolledPastThresholdFlag;\n  }\n}\n","<template>\n  <CollapseHeightAnimation class=\"x-layout-item\" :isCollapsed=\"hasScrolledPastThreshold\">\n    <div>\n      <LocationProvider location=\"predictive_layer\">\n        <RelatedTags class=\"x-pb-16\" />\n      </LocationProvider>\n      <div v-if=\"$x.query.search\">\n        <MobileToolbar class=\"x-mb-16\" />\n      </div>\n    </div>\n  </CollapseHeightAnimation>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { LocationProvider } from '@empathyco/x-components';\n  import MobileToolbar from '../mobile/mobile-toolbar.vue';\n  import { RelatedTags } from '../search';\n  import CollapseHeightAnimation from '../collapse-height-animation.vue';\n  import IsScrollingUp from '../has-scroll-past-threshold.mixin';\n\n  export default defineComponent({\n    components: {\n      CollapseHeightAnimation,\n      MobileToolbar,\n      LocationProvider,\n      RelatedTags\n    },\n    mixins: [IsScrollingUp],\n    props: {\n      hasSearched: {\n        type: Boolean\n      }\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { LocationProvider } from '@empathyco/x-components';\n  import MobileToolbar from '../mobile/mobile-toolbar.vue';\n  import { RelatedTags } from '../search';\n  import CollapseHeightAnimation from '../collapse-height-animation.vue';\n  import IsScrollingUp from '../has-scroll-past-threshold.mixin';\n\n  export default defineComponent({\n    components: {\n      CollapseHeightAnimation,\n      MobileToolbar,\n      LocationProvider,\n      RelatedTags\n    },\n    mixins: [IsScrollingUp],\n    props: {\n      hasSearched: {\n        type: Boolean\n      }\n    }\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    ArrowLeftIcon,\n    CloseMainModal,\n    LocationProvider,\n    animateTranslate,\n    BaseIdModal\n  } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import { MainScroll, Scroll } from '@empathyco/x-components/scroll';\n  import Main from '../main.vue';\n  import CustomQueryPreview from '../pre-search/custom-query-preview.vue';\n  import ScrollToTop from '../scroll-to-top.vue';\n  import PredictiveLayer from '../predictive-layer/predictive-layer.vue';\n  import SearchBox from '../search-box.vue';\n  import HasSearchedMixin from '../has-searched.mixin';\n  import MyHistoryAside from '../my-history/my-history-aside.vue';\n  import MyHistoryConfirmDisableModal from '../my-history/my-history-confirm-disable-modal.vue';\n  import MobileOpenAside from './mobile-open-aside.vue';\n  import MobileSubHeader from './mobile-sub-header.vue';\n\n  @Component({\n    components: {\n      ArrowLeftIcon,\n      BaseIdModal,\n      CloseMainModal,\n      CustomQueryPreview,\n      LocationProvider,\n      MobileSubHeader,\n      Main,\n      MainScroll,\n      MyHistoryAside,\n      MobileOpenAside,\n      MyHistoryConfirmDisableModal,\n      PredictiveLayer,\n      Scroll,\n      ScrollToTop,\n      SearchBox,\n      MobileAside: () => import('../search').then(m => m.MobileAside),\n      NoResultsMessage: () => import('../search').then(m => m.NoResultsMessage),\n      SpellcheckMessage: () => import('../search').then(m => m.SpellcheckMessage)\n    }\n  })\n  export default class Mobile extends HasSearchedMixin {\n    public filtersAsideAnimation = animateTranslate('bottom');\n    public rightAsideAnimation = animateTranslate('right');\n  }\n","<template>\n  <div\n    class=\"x-layout-container x-layout-max-width-md x-layout-min-margin-16 tablet:x-layout-min-margin-24\"\n  >\n    <div class=\"x-layout-item\">\n      <div class=\"x-flex x-gap-8 x-py-16\">\n        <CloseMainModal class=\"x-button-lead x-button-circle x-button-ghost\">\n          <ArrowLeftIcon class=\"x-icon-lg\" />\n        </CloseMainModal>\n        <SearchBox class=\"x-flex-1\" />\n      </div>\n    </div>\n\n    <div class=\"x-layout-stack x-layout-expand\">\n      <LocationProvider location=\"predictive_layer\" class=\"x-z-10\">\n        <PredictiveLayer />\n      </LocationProvider>\n\n      <!-- Results -->\n      <div class=\"x-flex x-flex-col\">\n        <MobileSubHeader :has-searched=\"hasSearched\" />\n\n        <div v-if=\"$x.query.search\" class=\"x-layout-item\">\n          <LocationProvider location=\"results\">\n            <SpellcheckMessage class=\"x-mb-16\" data-test=\"spellcheck-message\" />\n          </LocationProvider>\n          <NoResultsMessage class=\"x-mb-16\" data-test=\"no-results-message\" />\n        </div>\n\n        <MainScroll>\n          <Scroll id=\"main-scroll\" class=\"x-flex-1\">\n            <LocationProvider location=\"no_query\">\n              <CustomQueryPreview class=\"x-mt-16\" />\n            </LocationProvider>\n\n            <LocationProvider location=\"results\">\n              <div class=\"x-layout-item\">\n                <Main />\n              </div>\n            </LocationProvider>\n          </Scroll>\n        </MainScroll>\n\n        <div class=\"x-layout-overlap x-layout-item x-pointer-events-none\">\n          <div class=\"x-mb-32 x-grid x-grid-cols-12 x-gap-24\">\n            <MobileOpenAside\n              v-if=\"$x.totalResults > 0\"\n              class=\"x-pointer-events-auto x-col-span-8 x-col-start-3 tablet:x-col-span-4 tablet:x-col-start-5\"\n            />\n            <ScrollToTop class=\"x-button-lg x-pointer-events-auto x-col-start-11\" />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- eslint-disable max-len-->\n    <BaseIdModal\n      :animation=\"filtersAsideAnimation\"\n      modalId=\"aside-modal\"\n      contentClass=\"x-mt-64 x-h-[calc(100%-64px)] x-fixed x-flex-1 x-rounded-t-lg x-bg-neutral-0 desktop:x-rounded-none desktop:x-m-0\"\n    >\n      <MobileAside />\n    </BaseIdModal>\n\n    <BaseIdModal\n      key=\"my-history-aside\"\n      :animation=\"rightAsideAnimation\"\n      modalId=\"my-history-aside\"\n      contentClass=\"x-bg-neutral-0\"\n      class=\"x-z-10\"\n    >\n      <MyHistoryAside />\n    </BaseIdModal>\n    <MyHistoryConfirmDisableModal />\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import {\n    ArrowLeftIcon,\n    CloseMainModal,\n    LocationProvider,\n    animateTranslate,\n    BaseIdModal\n  } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import { MainScroll, Scroll } from '@empathyco/x-components/scroll';\n  import Main from '../main.vue';\n  import CustomQueryPreview from '../pre-search/custom-query-preview.vue';\n  import ScrollToTop from '../scroll-to-top.vue';\n  import PredictiveLayer from '../predictive-layer/predictive-layer.vue';\n  import SearchBox from '../search-box.vue';\n  import HasSearchedMixin from '../has-searched.mixin';\n  import MyHistoryAside from '../my-history/my-history-aside.vue';\n  import MyHistoryConfirmDisableModal from '../my-history/my-history-confirm-disable-modal.vue';\n  import MobileOpenAside from './mobile-open-aside.vue';\n  import MobileSubHeader from './mobile-sub-header.vue';\n\n  @Component({\n    components: {\n      ArrowLeftIcon,\n      BaseIdModal,\n      CloseMainModal,\n      CustomQueryPreview,\n      LocationProvider,\n      MobileSubHeader,\n      Main,\n      MainScroll,\n      MyHistoryAside,\n      MobileOpenAside,\n      MyHistoryConfirmDisableModal,\n      PredictiveLayer,\n      Scroll,\n      ScrollToTop,\n      SearchBox,\n      MobileAside: () => import('../search').then(m => m.MobileAside),\n      NoResultsMessage: () => import('../search').then(m => m.NoResultsMessage),\n      SpellcheckMessage: () => import('../search').then(m => m.SpellcheckMessage)\n    }\n  })\n  export default class Mobile extends HasSearchedMixin {\n    public filtersAsideAnimation = animateTranslate('bottom');\n    public rightAsideAnimation = animateTranslate('right');\n  }\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import {\n    BaseIdModalOpen,\n    BaseKeyboardNavigation,\n    CrossTinyIcon,\n    Fade,\n    Highlight,\n    HistoryIcon,\n    SettingsIcon,\n    StaggeredFadeAndSlide,\n    TrashIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { Empathize } from '@empathyco/x-components/empathize';\n  import {\n    ClearHistoryQueries,\n    HistoryQueries,\n    HistoryQuery\n  } from '@empathyco/x-components/history-queries';\n  import { defineComponent, ref } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import { usePredictiveHelpers } from '../../composables/use-predictive-helpers.composable';\n  import DesktopSearchboxAlign from '../desktop/desktop-searchbox-align.vue';\n  import SlidingRecommendations from './sliding-recommendations.vue';\n  import PredictiveIdentifierResults from './predictive-identifier-results.vue';\n  import PredictiveNextQueries from './predictive-next-queries.vue';\n  import PredictivePopularSearches from './predictive-popular-searches.vue';\n  import PredictiveQuerySuggestions from './predictive-query-suggestions.vue';\n\n  export default defineComponent({\n    components: {\n      DesktopSearchboxAlign,\n      MaxDesktopWidthItem,\n      PredictiveQuerySuggestions,\n      PredictivePopularSearches,\n      PredictiveNextQueries,\n      PredictiveIdentifierResults,\n      BaseIdModalOpen,\n      BaseKeyboardNavigation,\n      ClearHistoryQueries,\n      CrossTinyIcon,\n      Fade,\n      Empathize,\n      Highlight,\n      HistoryQuery,\n      HistoryIcon,\n      HistoryQueries,\n      SlidingRecommendations,\n      SettingsIcon,\n      TrashIcon\n    },\n    setup() {\n      const empathizeAnimation = animateScale();\n      const suggestionsAnimation = StaggeredFadeAndSlide;\n\n      const { isDesktopOrGreater, isTabletOrLess } = useDevice();\n\n      const showOverlay = ref(false);\n\n      let previousBodyOverflow = '';\n      let previousHTMLOverflow = '';\n\n      const disableScroll = (): void => {\n        previousBodyOverflow = document.body.style.overflow;\n        previousHTMLOverflow = document.documentElement.style.overflow;\n        document.body.style.overflow = document.documentElement.style.overflow = 'hidden';\n      };\n\n      const enableScroll = (): void => {\n        document.body.style.overflow = previousBodyOverflow;\n        document.documentElement.style.overflow = previousHTMLOverflow;\n      };\n\n      const handleEmpathizeEvent = (event: 'EmpathizeOpened' | 'EmpathizeClosed'): void => {\n        showOverlay.value = event === 'EmpathizeOpened';\n\n        if (showOverlay.value) {\n          disableScroll();\n        } else {\n          enableScroll();\n        }\n      };\n\n      const {\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      } = usePredictiveHelpers();\n\n      return {\n        isDesktopOrGreater,\n        isTabletOrLess,\n        empathizeAnimation,\n        suggestionsAnimation,\n        showOverlay,\n        handleEmpathizeEvent,\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      };\n    }\n  });\n","<template>\n  <div class=\"x-relative x-z-10\">\n    <Empathize\n      @EmpathizeOpened=\"handleEmpathizeEvent('EmpathizeOpened')\"\n      @EmpathizeClosed=\"handleEmpathizeEvent('EmpathizeClosed')\"\n      :animation=\"empathizeAnimation\"\n      class=\"x-layout-item x-absolute x-z-[1] x-w-full x-bg-neutral-0 x-py-4\"\n    >\n      <MaxDesktopWidthItem>\n        <DesktopSearchboxAlign>\n          <div class=\"x-layout-item\">\n            <div v-if=\"showEmpathize || showIdentifierResults\" class=\"x-h-full x-py-12 x-pl-[17px]\">\n              <div class=\"x-block\">\n                <BaseKeyboardNavigation\n                  class=\"x-flex x-items-start x-gap-24\"\n                  :navigationHijacker=\"navigationHijacker\"\n                >\n                  <PredictiveIdentifierResults\n                    v-if=\"showIdentifierResults\"\n                    :animation=\"suggestionsAnimation\"\n                  />\n\n                  <div\n                    v-else-if=\"showEmpathize\"\n                    class=\"x-grid x-grid-cols-4 x-flex-row x-gap-4\"\n                    :class=\"$x.query.searchBox ? 'x-gap-4' : 'x-gap-16'\"\n                  >\n                    <div class=\"x-col-span-4 x-grid x-grid-cols-4 x-gap-32\">\n                      <div v-if=\"showHistoryQueries\" class=\"x-flex x-flex-col x-gap-4\">\n                        <h1 v-if=\"!$x.query.searchBox\" class=\"x-title4 x-title4-sm x-uppercase\">\n                          {{ $t('historyQueries.title') }}\n                        </h1>\n\n                        <HistoryQueries\n                          :animation=\"suggestionsAnimation\"\n                          :max-items-to-render=\"$x.query.searchBox ? 2 : 4\"\n                          suggestionItemClass=\"x-w-full\"\n                          class=\"-x-mr-2 x-flex x-flex-col x-gap-4\"\n                        >\n                          <template #suggestion=\"{ suggestion }\">\n                            <HistoryQuery\n                              class=\"x-suggestion-group-md\"\n                              :suggestion=\"suggestion\"\n                              suggestionClass=\"x-suggestion x-suggestion-md\"\n                            >\n                              <template #default=\"{ query }\">\n                                <HistoryIcon class=\"x-icon-md\" />\n                                <Highlight :text=\"suggestion.query\" :highlight=\"query\" />\n                              </template>\n\n                              <template #remove-button-content>\n                                <span\n                                  :aria-label=\"\n                                    $t('historyQueries.removeLabel', {\n                                      suggestion: suggestion.query\n                                    })\n                                  \"\n                                >\n                                  <CrossTinyIcon class=\"x-icon-md\" />\n                                </span>\n                              </template>\n                            </HistoryQuery>\n                          </template>\n                        </HistoryQueries>\n\n                        <ClearHistoryQueries\n                          v-if=\"!$x.query.searchBox\"\n                          class=\"x-button-neutral x-button-sm x-button-tight x-w-fit\"\n                        >\n                          <TrashIcon v-if=\"isTabletOrLess\" class=\"x-icon-lg\" />\n                          <span v-else>{{ $t('historyQueries.clear') }}</span>\n                        </ClearHistoryQueries>\n\n                        <PredictiveQuerySuggestions\n                          v-if=\"$x.query.searchBox && showQuerySuggestions\"\n                          :animation=\"suggestionsAnimation\"\n                        />\n                      </div>\n\n                      <PredictiveQuerySuggestions\n                        v-if=\"(!$x.query.searchBox || !showHistoryQueries) && showQuerySuggestions\"\n                        :animation=\"suggestionsAnimation\"\n                      />\n\n                      <PredictivePopularSearches\n                        v-if=\"showPopularSearches\"\n                        :animation=\"suggestionsAnimation\"\n                      />\n\n                      <PredictiveNextQueries\n                        v-if=\"showNextQueries\"\n                        :class=\"{ 'x-pt-8': $x.query.searchBox && isDesktopOrGreater }\"\n                        :animation=\"suggestionsAnimation\"\n                      />\n\n                      <BaseIdModalOpen\n                        v-if=\"isDesktopOrGreater && !$x.query.searchBox\"\n                        modalId=\"my-history-aside\"\n                        class=\"x-button-neutral x-button-sm x-button-tight x-col-start-[-1] x-self-start\"\n                        data-test=\"my-history-button\"\n                      >\n                        <SettingsIcon />\n                        {{ $t('myHistory.openButton') }}\n                      </BaseIdModalOpen>\n                    </div>\n\n                    <SlidingRecommendations\n                      v-if=\"isDesktopOrGreater && !$x.query.searchBox\"\n                      class=\"x-col-span-4 x-pt-16\"\n                    />\n                  </div>\n                </BaseKeyboardNavigation>\n              </div>\n              <SlidingRecommendations v-if=\"isTabletOrLess && !$x.query.searchBox\" />\n            </div>\n          </div>\n        </DesktopSearchboxAlign>\n      </MaxDesktopWidthItem>\n    </Empathize>\n\n    <div class=\"x-opacity-30\">\n      <Fade tag=\"div\">\n        <div\n          v-if=\"showOverlay\"\n          class=\"x-layout-item x-fixed x-h-screen x-w-full x-bg-neutral-100\"\n        ></div>\n      </Fade>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import {\n    BaseIdModalOpen,\n    BaseKeyboardNavigation,\n    CrossTinyIcon,\n    Fade,\n    Highlight,\n    HistoryIcon,\n    SettingsIcon,\n    StaggeredFadeAndSlide,\n    TrashIcon,\n    animateScale\n  } from '@empathyco/x-components';\n  import { Empathize } from '@empathyco/x-components/empathize';\n  import {\n    ClearHistoryQueries,\n    HistoryQueries,\n    HistoryQuery\n  } from '@empathyco/x-components/history-queries';\n  import { defineComponent, ref } from 'vue';\n  import { useDevice } from '../../composables/use-device.composable';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import { usePredictiveHelpers } from '../../composables/use-predictive-helpers.composable';\n  import DesktopSearchboxAlign from '../desktop/desktop-searchbox-align.vue';\n  import SlidingRecommendations from './sliding-recommendations.vue';\n  import PredictiveIdentifierResults from './predictive-identifier-results.vue';\n  import PredictiveNextQueries from './predictive-next-queries.vue';\n  import PredictivePopularSearches from './predictive-popular-searches.vue';\n  import PredictiveQuerySuggestions from './predictive-query-suggestions.vue';\n\n  export default defineComponent({\n    components: {\n      DesktopSearchboxAlign,\n      MaxDesktopWidthItem,\n      PredictiveQuerySuggestions,\n      PredictivePopularSearches,\n      PredictiveNextQueries,\n      PredictiveIdentifierResults,\n      BaseIdModalOpen,\n      BaseKeyboardNavigation,\n      ClearHistoryQueries,\n      CrossTinyIcon,\n      Fade,\n      Empathize,\n      Highlight,\n      HistoryQuery,\n      HistoryIcon,\n      HistoryQueries,\n      SlidingRecommendations,\n      SettingsIcon,\n      TrashIcon\n    },\n    setup() {\n      const empathizeAnimation = animateScale();\n      const suggestionsAnimation = StaggeredFadeAndSlide;\n\n      const { isDesktopOrGreater, isTabletOrLess } = useDevice();\n\n      const showOverlay = ref(false);\n\n      let previousBodyOverflow = '';\n      let previousHTMLOverflow = '';\n\n      const disableScroll = (): void => {\n        previousBodyOverflow = document.body.style.overflow;\n        previousHTMLOverflow = document.documentElement.style.overflow;\n        document.body.style.overflow = document.documentElement.style.overflow = 'hidden';\n      };\n\n      const enableScroll = (): void => {\n        document.body.style.overflow = previousBodyOverflow;\n        document.documentElement.style.overflow = previousHTMLOverflow;\n      };\n\n      const handleEmpathizeEvent = (event: 'EmpathizeOpened' | 'EmpathizeClosed'): void => {\n        showOverlay.value = event === 'EmpathizeOpened';\n\n        if (showOverlay.value) {\n          disableScroll();\n        } else {\n          enableScroll();\n        }\n      };\n\n      const {\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      } = usePredictiveHelpers();\n\n      return {\n        isDesktopOrGreater,\n        isTabletOrLess,\n        empathizeAnimation,\n        suggestionsAnimation,\n        showOverlay,\n        handleEmpathizeEvent,\n        navigationHijacker,\n        showIdentifierResults,\n        showHistoryQueries,\n        showQuerySuggestions,\n        showNextQueries,\n        showPopularSearches,\n        showEmpathize\n      };\n    }\n  });\n</script>\n<style lang=\"scss\">\n  .x-result-link:focus > * {\n    outline: -webkit-focus-ring-color auto 1px;\n  }\n</style>\n","<template>\n  <div class=\"x-relative x-pb-8\">\n    <MaxDesktopWidthItem>\n      <header class=\"x-flex x-items-center x-gap-48 x-pt-24\">\n        <Logo />\n\n        <div class=\"x-flex x-flex-1 x-flex-col x-gap-16\">\n          <div class=\"x-relative\">\n            <SearchBox />\n          </div>\n        </div>\n\n        <CloseMainModal class=\"x-button-lead x-button-circle x-button-ghost x-justify-self-end\">\n          <CrossIcon class=\"x-icon-lg\" />\n        </CloseMainModal>\n      </header>\n    </MaxDesktopWidthItem>\n\n    <LocationProvider location=\"predictive_layer\">\n      <FullWidthPredictive />\n    </LocationProvider>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { CloseMainModal, CrossIcon, LocationProvider } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import SearchBox from '../search-box.vue';\n  import Logo from '../logo.vue';\n  import FullWidthPredictive from '../predictive-layer/full-width-predictive.vue';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n\n  export default defineComponent({\n    components: {\n      MaxDesktopWidthItem,\n      FullWidthPredictive,\n      CloseMainModal,\n      CrossIcon,\n      Logo,\n      SearchBox,\n      LocationProvider\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { CloseMainModal, CrossIcon, LocationProvider } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import SearchBox from '../search-box.vue';\n  import Logo from '../logo.vue';\n  import FullWidthPredictive from '../predictive-layer/full-width-predictive.vue';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n\n  export default defineComponent({\n    components: {\n      MaxDesktopWidthItem,\n      FullWidthPredictive,\n      CloseMainModal,\n      CrossIcon,\n      Logo,\n      SearchBox,\n      LocationProvider\n    }\n  });\n","<template>\n  <div\n    v-if=\"$x.totalResults\"\n    class=\"x-flex x-items-center x-justify-end x-gap-24\"\n    :class=\"{ 'x-mb-8': !$x.selectedFilters.length }\"\n    data-test=\"total-results\"\n  >\n    <i18n class=\"x-text1 x-text1-lg x-flex-auto\" path=\"totalResults.message\" tag=\"span\">\n      <template #totalResults>\n        {{ $x.totalResults }}\n      </template>\n      <template #query>\n        <span class=\"x-title3\">\n          {{ $x.spellcheckedQuery || $x.query.search }}\n        </span>\n      </template>\n    </i18n>\n\n    <ColumnPicker data-test=\"column-picker\" />\n\n    <BaseIdModalOpen\n      modalId=\"right-aside\"\n      class=\"x-button-lead x-button-ghost\"\n      data-test=\"toggle-facets-button\"\n    >\n      <FiltersIcon class=\"x-icon-lg\" />\n      <span>{{ $t('toggleAside.showAside') }}</span>\n      <span\n        v-if=\"$x.selectedFilters.length\"\n        :class=\"{ 'x-badge-circle': $x.selectedFilters.length <= 9 }\"\n        class=\"x-badge x-badge-auxiliary\"\n      >\n        {{ $x.selectedFilters.length }}\n      </span>\n    </BaseIdModalOpen>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { BaseIdModalOpen, FiltersIcon } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import ColumnPicker from '../column-picker.vue';\n\n  export default defineComponent({\n    components: {\n      BaseIdModalOpen,\n      FiltersIcon,\n      ColumnPicker\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { BaseIdModalOpen, FiltersIcon } from '@empathyco/x-components';\n  import { defineComponent } from 'vue';\n  import ColumnPicker from '../column-picker.vue';\n\n  export default defineComponent({\n    components: {\n      BaseIdModalOpen,\n      FiltersIcon,\n      ColumnPicker\n    }\n  });\n","<template>\n  <CollapseHeightAnimation :isCollapsed=\"hasScrolledPastThreshold\">\n    <MaxDesktopWidthItem>\n      <DesktopSearchboxAlign>\n        <div class=\"x-layout-item\" :class=\"{ 'x-grid x-grid-cols-6': !isFullPredictive }\">\n          <LocationProvider location=\"predictive_layer\">\n            <RelatedTags v-if=\"$x.relatedTags.length > 0\" class=\"x-pb-24\" />\n          </LocationProvider>\n        </div>\n      </DesktopSearchboxAlign>\n\n      <div v-if=\"hasSearched\">\n        <DesktopToolbar />\n      </div>\n      <div v-if=\"$x.totalResults > 0 && hasSearched && $x.selectedFilters.length\">\n        <SelectedFilters class=\"x-py-16\" />\n      </div>\n    </MaxDesktopWidthItem>\n  </CollapseHeightAnimation>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { LocationProvider } from '@empathyco/x-components';\n  import RelatedTags from '../search/related-tags.vue';\n  import CollapseHeightAnimation from '../collapse-height-animation.vue';\n  import IsScrollingUp from '../has-scroll-past-threshold.mixin';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import DesktopSearchboxAlign from './desktop-searchbox-align.vue';\n  import DesktopToolbar from './desktop-toolbar.vue';\n\n  export default defineComponent({\n    components: {\n      MaxDesktopWidthItem,\n      LocationProvider,\n      RelatedTags,\n      CollapseHeightAnimation,\n      DesktopToolbar,\n      DesktopSearchboxAlign,\n      SelectedFilters: () => import('../search').then(m => m.SelectedFilters)\n    },\n    mixins: [IsScrollingUp],\n    props: {\n      hasSearched: {\n        type: Boolean\n      },\n      isFullPredictive: {\n        type: Boolean\n      }\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { LocationProvider } from '@empathyco/x-components';\n  import RelatedTags from '../search/related-tags.vue';\n  import CollapseHeightAnimation from '../collapse-height-animation.vue';\n  import IsScrollingUp from '../has-scroll-past-threshold.mixin';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import DesktopSearchboxAlign from './desktop-searchbox-align.vue';\n  import DesktopToolbar from './desktop-toolbar.vue';\n\n  export default defineComponent({\n    components: {\n      MaxDesktopWidthItem,\n      LocationProvider,\n      RelatedTags,\n      CollapseHeightAnimation,\n      DesktopToolbar,\n      DesktopSearchboxAlign,\n      SelectedFilters: () => import('../search').then(m => m.SelectedFilters)\n    },\n    mixins: [IsScrollingUp],\n    props: {\n      hasSearched: {\n        type: Boolean\n      },\n      isFullPredictive: {\n        type: Boolean\n      }\n    }\n  });\n","<template>\n  <div>\n    <DesktopHeaderFullPredictive />\n\n    <DesktopSubHeader :hasSearched=\"hasSearched\" :isFullPredictive=\"true\" class=\"x-layout-item\" />\n  </div>\n</template>\n\n<script>\n  import { defineComponent } from 'vue';\n  import HasSearchedMixin from '../has-searched.mixin.ts';\n  import DesktopHeaderFullPredictive from './desktop-header-full-predictive.vue';\n  import DesktopSubHeader from './desktop-sub-header.vue';\n\n  export default defineComponent({\n    components: { DesktopSubHeader, DesktopHeaderFullPredictive },\n    mixins: [HasSearchedMixin]\n  });\n</script>\n","//\n//\n//\n//\n//\n//\n//\n//\n\n  import { defineComponent } from 'vue';\n  import HasSearchedMixin from '../has-searched.mixin.ts';\n  import DesktopHeaderFullPredictive from './desktop-header-full-predictive.vue';\n  import DesktopSubHeader from './desktop-sub-header.vue';\n\n  export default defineComponent({\n    components: { DesktopSubHeader, DesktopHeaderFullPredictive },\n    mixins: [HasSearchedMixin]\n  });\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  import { animateTranslate, BaseIdModal, LocationProvider } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import { MainScroll, Scroll } from '@empathyco/x-components/scroll';\n  import Main from '../main.vue';\n  import CustomQueryPreview from '../pre-search/custom-query-preview.vue';\n  import ScrollToTop from '../scroll-to-top.vue';\n  import HasSearchedMixin from '../has-searched.mixin';\n  import MyHistoryAside from '../my-history/my-history-aside.vue';\n  import MyHistoryConfirmDisableModal from '../my-history/my-history-confirm-disable-modal.vue';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import DesktopTopSection from './desktop-top-section.vue';\n\n  @Component({\n    components: {\n      DesktopTopSection,\n      MaxDesktopWidthItem,\n      CustomQueryPreview,\n      BaseIdModal,\n      MyHistoryAside,\n      LocationProvider,\n      Main,\n      MainScroll,\n      MyHistoryConfirmDisableModal,\n      Scroll,\n      ScrollToTop,\n      DesktopAside: () => import('../search').then(m => m.DesktopAside),\n      NoResultsMessage: () => import('../search').then(m => m.NoResultsMessage),\n      SpellcheckMessage: () => import('../search').then(m => m.SpellcheckMessage)\n    }\n  })\n  export default class Desktop extends HasSearchedMixin {\n    protected rightAsideAnimation = animateTranslate('right');\n  }\n","<template>\n  <div class=\"x-layout-container\">\n    <DesktopTopSection />\n\n    <MainScroll class=\"x-flex x-flex-col\">\n      <Scroll id=\"main-scroll\">\n        <MaxDesktopWidthItem>\n          <div v-if=\"hasSearched\">\n            <LocationProvider location=\"results\">\n              <SpellcheckMessage class=\"x-mb-16\" data-test=\"spellcheck-message\" />\n            </LocationProvider>\n            <NoResultsMessage class=\"x-mb-16\" data-test=\"no-results-message\" />\n          </div>\n\n          <LocationProvider location=\"no_query\">\n            <CustomQueryPreview class=\"x-mt-56\" />\n          </LocationProvider>\n\n          <LocationProvider location=\"results\">\n            <Main />\n          </LocationProvider>\n        </MaxDesktopWidthItem>\n      </Scroll>\n    </MainScroll>\n    <MaxDesktopWidthItem class=\"x-layout-on-margin-right x-layout-overlap\">\n      <ScrollToTop />\n    </MaxDesktopWidthItem>\n\n    <div class=\"x-z-20\">\n      <BaseIdModal\n        key=\"right-aside\"\n        :animation=\"rightAsideAnimation\"\n        modalId=\"right-aside\"\n        contentClass=\"x-w-512 x-ml-auto\"\n      >\n        <DesktopAside />\n      </BaseIdModal>\n\n      <BaseIdModal\n        key=\"my-history-aside\"\n        :animation=\"rightAsideAnimation\"\n        modalId=\"my-history-aside\"\n        contentClass=\"x-w-512 x-ml-auto\"\n      >\n        <MyHistoryAside />\n      </BaseIdModal>\n\n      <MyHistoryConfirmDisableModal />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { animateTranslate, BaseIdModal, LocationProvider } from '@empathyco/x-components';\n  import { Component } from 'vue-property-decorator';\n  import { MainScroll, Scroll } from '@empathyco/x-components/scroll';\n  import Main from '../main.vue';\n  import CustomQueryPreview from '../pre-search/custom-query-preview.vue';\n  import ScrollToTop from '../scroll-to-top.vue';\n  import HasSearchedMixin from '../has-searched.mixin';\n  import MyHistoryAside from '../my-history/my-history-aside.vue';\n  import MyHistoryConfirmDisableModal from '../my-history/my-history-confirm-disable-modal.vue';\n  import MaxDesktopWidthItem from '../max-desktop-width-item.vue';\n  import DesktopTopSection from './desktop-top-section.vue';\n\n  @Component({\n    components: {\n      DesktopTopSection,\n      MaxDesktopWidthItem,\n      CustomQueryPreview,\n      BaseIdModal,\n      MyHistoryAside,\n      LocationProvider,\n      Main,\n      MainScroll,\n      MyHistoryConfirmDisableModal,\n      Scroll,\n      ScrollToTop,\n      DesktopAside: () => import('../search').then(m => m.DesktopAside),\n      NoResultsMessage: () => import('../search').then(m => m.NoResultsMessage),\n      SpellcheckMessage: () => import('../search').then(m => m.SpellcheckMessage)\n    }\n  })\n  export default class Desktop extends HasSearchedMixin {\n    protected rightAsideAnimation = animateTranslate('right');\n  }\n</script>\n\n<style>\n  .x-layout-item > * {\n    min-width: 0;\n  }\n</style>\n","<template>\n  <MainModal :animation=\"animation\" :class=\"`x-${deviceName}`\" :focusOnOpen=\"isTabletOrLess\">\n    <Mobile v-if=\"isTabletOrLess\" />\n    <Desktop v-else />\n  </MainModal>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent } from 'vue';\n  import { animateClipPath, MainModal } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n  import Mobile from './mobile/mobile.vue';\n  import Desktop from './desktop/desktop.vue';\n\n  export default defineComponent({\n    components: {\n      MainModal,\n      Mobile,\n      Desktop\n    },\n    setup() {\n      const { isTabletOrLess, deviceName } = useDevice();\n      return {\n        animation: animateClipPath(),\n        deviceName,\n        isTabletOrLess\n      };\n    }\n  });\n</script>\n","\n\n\n\n\n\n\n\n  import { defineComponent } from 'vue';\n  import { animateClipPath, MainModal } from '@empathyco/x-components';\n  import { useDevice } from '../composables/use-device.composable';\n  import Mobile from './mobile/mobile.vue';\n  import Desktop from './desktop/desktop.vue';\n\n  export default defineComponent({\n    components: {\n      MainModal,\n      Mobile,\n      Desktop\n    },\n    setup() {\n      const { isTabletOrLess, deviceName } = useDevice();\n      return {\n        animation: animateClipPath(),\n        deviceName,\n        isTabletOrLess\n      };\n    }\n  });\n"],"names":["CrossFade","Vue","__decorate","Prop","type","Boolean","default","prototype","Component","inheritAttrs","__vue_script__","script","Fade","DISABLE_ANIMATIONS_KEY","LIST_ITEMS_KEY","QUERY_KEY","HAS_MORE_ITEMS_KEY","DisableAnimationMixin","name","this","disableAnimation","animationName","XInject","noOp","localStorageService","localStorage","BrowserStorageService","clear","getItem","setItem","removeItem","StaggeringTransitionGroup","moveClassName","moveClass","transitionData","$props","$attrs","$listeners","beforeLeave","addRestorePositionHook","afterEnter","addClearStaggeringCall","afterLeave","beforeCreate","oldChildren","newChildren","oldPositions","WeakMap","newPositions","pendingCleanupMoveCallbacks","staggerCounter","render","createElement","$slots","filter","isTransitionValidVNode","forEach","addTransitionData","syncOldNodes","tag","staticClass","mounted","applyStagger","beforeUpdate","wrapperBounds","$el","getBoundingClientRect","updated","recordNewPosition","leavingNodes","stayingNodes","enteringNodes","getNodesByTransitionType","vNode","disableClickingEvents","movedChildren","applyTranslation","movedStagger","map","getNextTransitionDelay","document","body","startMoveAnimation","transitionHook","element","top","left","width","height","get","marginTop","marginLeft","window","getComputedStyle","style","position","parseFloat","delete","pendingCallback","transitionDelay","key","data","transition","recordOldPosition","set","elm","createRelativeBounds","wrapperLeft","wrapperTop","child","has","pointerEvents","staggering","oldPosition","newPosition","dx","dy","transform","transitionDuration","moveStagger","index","classList","add","cleanMoveTransition","event","target","test","propertyName","removeEventListener","remove","addEventListener","StaggeredFadeAndSlide","mixins","constructor","components","createDirectionalAnimationFactory","animationOrigin","extend","h","props","on","animateClipPath","animateScale","animateTranslate","BaseEventButton","emitEvents","Object","entries","events","payload","$x","emit","required","isElementEqualOrContained","a","b","contains","getTargetElement","composedPath","removeCombiningDiacriticalMarks","String","normalize","string","replace","normalizeString","trim","toLowerCase","debounce","fn","debounceTimeInMs","leading","trailing","timer","debouncedFn","args","isFirstLeadingCall","clearTimeout","setTimeout","undefined","cancel","ColumnPickerMixin","selectedColumns","providedSelectedColumns","value","columns","setSelectedColumns","emitChange","column","$emit","beforeMount","XEmit","immediate","Watch","XOn","model","dynamicPropsMixin","propNames","reduce","propName","BaseColumnPickerList","columnsWithCssClasses","cssClasses","isSelected","UserClickedColumnPicker","ColumnsNumberProvided","FORMAT_REGEX","currencyFormatter","format","integer","decimal","split","numberParts","decimalSeparator","decimalsNumber","integerSeparator","hideIntegerDecimals","decimals","exec","length","currencyConfig","formattedInteger","formatInteger","formattedDecimal","padEnd","substring","formatDecimal","defineComponent","Number","setup","injectedFormat","inject","renderedFormat","computed","currency","BaseCurrency","lessThan","fromTo","from","label","range","min","max","children","partMessage","class","scrollXStoreModule","state","pendingScrollTo","getters","mutations","setScrollComponentState","id","newState","hasReachedStart","hasAlmostReachedEnd","hasReachedEnd","direction","assign","setPendingScrollTo","actions","scrollEmitters","createStoreEmitters","wireCommit","namespacedWireCommit","setScrollPositionWire","metadata","eventPayload","setScrollDirectionWire","setScrollHasAlmostReachedEndWire","setScrollHasReachedEndWire","setScrollHasReachedStartWire","setPendingScrollToWire","scroll","clearPendingScrollToWire","scrollXModule","storeModule","storeEmitters","wiring","createWiring","UserScrolled","UserChangedScrollDirection","UserReachedScrollStart","UserAlmostReachedScrollEnd","UserReachedScrollEnd","ParamsLoadedFromUrl","ScrollRestoreSucceeded","ScrollRestoreFailed","ScrollObserverKey","MainScrollId","MainScroll","intersectingElements","intersectionObserver","disableAnimations","visibleElementsObserver","observer","observe","bind","unobserve","removeVisibleElement","firstVisibleElement","anotherElement","firstVisibleElementBounds","anotherElementBounds","querySelector","dataset","IntersectionObserver","updateVisibleElements","root","useWindow","threshold","rootMargin","margin","beforeDestroy","disconnect","disconnectPreviousObserver","_new","old","failRestoringScroll","restoreScrollFailTimeoutId","restoreScrollTimeoutMs","indexOf","splice","entry","isIntersecting","push","dynamicClasses","State","XProvide","NoElement","xComponentMixin","FOCUSABLE_SELECTORS","Debounce","debounceOptions","createDecorator","options","originalMethod","methods","debouncedMethod","context","call","originalBeforeDestroy","apply","BaseModal","Mixins","previousBodyOverflow","previousHTMLOverflow","isWaitingForLeave","$watch","syncBody","open","resizeObserver","ResizeObserver","updatePosition","referenceSelector","referenceElement","$on","y","$refs","modal","bottom","isOpen","disableScroll","addBodyListeners","removeBodyListeners","enableScroll","focusOnOpen","setFocus","$off","overflow","documentElement","emitFocusInBody","emitOverlayClicked","modalContent","focusCandidates","Array","querySelectorAll","find","tabIndex","focus","BaseIdModal","openModal","modalId","openerElement","closeModal","emitClickOutOfModal","ScrollMixin","clientHeight","currentPosition","previousPosition","scrollHeight","throttledStoreScrollData","throttleTimeMs","timeout","params","throttle","storeScrollData","throttleMs","distanceToEnd","scrollEndPosition","hasScrollAlmostReachedEnd","hasScrollReachedStart","distanceToBottom","hasScrollReachedEnd","scrollDirection","$nextTick","then","console","warn","resetScroll","resetOnChange","scrollTo","emitScroll","_newScrollPosition","oldScrollPosition","emitScrollReachedAtStart","isScrollAtStart","emitScrollAlmostAtEnd","isScrollAlmostAtEnd","emitScrollAtEnd","isScrollAtEnd","emitScrollDirection","scrollTop","instance","resetOn","BaseScroll","Scroll","createEventMetadata","emitScrollDirectionChange","emitScrollAtStart","isAtStart","isAlmostAtEnd","isAtEnd","scrollToTop","scrollId","behavior","AnimationProp","Function","animation","closingEvent","BaseEventsModal","_payload","emitBodyClickEvent","bodyClickEvent","component","eventsToOpenModal","eventsToCloseModal","use$x","getCurrentInstance","proxy","emitCloseModalEvent","emitOpenModalEvent","BaseEventsModalClose","openEvents","closeEvents","outOfModalClickEvent","BaseHeaderTogglePanel","startCollapsed","toggleOpen","emitOpenStatusEvent","BaseTogglePanel","result","UserClickedResultAddToCart","price","hasDiscount","animationProp","loadAnimation","hoverAnimation","showNextImageOnHover","pendingImages","ref","loadedImages","isHovering","userHasHoveredImage","watch","images","image","includes","imageSrc","shouldLoadNextImage","numImagesToLoad","loaderStyles","visibility","flagImageAsFailed","shift","flagImageLoaded","el","resultClickExtraEvents","resultLinkMetadataPerEvent","emitUserClickedAResult","Highlight","hasMatch","matchParts","match","dynamicCSSClasses","classes","matchClass","noMatchClass","matcherIndex","text","highlight","splitAt","start","end","query","suggestion","feature","suggestionSelectedEvents","highlightCurated","facets","filters","filterEvent","UserClickedAFilter","UserAcceptedAQuery","UserSelectedASuggestion","shouldHighlightCurated","isCurated","BaseSuggestions","suggestionsKeys","suggestionsToRender","isArrayEmpty","getFacetsKey","getFacetKey","join","facet","suggestions","flatMap","showFacets","showPlainSuggestion","expandSuggestionFilters","slice","maxItemsToRender","getSuggestionFilter","isLoading","durationInSeconds","cssStyles","animationDuration","BaseGrid","renderedColumnsNumber","computedItems","items","injectedListItems","gridTemplateColumns","gridItems","item","slotName","toKebabCase","modelName","cssClass","updateRenderedColumnsNumber","DirectionalFocusNavigationService","container","focusableSelectors","intersectionAreaWeight","orthogonalWeightHorizontal","orthogonalWeightVertical","alignWeight","filterFunction","ArrowUp","candidateRect","isBelow","originRect","ArrowRight","isRightSide","ArrowDown","ArrowLeft","navigateTo","arrowKey","rawCandidates","getFocusableElements","updateOrigin","getBestCandidate","newOrigin","activeElement","origin","candidates","filterCandidates","bestCandidate","bestCurrentScore","candidate","bestScore","Math","getDistanceScore","MAX_SAFE_INTEGER","isValidCandidate","isCandidateVisible","hasFocusCompatibleAttributes","isInNavigateDirection","candidateStyle","offsetWidth","offsetHeight","getAttribute","candidatePoint","originPoint","getComparisionPoints","absoluteDistances","x","abs","euclideanDistance","sqrt","pow","intersection","getIntersection","displacement","alignment","getDisplacementAndAlignment","area","points","setParallelPointValues","setOrthogonalPointValues","right","areAligned","alignBias","orthogonalBias","rect1","rect2","topLeftPoint","bottomRightPoint","BaseKeyboardNavigation","navigationService","navigationHijackerEvents","eventsSet","navigationHijacker","xEvent","Set","triggerNavigation","hasToTakeNavigationControl","focusNextNavigableElement","some","moduleName","dir","nextElementToFocus","elementToFocus","emitDirectionalLimitReached","eventsForDirectionLimit","BaseSwitch","toggle","BaseVariableColumnGrid","providedColumns","columnsToRender","setColumns","newColumns","ItemsList","dataTest","itemClass","LocationProvider","Provide","SlidingPanel","debouncedUpdateScrollPosition","contentChangedObserver","MutationObserver","restoreAndUpdateScroll","resetOnContentChange","shouldReset","scrollContainer","attributes","childList","subtree","characterData","updateScrollPosition","scrollLeft","clientWidth","scrollWidth","scrollRight","scrollValue","scrollBy","scrollFactor","ItemsListInjectionMixin","VIEWPORT_ID","infiniteScroll","inserted","arg","closest","getRoot","componentInstance","onInfiniteScrollEnd","createIntersectionObserver","unbind","_element","CancelSymbol","Symbol","createFetchAndSaveActions","fetch","onSuccess","onError","error","onCancel","cancelPreviousRequest","cancelPrevious","fetchAndSave","request","commit","promise","cancelCallback","cancelPromise","Promise","_","reject","race","cancellablePromise","handleCancel","response","resolve","handleResponse","catch","handleError","setStatus","status","areFiltersDifferent","someFilters","anotherFilters","otherFilter","SPLIT_WORDS_REGEX","BooleanFilterModelNames","isFacetFilter","ScrollToTop","scrollData","scrollPositionsMap","UserClickedScrollToTop","useThresholdStrategy","thresholdPx","isThresholdReached","isVisible","hasAlmostReachedScrollEnd","MainScrollItem","async","observeItem","firstVisibleItemObserver","newObserver","oldObserver","scrollIntoView","dispatch","recommendations","recommendationsXStoreModule","config","maxItemsToRequest","rows","extraParams","setRecommendations","setParams","updateRecommendation","recommendation","stateRecommendation","cancelFetchAndSaveRecommendations","fetchRecommendations","_context","XPlugin","adapter","results","recommendationsEmitters","RecommendationsChanged","RecommendationsRequestUpdated","selector","wireDispatch","namespacedWireDispatch","recommendationsXModule","fetchAndSaveRecommendations","ExtraParamsChanged","setRecommendationsExtraParams","Recommendations","storedRecommendations","resultFeature","ignoreResultClickEvent","displayClickMetadata","displayOriginalQuery","search","provide","UserClickedADisplayResult","UserClickedAResult","ignoreInModules","BaseAddToCart","BaseFallbackImage","BasePlaceholderImage","BaseResultCurrentPrice","BaseResultPreviousPrice","BaseResultImage","BaseResultLink","showDescription","showAddToCart","isDesktopOrGreater","useDevice","imageAnimation","DisplayClickProvider","Result","isMobile","staggeredFadeAndSlide","HasSearchedMixin","isStringEmpty","hasSearched","Main","CustomRecommendations","PartialResults","import","m","Results","Redirection","queriesPreviewXStoreModule","queriesPreview","loadedQueriesPreview","objectFilter","preview","totalResults","clearQueryPreview","setQueryPreview","queryPreview","fetchQueryPreview","fetchAndSaveQueryPreview","queriesPreviewEmitters","queriesPreviewXModule","QueryPreviewRequestUpdated","fetchAndSaveQueryPreviewWire","QueryPreviewUnmountedHook","clearQueryPreviewWire","setQueriesPreviewExtraParamsWire","QueryPreview","queryPreviewResults","queryPreviewRequest","createOrigin","queryFeature","location","previewResults","emitQueryPreviewRequestUpdated","priority","replaceable","debounceTimeMs","created","cancelEmitPreviewRequestUpdated","emitLoad","Inject","QueryPreviewList","queriesStatus","renderedQueries","queries","resetStatusRecord","loadNext","flagAsLoaded","loadedQuery","flagAsFailed","failedQuery","queryToLoad","$set","ChevronLeftIcon","ChevronRightIcon","isTouchable","CustomQueryPreview","queriesPreviewInfo","getTitle","title","getEvent","CustomSlidingPanel","ArrowRightIcon","ScrollToTopComponent","ChevronUpIcon","empathizeXStoreModule","setIsOpen","empathizeXModule","EmpathizeOpened","EmpathizeClosed","setIsNotOpen","Empathize","hasContent","noContent","changeOpenState","close","empathize","newOpenState","eventsToOpenEmpathize","eventsToCloseEmpathize","addQueryToHistoryAction","addQueryToHistory","normalizedQuery","historyQueries","createHistoryQuery","newHistory","createNewHistory","unshift","timestamp","Date","now","currentHistory","normalizedLastQuery","queriesTuple","newWords","wordsTuple","isReplaceAction","removeNewQueryFromHistory","isAddAction","historyQuery","lastWords","lastQuery","newQuery","isQueryBeingRefined","refinedWordIndex","lastRefinedWord","newRefinedWord","SESSION_TIME_STAMP_STORAGE_KEY","HISTORY_QUERIES_ENABLED_KEY","historyQueriesGetter","searchInHistoryQueries","hideIfEqualsQuery","normalizedHistoryQuery","matchesQuery","historyQueriesXStoreModule","debounceInMs","maxItemsToStore","sessionTTLInMs","sessionTimeStampInMs","isEnabled","historyQueriesWithResults","sessionHistoryQueries","storageKey","setHistoryQueries","setSessionTimeStamp","sessionTimeStamp","setQuery","setIsEnabled","loadHistoryQueriesFromBrowserStorage","refreshSession","removeFromHistory","historyQueryToRemove","toggleHistoryQueries","searchResponse","indexOfHistoryQuery","findIndex","newHistoryQueries","historyQueriesEmitters","SessionHistoryQueriesChanged","_state","HistoryQueriesQueryChanged","HistoryQueriesStorageKeyChanged","wireDispatchWithoutPayload","namespacedWireDispatchWithoutPayload","addQueryToHistoryQueries","setHistoryQueriesQuery","setUrlParams","clearHistoryQueriesQuery","refreshHistoryQueriesSession","loadHistoryQueriesFromBrowserStorageWire","clearHistoryQueries","removeHistoryQuery","setHistoryQueriesEnabled","setHistoryQueriesDisabled","updateHistoryQueriesWithSearchResponse","historyQueriesWiring","UserClearedQuery","UserIsTypingAQuery","setHistoryQueriesQueryDebounce","namespacedDebounce","moduleDebounce","cancelOn","UserPressedClearHistoryQueries","UserPressedRemoveHistoryQuery","UserClickedEnableHistoryQueries","UserClickedConfirmDisableHistoryQueries","UserClickedCloseX","UserClickedOutOfMainModal","SearchResponseChanged","historyQueriesXModule","ClearHistoryQueries","clearHistoryQueriesEvents","isHistoryQueriesEmpty","RemoveHistoryQuery","removeHistoryQueryEvent","HistoryQuery","UserSelectedAHistoryQuery","Getter","BaseSuggestion","HistoryQueries","HistoryQueriesSwitch","hasHistoryQueries","MyHistory","groupByDate","groupItemsBy","current","toLocaleDateString","usedLocale","day","weekday","month","year","formatTime","toLocaleTimeString","hour","minute","snippetConfig","lang","locale","HistoryQueryComponent","usePredictiveHelpers","showIdentifierResults","identifierResults","showHistoryQueries","showQuerySuggestions","searchBox","querySuggestions","showNextQueries","nextQueries","showPopularSearches","popularSearches","showEmpathize","identifierResultsXStoreModule","identifierDetectionRegexp","separatorChars","identifierResultsRequest","identifierHighlightRegexp","char","highlightQueryRegexValue","RegExp","setIdentifierResults","setOrigin","cancelFetchAndSaveIdentifierResults","fetchIdentifierResults","fetchAndSaveIdentifierResults","queryOriginInit","saveQuery","identifierResultsEmitters","IdentifierResultsChanged","createEmitterArrayFilter","IdentifierResultsRequestUpdated","setIdentifierResultsQuery","clearIdentifierResultsQuery","fetchAndSaveIdentifierResultsWire","cancelFetchAndSaveIdentifierResultsWire","saveIdentifierResultsOriginWire","setIdentifierResultsExtraParams","identifierResultsWiring","setIdentifierResultsQueryDebounce","identifierResultsXModule","IdentifierResult","highlightedQueryHTML","identifierValue","identifier","IdentifierResults","identifierResultsToRender","BarCodeIcon","fetchAndSaveSuggestions","cancelFetchAndSaveSuggestions","querySuggestionsGetter","isInQuerySuggestions","querySuggestionsXStoreModule","setSuggestions","querySuggestionsEmitters","QuerySuggestionsChanged","QuerySuggestionsRequestUpdated","setQuerySuggestionsQuery","setQuerySuggestionsExtraParams","clearQuerySuggestionsQuery","fetchAndSaveSuggestionsWire","cancelFetchAndSaveSuggestionsWire","querySuggestionsWiring","setQuerySuggestionsQueryDebounce","querySuggestionsXModule","QuerySuggestion","UserSelectedAQuerySuggestion","QuerySuggestions","SearchIcon","nextQueriesXStoreModule","searchedQueries","hideSessionQueries","loadOnInit","maxPreviewItemsToRequest","resultsPreview","queriesToFilter","setNextQueries","setSearchedQueries","setResultsPreview","resetResultsPreview","cancelFetchAndSaveNextQueries","fetchAndSaveNextQueries","fetchNextQueries","setQueryFromLastHistoryQuery","fetchNextQueryPreview","fetchAndSaveNextQueryPreview","nextQueriesEmitters","NextQueriesChanged","NextQueriesRequestUpdated","wireCommitWithoutPayload","namespacedWireCommitWithoutPayload","setNextQueriesQuery","setNextQueriesExtraParams","fetchAndSaveNextQueriesWire","setQueryFromLastHistoryQueryWire","fetchAndSaveNextQueryPreviewWire","nextQueriesXModule","resetResultsPreviewWire","NextQueryPreviewMountedHook","NextQuery","UserSelectedANextQuery","NextQueries","renderedNextQueries","stateNextQueries","NextQueriesList","nextQueriesGroups","values","floor","maxNextQueriesPerGroup","maxGroups","nextQuery","nextQueriesAreOutdated","hasNotEnoughListItems","concat","nextQueriesGroup","targetIndex","offset","frequency","injectedQuery","showOnlyAfterOffset","hasMoreItems","NextQueryPreview","suggestionResults","CuratedCheckIcon","LightBulbOn","popularSearchesXStoreModule","fetchSuggestions","popularSearchesEmitters","PopularSearchesRequestUpdated","popularSearchesXModule","retrievePopularSuggestions","setSearchedQueriesInPopularSearches","setPopularSearchesExtraParams","PopularSearch","UserSelectedAPopularSearch","PopularSearches","TrendingIcon","PredictivePopularSearches","PredictiveNextQueries","PredictiveQuerySuggestions","PredictiveIdentifierResults","BaseIdModalOpen","CrossTinyIcon","HistoryIcon","SlidingRecommendations","SettingsIcon","TrashIcon","empathizeAnimation","suggestionsAnimation","isTabletOrLess","machine","currentState","initial","states","typing","filled","UserFocusedSearchBox","empty","focused","UserBlurredSearchBox","searchBoxXStoreModule","inputStatus","trimmedQuery","setInputStatus","searchBoxEmitters","SearchBoxQueryChanged","setSearchBoxQuery","clearSearchBoxQuery","searchBoxXModule","transitionState","urlParams","UserPressedClearSearchBoxButton","ClearSearchInput","clearSearchInputEvents","isQueryEmpty","SearchButton","SearchInput","searchInputMessage","focusInput","input","cancelDebouncedUserAcceptedAQuery","debouncedUserAcceptedAQuery","autofocus","emitDebouncedUserAcceptedAQuery","instant","emitUserAcceptedAQuery","instantDebounceInMs","emitUserHoveredInSearchBox","emitUserHoveredOutSearchBox","emitUserBlurredSearchBox","emitUserClickedSearchBox","emitUserFocusedSearchBox","emitUserIsTypingAQueryEvents","emitUserPressedArrowKey","emitUserPressedEnterKey","blur","preventSpecialKey","preventDefault","BaseIdModalClose","ArrowLeftIcon","CrossIcon","CustomMyHistory","MyHistoryIconBw","onMounted","dismissEvents","UserClickedDismissDisableHistoryQueries","confirmEvents","MobileOpenAside","FiltersIcon","Grid1ColIcon","Grid2ColIcon","Grid4ColIcon","icons","MobileToolbar","ColumnPicker","page","restRequest","pageSize","enrichRequest","fetchAndSaveSearchResponse","cancelFetchAndSaveSearchResponse","createRelatedTagsQueryGetter","getRelatedTags","relatedTags","searchXStoreModule","partialResults","banners","promoteds","spellcheckedQuery","sort","isAppendResults","redirections","queryTagging","url","selectedFilters","isNoResults","fromNoResultsWithFilters","appendResults","resetState","setResults","setPartialResults","setFacets","setRelatedTags","setSelectedFilters","facetId","setBanners","setPromoteds","setSpellcheck","setTotalResults","setSort","setPage","setPageSize","setIsAppendResults","setIsNoResults","setFromNoResultsWithFilters","setRedirections","setQueryTagging","updateResult","stateResult","fetchSearchResponse","increasePageAppendingResults","newPage","resetRequestOnRefinement","newRequest","oldRequest","changedKeys","getNewAndUpdatedKeys","changedExtraParams","saveSearchResponse","spellcheck","keys","currentQuery","saveOrigin","searchEmitters","FacetsChanged","newValue","oldValue","PageChanged","ResultsChanged","SearchRequestChanged","SearchRequestUpdated","SearchTaggingChanged","SpellcheckChanged","SortChanged","cancelFetchAndSaveSearchResponseWire","saveOriginWire","fetchAndSaveSearchResponseWire","resetSpellcheckQuery","setSearchQuery","clearSearchQuery","setSearchExtraParams","resetIsNoResults","resetFromNoResultsWithFilters","increasePageAppendingResultsWire","resetAppending","resetRequestOnRefinementWire","searchXModule","UserAcceptedSpellcheckQuery","UserClickedASort","UserPickedARelatedTag","UserReachedResultsListEnd","resetStateIfNoRequestWire","filterTruthyPayload","SelectedRelatedTagsChanged","SelectedFiltersForRequestChanged","SelectedSortProvided","Banner","imageFailed","emitClickEvent","banner","anchorEvents","click","auxclick","contextmenu","BannersList","columnsNumber","setColumnsNumber","newColumnsNumber","stateItems","previousBannerRow","row","rowsDiff","isIndexInLoadedPages","areAllPagesLoaded","PartialQueryButton","PartialResultsList","Promoted","promoted","PromotedsList","at","isRedirecting","redirection","redirectWithDelay","mode","timeoutId","redirect","delayInSeconds","abortRedirect","cancelRedirect","ResultsList","providedQuery","updateQuery","searchQuery","SortMixin","providedSelectedSort","selectedSort","SortPickerList","listItems","Spellcheck","SpellcheckButton","directives","ResultComponent","isTabletOrGreater","CustomHeaderTogglePanel","ChevronDownIcon","RadioButtonSelectedIcon","RadioButtonUnselectedIcon","sortValues","facetsXStoreModule","groups","preselectedFilters","stickyFilters","filtersStrategyForRequest","selected","stickyFilterId","selectedFilter","selectedFiltersForRequest","isHierarchicalFilter","childrenIds","newFilter","selectedFiltersByFacet","emptyRecord","filtersByFacet","_id","mutateFilter","newFilterState","setFilters","setPreselectedFilters","removeFilter","removeFilters","setFacetGroup","groupId","removeFacet","setFacet","setFacetsConfig","setStickyFilter","removeStickyFilter","clearStickyFilters","facetsEmitters","SelectedFiltersChanged","FacetsQueryChanged","previousQuery","isNewQueryEmpty","isPreviousQueryEmpty","previousQueryWords","newQueryWords","every","previousQueryWord","newQueryWord","addFacetIfNotPresent","store","facetModelName","EditableNumberRangeFilterEntity","static","isEditableNumberRangeFilter","deselect","removePreviousFilter","getNewFilterId","select","newFilterId","previousFilter","getFilterByFacet","HierarchicalFilterEntity","saveFilter","deselectDescendants","selectAncestors","parentId","parent","getFilterById","accepts","NumberRangeFilterEntity","RawFilterEntity","SimpleFilterEntity","FilterEntityFactory","entities","modifiersByFacetId","modifiersByFilterModelName","cache","getFilterEntity","cacheKey","createFilterEntity","filterEntityConstructor","entity","Error","modifiedEntity","modifier","registerFilterEntity","registerModifierByFacetId","modifiers","updateModifiers","registerModifierByFilterModelName","filterModelName","modifiersRecord","modifierKey","facetModifiers","newModifiers","DefaultFacetsService","filterEntityFactory","facetsGroup","newFilters","updateStore","updateFiltersSelectedState","updateFacets","getSelectedFilters","updatePreselectedFilters","setPreselectedFilter","selectPreselectedFilters","clearFilters","facetIds","clearFiltersWithMetadata","filterOrFilters","isArray","removeGroupFacets","removeGroupFilters","flatFilters","isHierarchicalFacet","flat","flattenedFilters","previousFilters","newStateFiltersMap","arrayToObject","filterEntity","filtersToRemove","facetsToRemove","facetGroup","restFacet","wireFacetsService","wireService","wireFacetsServiceWithoutPayload","wireServiceWithoutPayload","updateFacetsGroupWithSearchFacetsWire","mapWire","setFacetsGroupWire","toggleFilterWire","clearFiltersWire","clearAllFiltersWire","clearAllFiltersButStickyWire","keepSticky","clearAllFiltersOnSecondQuery","selectFilterWire","setFiltersFromUrl","filterId","selectPreselectedFilterWire","facetsXModule","PreselectedFiltersProvided","FacetsGroupProvided","UserChangedExtraParams","UserClickedClearAllFilters","UserModifiedEditableNumberRangeFilter","UserClickedAllFilter","UserClickedOpenX","FacetsMixin","facetsIds","selectedFiltersGetter","hasSelectedFilters","alwaysVisible","Facets","mappedFacets","facetsToRender","slotNameById","slotNameByModelName","renderableFacets","excludedRegExp","included","excluded","filterFacetsToRender","hasFacets","hasAnyFacetIncluded","facetKey","isIncluded","isExcluded","AllFilter","clickEvent","RenderlessFilter","clickEvents","isDisabled","$scopedSlots","clickFilter","NumberRangeFilter","_clickEvents","UserClickedANumberRangeFilter","FiltersInjectionMixin","renderedFilters","filterByParentId","propOrInjectedFilters","injectedFilters","FiltersList","hasFiltersToRender","HierarchicalFilter","UserClickedAHierarchicalFilter","isPartiallySelected","getChildFilterClickEvents","childFilter","isObject","isFilterPartiallySelected","renderedChildrenFilters","selectedChildren","filterChildrenLength","SimpleFilter","UserClickedASimpleFilter","FiltersSearch","filtersSearchInputMessage","updateSetQueryDebounced","setQueryDebounced","siftedFilters","isBooleanFilter","clearQuery","SelectedFilters","SelectedFiltersList","mapSlot","SlicedFilters","showMoreFilters","showButton","slicedFilters","difference","toggleShowMoreFilters","ClearFilters","BasePriceFilterLabel","FacetSelectedFilters","CustomSlicedFilters","MinusIcon","PlusIcon","CustomFacets","CheckboxUnselectedIcon","CheckboxSelectedIcon","PriceFilterLabel","fetchAndSaveRelatedTags","cancelFetchAndSaveRelatedTags","selectedRelatedTags","relatedTagsXStoreModule","setSelectedRelatedTags","fetchRelatedTags","toggleRelatedTag","relatedTag","rt","tags","createRelatedTags","relatedTagsEmitters","RelatedTagsChanged","RelatedTagsRequestUpdated","setRelatedTagsQuery","setRelatedTagsExtraParams","fetchAndSaveRelatedTagsWire","cancelFetchAndSaveRelatedTagsWire","toggleRelatedTagWire","clearSelectedRelatedTags","clearRelatedTagsQuery","relatedTagsXModule","setUrlParamsWire","RelatedTag","blurRelatedTag","clickRelatedTag","RelatedTags","storedRelatedTags","relatedTagsAnimation","SpellcheckMessage","NoResultsMessage","AutoProgressBar","RedirectionComponent","DesktopAside","Sort","MobileCloseAside","MobileAside","isCollapsed","IsScrollingUp","mainScrollPosition","updateHasScrolledPastThreshold","mainScrollData","hasScrolledPastThresholdFlag","isScrollingUp","scrollOffset","hasScrolledPastThreshold","deep","CollapseHeightAnimation","Mobile","CloseMainModal","MobileSubHeader","MyHistoryAside","MyHistoryConfirmDisableModal","PredictiveLayer","SearchBox","DesktopSearchboxAlign","MaxDesktopWidthItem","showOverlay","handleEmpathizeEvent","Logo","isFullPredictive","DesktopHeaderFullPredictive","Desktop","DesktopTopSection","MainModal","deviceName"],"mappings":"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"}